// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator traxion {
  provider         = "traxion-prisma-generator"
  output           = "../src/generated"
  // Path relative to the output directory
  tsConfigFilePath = "../../tsconfig.app.json"
}

// // Nestjs graphql dto generator
// generator nestjsGraphqlDtos {
//   provider         = "trxn-prisma-nestjs-graphql-dtos-generator"
//   output           = "../src/nestjs-graphql-dtos"
//   // Path relative to the output directory
//   tsConfigFilePath = "../../tsconfig.app.json"
// }

// // Nestjs public grahpql resolvers generator
// generator nestjsGraphqlResolvers {
//   provider = "trxn-prisma-nestjs-graphql-resolvers-generator"
//   output   = "../src/nestjs-graphql-resolvers"

//   // Path relative to the output directory
//   tsConfigFilePath            = "../../tsconfig.app.json"
//   nestjsServicesImportPath    = "./nestjs-services"
//   nestjsGraphqlDtosImportPath = "./nestjs-graphql-dtos"
// }

// // Nestjs authorizd graphql resolvers generator
// generator nestjsAuthorizedGraphqlResolvers {
//   provider                           = "trxn-prisma-nestjs-authorized-graphql-resolvers-generator"
//   output                             = "../src/nestjs-graphql-authorized-resolvers"
//   tsConfigFilePath                   = "../../tsconfig.app.json"
//   nestjsServicesImportPath           = "./nestjs-services"
//   nestjsGraphqlDtosImportPath        = "./nestjs-graphql-dtos"
//   nestjsAuthorizedServicesImportPath = "./nestjs-authorized-services"
// }

// // Nestjs common services generator
// generator nestjsServices {
//   provider         = "trxn-prisma-nestjs-services-generator"
//   output           = "../src/nestjs-services"
//   tsConfigFilePath = "../../tsconfig.app.json"
// }

// // Nestjs common services generator
// generator nestjsAuthorizedServices {
//   provider                 = "trxn-prisma-nestjs-authorized-services-generator"
//   output                   = "../src/nestjs-authorized-services"
//   tsConfigFilePath         = "../../tsconfig.app.json"
//   nestjsServicesImportPath = "./nestjs-services"
// }

// generator caslConfig {
//   provider         = "trxn-prisma-casl-generator"
//   output           = "../src/casl"
//   tsConfigFilePath = "../../tsconfig.app.json"
// }

// generator nestjsModules {
//   provider        = "trxn-prisma-nestjs-modules-generator"
//   output           = "../src/modules"
//   tsConfigFilePath = "../../tsconfig.app.json"
//   nestjsAuthorizedServicesImportPath = "./nestjs-authorized-services"
//   nestjsGraphqlResolversImportPath = "./nestjs-graphql-authorized-resolvers"
//   nestjsServicesImportPath = "./nestjs-services"
// }

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  /// @trxn/hidden
  /// @trxn/encrypted
  password String

  /// @trxn/roles
  roles    Role[] @default([user])

  // Profile relation (one-to-one)
  profile Profile?

  // Task relation (one-to-many)
  tasks Task[] @relation("TaskToAuthor")

  // Shared task relation (many-to-many)
  sharedTasks Task[] @relation("TaskToUser")
}

model Profile {
  id        Int     @id @default(autoincrement())
  firstName  String

  /// @trxn/defaultSelect
  lastName  String
  bio       String? @db.Text()
  user      User    @relation(fields: [userId], references: [id])
  userId    Int     @unique
}

model Task {
  id          Int        @id @default(autoincrement())
  title       String
  description String?
  status      TaskStatus @default(draft)
  author      User       @relation("TaskToAuthor", fields: [authorId], references: [id])
  authorId    Int
  /// @trxn/permissions: readOnly
  sharedWith  User[]     @relation("TaskToUser")
}

enum TaskStatus {
  draft
  open
  inProgress
  done
}

enum Role {
  admin
  user
}
