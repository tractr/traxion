{
  "pipes": [],
  "interfaces": [
    {
      "name": "TransformAndValidateOptions",
      "id": "interface-TransformAndValidateOptions-77b53b72c51081d0cdf6449fe1e4fe59",
      "file": "generated/rext-client/helpers/transform-and-validate.ts",
      "type": "interface",
      "sourceCode": "import \"reflect-metadata\";\n\nimport {\n  ClassConstructor,\n  ClassTransformOptions,\n  plainToClass,\n} from 'class-transformer';\nimport { validateSync, ValidatorOptions } from 'class-validator';\nimport { of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport function getDefaults<T>(\n  classValidator: ClassConstructor<T>,\n  options: {\n    plainToClass?: ClassTransformOptions;\n  } = {},\n): Required<T> {\n  return plainToClass(\n    classValidator,\n    {},\n    {\n      enableImplicitConversion: true,\n      ...(options?.plainToClass || {}),\n    },\n  ) as Required<T>;\n}\n\nexport function defaultsPropertiesMap<T>(\n  classValidator: ClassConstructor<T>,\n  options: {\n    plainToClass?: ClassTransformOptions;\n  } = {},\n) {\n  return map((value: unknown) => {\n    const defaultOptions = getDefaults(classValidator, options);\n    return {\n      ...defaultOptions,\n      ...((value || {}) as Record<string, unknown>),\n    };\n  });\n}\n\nexport interface TransformAndValidateOptions {\n  plainToClass?: ClassTransformOptions;\n  validate?: ValidatorOptions;\n}\n\nexport function transformAndValidate<T>(\n  classValidator: ClassConstructor<T>,\n  options?: TransformAndValidateOptions,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n): <O>(value: O) => O extends any[] ? T[] : T {\n  return (value: unknown) => {\n    const validatedConfig = plainToClass(classValidator, value, {\n      enableImplicitConversion: true,\n      ...(options?.plainToClass || {}),\n    });\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    const errors = validateSync((validatedConfig as unknown) as object, {\n      ...(options?.plainToClass || {}),\n    });\n    if (errors.length > 0) {\n      throw errors;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return validatedConfig as any;\n  };\n}\n\nexport function transformAndValidateMap<O, T>(\n  classValidator: ClassConstructor<T>,\n  options: TransformAndValidateOptions = {},\n) {\n  return map((value: O) =>\n    transformAndValidate(classValidator, options)(value),\n  );\n}\n\nexport function isAlike<T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  object: any,\n  classValidator: ClassConstructor<T>,\n  options: {\n    plainToClass?: ClassTransformOptions;\n  } = {},\n): object is T {\n  if (object instanceof classValidator) return true;\n  try {\n    transformAndValidate(classValidator, options)(object);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport function fromDto<T>(\n  params: unknown,\n  classValidator: ClassConstructor<T>,\n  options: {\n    plainToClass?: ClassTransformOptions;\n  } = {},\n) {\n  return of(params).pipe(\n    defaultsPropertiesMap(classValidator, options),\n    transformAndValidateMap(classValidator, options),\n  );\n}\n\n",
      "properties": [
        {
          "name": "plainToClass",
          "type": "ClassTransformOptions",
          "optional": true,
          "description": "",
          "line": 44
        },
        {
          "name": "validate",
          "type": "ValidatorOptions",
          "optional": true,
          "description": "",
          "line": 45
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "methods": []
    }
  ],
  "injectables": [
    {
      "name": "AnswerService",
      "id": "injectable-AnswerService-2766918b7d779a192b6ff0b64e4d9d91",
      "file": "generated/angular-rext-client/services/answer.service.ts",
      "properties": [],
      "methods": [],
      "description": "",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { environment } from '@env/environment';\nimport { AnswerService as BaseAnswerService } from '@generated/rext-client';\n@Injectable()\nexport class AnswerService extends BaseAnswerService {\n  constructor() {\n    super(environment.api.uri);\n  }\n}\n\n \n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [],
        "line": 5
      },
      "extends": "BaseAnswerService",
      "type": "injectable"
    },
    {
      "name": "MessageService",
      "id": "injectable-MessageService-31c8a41cfb714116b24856b9d3dbc6e4",
      "file": "generated/angular-rext-client/services/message.service.ts",
      "properties": [],
      "methods": [],
      "description": "",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { environment } from '@env/environment';\nimport { MessageService as BaseMessageService } from '@generated/rext-client';\n@Injectable()\nexport class MessageService extends BaseMessageService {\n  constructor() {\n    super(environment.api.uri);\n  }\n}\n\n \n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [],
        "line": 5
      },
      "extends": "BaseMessageService",
      "type": "injectable"
    },
    {
      "name": "OpenQuestionService",
      "id": "injectable-OpenQuestionService-7ab4614c512bcc7ffb3890c47da9864c",
      "file": "generated/angular-rext-client/services/open-question.service.ts",
      "properties": [],
      "methods": [],
      "description": "",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { environment } from '@env/environment';\nimport { OpenQuestionService as BaseOpenQuestionService } from '@generated/rext-client';\n@Injectable()\nexport class OpenQuestionService extends BaseOpenQuestionService {\n  constructor() {\n    super(environment.api.uri);\n  }\n}\n\n \n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [],
        "line": 5
      },
      "extends": "BaseOpenQuestionService",
      "type": "injectable"
    },
    {
      "name": "QuestionService",
      "id": "injectable-QuestionService-94a3ad45beb9709967b9a6489bb666eb",
      "file": "generated/angular-rext-client/services/question.service.ts",
      "properties": [],
      "methods": [],
      "description": "",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { environment } from '@env/environment';\nimport { QuestionService as BaseQuestionService } from '@generated/rext-client';\n@Injectable()\nexport class QuestionService extends BaseQuestionService {\n  constructor() {\n    super(environment.api.uri);\n  }\n}\n\n \n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [],
        "line": 5
      },
      "extends": "BaseQuestionService",
      "type": "injectable"
    },
    {
      "name": "TagService",
      "id": "injectable-TagService-d4e730e4f7939ac1e5f56a9c82856741",
      "file": "generated/angular-rext-client/services/tag.service.ts",
      "properties": [],
      "methods": [],
      "description": "",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { environment } from '@env/environment';\nimport { TagService as BaseTagService } from '@generated/rext-client';\n@Injectable()\nexport class TagService extends BaseTagService {\n  constructor() {\n    super(environment.api.uri);\n  }\n}\n\n \n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [],
        "line": 5
      },
      "extends": "BaseTagService",
      "type": "injectable"
    },
    {
      "name": "UserService",
      "id": "injectable-UserService-7ba8290e9dbdebc13bcc3d671189a369",
      "file": "generated/angular-rext-client/services/user.service.ts",
      "properties": [],
      "methods": [],
      "description": "",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { environment } from '@env/environment';\nimport { UserService as BaseUserService } from '@generated/rext-client';\n@Injectable()\nexport class UserService extends BaseUserService {\n  constructor() {\n    super(environment.api.uri);\n  }\n}\n\n \n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [],
        "line": 5
      },
      "extends": "BaseUserService",
      "type": "injectable"
    },
    {
      "name": "VariableService",
      "id": "injectable-VariableService-73368636456ec42337328b41f87d4763",
      "file": "generated/angular-rext-client/services/variable.service.ts",
      "properties": [],
      "methods": [],
      "description": "",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { environment } from '@env/environment';\nimport { VariableService as BaseVariableService } from '@generated/rext-client';\n@Injectable()\nexport class VariableService extends BaseVariableService {\n  constructor() {\n    super(environment.api.uri);\n  }\n}\n\n \n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [],
        "line": 5
      },
      "extends": "BaseVariableService",
      "type": "injectable"
    }
  ],
  "classes": [
    {
      "name": "Answer",
      "id": "class-Answer-97efa06d41559d5682529a910a586d4c",
      "file": "generated/models/models/answer.ts",
      "type": "class",
      "sourceCode": "import {  \n  IsOptional,\n  IsString,\n  IsUUID,\n  ValidateNested,\n} from 'class-validator';\n\nimport { User } from './user';\nimport { Question } from './question';\nimport { Tag } from './tag';\nimport { Variable } from './variable';\n\nimport { Answer as PrismaAnswer } from '@prisma/client';\n\nexport class Answer implements PrismaAnswer {\n  @IsString() \n  @IsUUID(\"all\", ) \n  id!: string;\n\n  @ValidateNested() \n  user?: User;\n\n  @ValidateNested() \n  question?: Question;\n\n  @ValidateNested({ each: true}) \n  @IsOptional()\n  tags?: Tag[];\n\n  @IsString() \n  @IsUUID(\"all\") \n  userId!: string;\n\n  @IsString() \n  @IsUUID(\"all\") \n  questionId!: string;\n\n  @ValidateNested({ each: true}) \n  variableAsAnswer?: Variable[];\n\n}\n",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 19,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": "'all'"
            }
          ]
        },
        {
          "name": "question",
          "type": "Question",
          "optional": true,
          "description": "",
          "line": 25,
          "decorators": [
            {
              "name": "ValidateNested",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "questionId",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 37,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": "'all'"
            }
          ]
        },
        {
          "name": "tags",
          "type": "Tag[]",
          "optional": true,
          "description": "",
          "line": 29,
          "decorators": [
            {
              "name": "ValidateNested",
              "stringifiedArguments": "{each: true}"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "user",
          "type": "User",
          "optional": true,
          "description": "",
          "line": 22,
          "decorators": [
            {
              "name": "ValidateNested",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "userId",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 33,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": "'all'"
            }
          ]
        },
        {
          "name": "variableAsAnswer",
          "type": "Variable[]",
          "optional": true,
          "description": "",
          "line": 40,
          "decorators": [
            {
              "name": "ValidateNested",
              "stringifiedArguments": "{each: true}"
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "implements": ["PrismaAnswer"]
    },
    {
      "name": "AnswerCountQueryDto",
      "id": "class-AnswerCountQueryDto-0b45a2f549ddafbee958a7612cfa76bf",
      "file": "generated/rest-dtos/dtos/answer/answer-count-query.dto.ts",
      "type": "class",
      "sourceCode": "import {\n\n  IsOptional,\n  IsString,\n} from 'class-validator';\n\n \nexport class AnswerCountQueryDto {\n  @IsString() \n  @IsOptional()\n  id?: string;\n\n}\n",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 12,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "AnswerCreateBodyDto",
      "id": "class-AnswerCreateBodyDto-c79470b62c1e424702bd7813acaf828c",
      "file": "generated/rest-dtos/dtos/answer/answer-create-body.dto.ts",
      "type": "class",
      "sourceCode": "import {  \n  IsOptional,\n  IsString,\n  IsUUID,\n} from 'class-validator';\n\n \nexport class AnswerCreateBodyDto {\n  @IsString() \n  @IsUUID(\"all\", ) \n  user!: string;\n\n  @IsString() \n  @IsUUID(\"all\", ) \n  question!: string;\n\n  @IsString({ each: true}) \n  @IsUUID(\"all\", { each: true}) \n  @IsOptional()\n  tags?: string[];\n\n}\n",
      "properties": [
        {
          "name": "question",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 16,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": "'all'"
            }
          ]
        },
        {
          "name": "tags",
          "type": "string[]",
          "optional": true,
          "description": "",
          "line": 21,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": "{each: true}"
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": "'all', {each: true}"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "user",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 12,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": "'all'"
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "AnswerDeleteParamsDto",
      "id": "class-AnswerDeleteParamsDto-4b213248ebf82f11e0d9be43a0ececba",
      "file": "generated/rest-dtos/dtos/answer/answer-delete-params.dto.ts",
      "type": "class",
      "sourceCode": "import {\n  IsString,\n  IsUUID,\n} from 'class-validator';\n\nexport class AnswerDeleteParamsDto {\n  @IsString()\n  @IsUUID()\n  id!: string;\n}\n",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "AnswerFindManyQueryDto",
      "id": "class-AnswerFindManyQueryDto-1f385fa192addbae81c93c9c1a74c7f6",
      "file": "generated/rest-dtos/dtos/answer/answer-find-many-query.dto.ts",
      "type": "class",
      "sourceCode": "import {\n  IsIn,\n  IsInt,\n  IsNumber,\n  IsOptional,\n  IsString,\n\n  Min,\n} from 'class-validator';\n\nimport {\n  AnswerInclude,\n  SortOrder,\n  Answer,\n} from '@generated/models';\n\nexport class AnswerFindManyQueryDto {\n  @IsString() \n  @IsOptional()\n  id?: string;\n\n  @IsString({ each: true })\n  @IsIn(AnswerInclude, { each: true })\n  @IsOptional()\n  populate?: AnswerInclude[];\n\n  @IsOptional()\n  @IsString()\n  @IsIn([\n    'id',\n  ]) \n  sort: keyof Answer = 'id';\n\n  @IsOptional()\n  @IsIn(Object.values(SortOrder)) \n  order: SortOrder = 'asc';\n\n  @IsOptional()\n  @IsNumber()\n  @IsInt()\n  @Min(1)\n  take = 100;\n\n  @IsOptional()\n  @IsNumber()\n  @IsInt()\n  @Min(0)\n  skip = 0;\n}\n",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 20,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "order",
          "defaultValue": "'asc'",
          "type": "SortOrder",
          "optional": false,
          "description": "",
          "line": 36,
          "decorators": [
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            },
            {
              "name": "IsIn",
              "stringifiedArguments": "undefined"
            }
          ]
        },
        {
          "name": "populate",
          "type": "AnswerInclude[]",
          "optional": true,
          "description": "",
          "line": 25,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": "{each: true}"
            },
            {
              "name": "IsIn",
              "stringifiedArguments": "AnswerInclude, {each: true}"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "skip",
          "defaultValue": "0",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 48,
          "decorators": [
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            },
            {
              "name": "IsNumber",
              "stringifiedArguments": ""
            },
            {
              "name": "IsInt",
              "stringifiedArguments": ""
            },
            {
              "name": "Min",
              "stringifiedArguments": "0"
            }
          ]
        },
        {
          "name": "sort",
          "defaultValue": "'id'",
          "type": "",
          "optional": false,
          "description": "",
          "line": 32,
          "decorators": [
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            },
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsIn",
              "stringifiedArguments": "undefined"
            }
          ]
        },
        {
          "name": "take",
          "defaultValue": "100",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 42,
          "decorators": [
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            },
            {
              "name": "IsNumber",
              "stringifiedArguments": ""
            },
            {
              "name": "IsInt",
              "stringifiedArguments": ""
            },
            {
              "name": "Min",
              "stringifiedArguments": "1"
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "AnswerFindUniqueParamsDto",
      "id": "class-AnswerFindUniqueParamsDto-15e2364a2c44d5ac0d208c91541c72a9",
      "file": "generated/rest-dtos/dtos/answer/answer-find-unique-params.dto.ts",
      "type": "class",
      "sourceCode": "import {\n  IsString,\n  IsUUID,\n} from 'class-validator';\n\nexport class AnswerFindUniqueParamsDto {\n  @IsString()\n  @IsUUID()\n  id!: string;\n}\n",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "AnswerFindUniqueQueryDto",
      "id": "class-AnswerFindUniqueQueryDto-c890d8da68d37d6caf068d269a240d3a",
      "file": "generated/rest-dtos/dtos/answer/answer-find-unique-query.dto.ts",
      "type": "class",
      "sourceCode": "import {\n  IsIn,\n  IsOptional,\n  IsString,\n} from 'class-validator';\n\nimport { AnswerInclude } from '@generated/models';\nexport class AnswerFindUniqueQueryDto {\n  @IsString({ each: true })\n  @IsIn(AnswerInclude,\n    { each: true }\n  )\n  @IsOptional()\n  populate?: AnswerInclude[];\n}\n",
      "properties": [
        {
          "name": "populate",
          "type": "AnswerInclude[]",
          "optional": true,
          "description": "",
          "line": 15,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": "{each: true}"
            },
            {
              "name": "IsIn",
              "stringifiedArguments": "AnswerInclude, {each: true}"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "AnswerService",
      "id": "class-AnswerService-cf58aebf72809b1fda30dc77a44f4e1a",
      "file": "generated/rext-client/services/answer.service.ts",
      "type": "class",
      "sourceCode": "import { Observable, OperatorFunction, zip } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\nimport {\n  count,\n  CountAjaxOptions,\n  create,\n  CreateAjaxOptions,\n  extractAjaxResponseData,\n  findMany,\n  FindManyOptions,\n  findUnique,\n  FindUniqueOptions,\n  fromDto,\n  isAlike,\n  patch,\n  PatchOptions,\n  remove,\n  RemoveOptions,\n  transformAndValidateMap,\n  upsert,\n  UpsertOptions,\n} from '../helpers';\n\nimport { Answer } from '@generated/models';\nimport {\n  AnswerCountQueryDto,\n  AnswerCreateBodyDto,\n  AnswerDeleteParamsDto,\n  AnswerFindManyQueryDto,\n  AnswerFindUniqueParamsDto,\n  AnswerFindUniqueQueryDto,\n  AnswerUpdateBodyDto,\n  AnswerUpdateParamsDto,\n  AnswerUpsertBodyDto,\n  AnswerUpsertParamsDto,\n} from '@generated/rest-dtos';\n\nexport class AnswerService {\n  public apiUrl: URL;\n\n  constructor(apiUrl: string | URL) {\n    this.apiUrl = new URL('answer', apiUrl.toString());\n  }\n\n  /**\n   * Create a new Answer\n   *\n   * @param createBody - Dto of the request body\n   * @param options - Ajax request options\n   * @returns a new Answer\n   */\n  public create$(\n    createBody: AnswerCreateBodyDto,\n    options?: CreateAjaxOptions,\n  ): Observable<Answer> {\n    return fromDto(createBody, AnswerCreateBodyDto).pipe(\n      switchMap((body) =>\n        create(this.apiUrl, body, options).pipe(\n          extractAjaxResponseData(),\n          transformAndValidateMap(Answer),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Create a new Answer\n   *\n   * @param options - Ajax request options\n   * @returns a new Answer\n   */\n  public create(\n    options?: CreateAjaxOptions,\n  ): OperatorFunction<AnswerCreateBodyDto, Answer> {\n    return switchMap((createBody) => this.create$(createBody, options));\n  }\n\n  /**\n   * Count the number of Answer entities that matches the filter\n   *\n   * @param countQuery - Dto of the request query\n   * @param options - Ajax request options\n   * @returns the number of Answer\n   */\n  public count$(\n    countQuery?: AnswerCountQueryDto,\n    options?: CountAjaxOptions,\n  ): Observable<number> {\n    return fromDto(countQuery, AnswerCountQueryDto).pipe(\n      switchMap((query) =>\n        count(this.apiUrl, { ...query }, options).pipe(\n          extractAjaxResponseData(),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Count the number of Answer entities that matches the filter\n   *\n   * @param options - Ajax request options\n   * @returns the number of Answer\n   */\n  public count(\n    options?: CountAjaxOptions,\n  ): OperatorFunction<AnswerCountQueryDto | undefined, number> {\n    return switchMap((countQuery) => this.count$(countQuery, options));\n  }\n\n  /**\n   * Find zero or one Model that matches the filter\n   *\n   model\n   * @param findUniqueParams - Dto of the request param\n   * @param findUniqueQuery - Dto of the request query\n   * @param options - Ajax request options\n   * @returns a Model or null\n   */\n  public findUnique$(\n    findUniqueParams: AnswerFindUniqueParamsDto,\n    findUniqueQuery?: AnswerFindUniqueQueryDto,\n    options?: FindUniqueOptions,\n  ): Observable<Answer> {\n    return zip(\n      fromDto(findUniqueParams, AnswerFindUniqueParamsDto),\n      fromDto(findUniqueQuery, AnswerFindUniqueQueryDto),\n    ).pipe(\n      switchMap(([params, query]) =>\n        findUnique(this.apiUrl, params, { ...query }, options).pipe(\n          extractAjaxResponseData(),\n          transformAndValidateMap(Answer),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Count the number of Answer entities that matches the filter\n   *\n   * @param options - Ajax request options\n   * @returns the number of Answer\n   */\n  public findUnique(\n    options?: FindUniqueOptions,\n  ): OperatorFunction<\n    | { params: AnswerFindUniqueParamsDto; query?: AnswerFindUniqueQueryDto }\n    | [AnswerFindUniqueParamsDto, AnswerFindUniqueQueryDto]\n    | AnswerFindUniqueParamsDto,\n    Answer\n  > {\n    return switchMap((source) => {\n      if (Array.isArray(source))\n        return this.findUnique$(source[0], source[1], options);\n      if (isAlike(source, AnswerFindUniqueParamsDto))\n        return this.findUnique$(source, undefined, options);\n      return this.findUnique$(source.params, source.query, options);\n    });\n  }\n\n  /**\n   * Find zero or more Model entities that matches the filter\n   *\n   * @param findManyQuery - Dto of the request query\n   * @param options - Ajax request options\n   * @returns an array of Model entities\n   */\n  public findMany$(\n    findManyQuery?: AnswerFindManyQueryDto,\n    options?: FindManyOptions,\n  ): Observable<Answer[]> {\n    return fromDto(findManyQuery, AnswerFindManyQueryDto).pipe(\n      switchMap((params) =>\n        findMany(this.apiUrl, { ...params }, options).pipe(\n          extractAjaxResponseData(),\n          transformAndValidateMap(Answer),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Find zero or more Model entities that matches the filter\n   *\n   * @param options - Ajax request options\n   * @returns an array of Model entities\n   */\n  public findMany(\n    options?: FindManyOptions,\n  ): OperatorFunction<AnswerFindManyQueryDto | undefined, Answer[]> {\n    return switchMap((findManyQuery) => this.findMany$(findManyQuery, options));\n  }\n\n  /**\n   * Update one Answer\n   *\n   * @Remarks\n   *\n   * Partial updates are allowed with this method\n   *\n   * @param updateParams - Dto of the request param\n   * @param updateBody - Dto of the request body\n   * @param options - Ajax request options\n   * @returns the updated Answer\n   */\n  public patch$(\n    updateParams: AnswerUpdateParamsDto,\n    updateBody: AnswerUpdateBodyDto,\n    options?: PatchOptions,\n  ): Observable<Answer> {\n    return zip(\n      fromDto(updateParams, AnswerUpdateParamsDto),\n      fromDto(updateBody, AnswerUpdateBodyDto),\n    ).pipe(\n      switchMap(([params, body]) =>\n        patch(this.apiUrl, params, body, options).pipe(\n          extractAjaxResponseData(),\n          transformAndValidateMap(Answer),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * patch$ alias\n   */\n  public update$ = this.patch$.bind(this);\n\n  /**\n   * Update one Answer\n   *\n   * @Remarks\n   *\n   * Partial updates are allowed with this method\n   *\n   * @param updateParams - Dto of the request param\n   * @param updateBody - Dto of the request body\n   * @param options - Ajax request options\n   * @returns the updated Answer\n   */\n  public patch(\n    options?: PatchOptions,\n  ): OperatorFunction<\n    | { params: AnswerUpdateParamsDto; body: AnswerUpdateBodyDto }\n    | [AnswerUpdateParamsDto, AnswerUpdateBodyDto],\n    Answer\n  > {\n    return switchMap((source) => {\n      if (Array.isArray(source))\n        return this.patch$(source[0], source[1], options);\n      return this.patch$(source.params, source.body, options);\n    });\n  }\n\n  /**\n   * patch alias\n   */\n  public update = this.patch.bind(this);\n\n  /**\n   * Update one Answer\n   *\n   * @Remarks\n   *\n   * Partial updates are allowed with this method\n   *\n   * @param updateParams - Dto of the request param\n   * @param updateBody - Dto of the request body\n   * @param options - Ajax request options\n   * @returns the updated Answer\n   */\n  public upsert$(\n    updateParams: AnswerUpsertParamsDto,\n    updateBody: AnswerUpsertBodyDto,\n    options?: UpsertOptions,\n  ): Observable<Answer> {\n    return zip(\n      fromDto(updateParams, AnswerUpsertParamsDto),\n      fromDto(updateBody, AnswerUpsertBodyDto),\n    ).pipe(\n      switchMap(([params, body]) =>\n        upsert(this.apiUrl, params, body, options).pipe(\n          extractAjaxResponseData(),\n          transformAndValidateMap(Answer),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Update one Answer\n   *\n   * @Remarks\n   *\n   * Partial updates are allowed with this method\n   *\n   * @param updateParams - Dto of the request param\n   * @param updateBody - Dto of the request body\n   * @param options - Ajax request options\n   * @returns the updated Answer\n   */\n  public upsert(\n    options?: UpsertOptions,\n  ): OperatorFunction<\n    | { params: AnswerUpsertParamsDto; body: AnswerUpsertBodyDto }\n    | [AnswerUpsertParamsDto, AnswerUpsertBodyDto],\n    Answer\n  > {\n    return switchMap((source) => {\n      if (Array.isArray(source))\n        return this.upsert$(source[0], source[1], options);\n      return this.upsert$(source.params, source.body, options);\n    });\n  }\n\n  /**\n   * Delete one Answer\n   *\n   * @param deleteParams - Dto of the request param\n   * @param options - Ajax request options\n   * @returns the updated Answer\n   */\n  public remove$(\n    deleteParams: AnswerDeleteParamsDto,\n    options?: RemoveOptions,\n  ): Observable<Answer> {\n    return fromDto(deleteParams, AnswerDeleteParamsDto).pipe(\n      switchMap((params) =>\n        remove(this.apiUrl, { ...params }, options).pipe(\n          extractAjaxResponseData(),\n          transformAndValidateMap(Answer),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * remove$ alias\n   */\n  public delete$ = this.remove$.bind(this);\n\n  /**\n   * Delete one Answer\n   *\n   * @param deleteParams - Dto of the request param\n   * @param options - Ajax request options\n   * @returns the updated Answer\n   */\n  public remove(\n    options?: RemoveOptions,\n  ): OperatorFunction<AnswerDeleteParamsDto, Answer> {\n    return switchMap((removeParams) => this.remove$(removeParams, options));\n  }\n\n  /**\n   * remove alias\n   */\n  public delete = this.remove.bind(this);\n}\n\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "apiUrl",
            "type": "string | URL"
          }
        ],
        "line": 40,
        "jsdoctags": [
          {
            "name": "apiUrl",
            "type": "string | URL",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "apiUrl",
          "type": "URL",
          "optional": false,
          "description": "",
          "line": 40,
          "modifierKind": [114]
        },
        {
          "name": "delete",
          "defaultValue": "this.remove.bind(this)",
          "type": "",
          "optional": false,
          "description": "<p>remove alias</p>\n",
          "line": 358,
          "modifierKind": [114]
        },
        {
          "name": "delete$",
          "defaultValue": "this.remove$.bind(this)",
          "type": "",
          "optional": false,
          "description": "<p>remove$ alias</p>\n",
          "line": 340,
          "modifierKind": [114]
        },
        {
          "name": "update",
          "defaultValue": "this.patch.bind(this)",
          "type": "",
          "optional": false,
          "description": "<p>patch alias</p>\n",
          "line": 258,
          "modifierKind": [114]
        },
        {
          "name": "update$",
          "defaultValue": "this.patch$.bind(this)",
          "type": "",
          "optional": false,
          "description": "<p>patch$ alias</p>\n",
          "line": 227,
          "modifierKind": [114]
        }
      ],
      "methods": [
        {
          "name": "count",
          "args": [
            {
              "name": "options",
              "type": "CountAjaxOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<AnswerCountQueryDto | undefined, number>",
          "typeParameters": [],
          "line": 105,
          "description": "<p>Count the number of Answer entities that matches the filter</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 2335,
                "end": 2342,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "CountAjaxOptions",
              "optional": true,
              "tagName": {
                "pos": 2329,
                "end": 2334,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 2372,
                "end": 2379,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the number of Answer</p>\n"
            }
          ]
        },
        {
          "name": "count$",
          "args": [
            {
              "name": "countQuery",
              "type": "AnswerCountQueryDto",
              "optional": true
            },
            {
              "name": "options",
              "type": "CountAjaxOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<number>",
          "typeParameters": [],
          "line": 86,
          "description": "<p>Count the number of Answer entities that matches the filter</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 1802,
                "end": 1812,
                "flags": 0,
                "escapedText": "countQuery"
              },
              "type": "AnswerCountQueryDto",
              "optional": true,
              "tagName": {
                "pos": 1796,
                "end": 1801,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request query</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 1852,
                "end": 1859,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "CountAjaxOptions",
              "optional": true,
              "tagName": {
                "pos": 1846,
                "end": 1851,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 1889,
                "end": 1896,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the number of Answer</p>\n"
            }
          ]
        },
        {
          "name": "create",
          "args": [
            {
              "name": "options",
              "type": "CreateAjaxOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<AnswerCreateBodyDto, Answer>",
          "typeParameters": [],
          "line": 73,
          "description": "<p>Create a new Answer</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 1469,
                "end": 1476,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "CreateAjaxOptions",
              "optional": true,
              "tagName": {
                "pos": 1463,
                "end": 1468,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 1506,
                "end": 1513,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>a new Answer</p>\n"
            }
          ]
        },
        {
          "name": "create$",
          "args": [
            {
              "name": "createBody",
              "type": "AnswerCreateBodyDto"
            },
            {
              "name": "options",
              "type": "CreateAjaxOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<Answer>",
          "typeParameters": [],
          "line": 53,
          "description": "<p>Create a new Answer</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 949,
                "end": 959,
                "flags": 0,
                "escapedText": "createBody"
              },
              "type": "AnswerCreateBodyDto",
              "tagName": {
                "pos": 943,
                "end": 948,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request body</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 998,
                "end": 1005,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "CreateAjaxOptions",
              "optional": true,
              "tagName": {
                "pos": 992,
                "end": 997,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 1035,
                "end": 1042,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>a new Answer</p>\n"
            }
          ]
        },
        {
          "name": "findMany",
          "args": [
            {
              "name": "options",
              "type": "FindManyOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<AnswerFindManyQueryDto | undefined, Answer[]>",
          "typeParameters": [],
          "line": 188,
          "description": "<p>Find zero or more Model entities that matches the filter</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 4843,
                "end": 4850,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "FindManyOptions",
              "optional": true,
              "tagName": {
                "pos": 4837,
                "end": 4842,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 4880,
                "end": 4887,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>an array of Model entities</p>\n"
            }
          ]
        },
        {
          "name": "findMany$",
          "args": [
            {
              "name": "findManyQuery",
              "type": "AnswerFindManyQueryDto",
              "optional": true
            },
            {
              "name": "options",
              "type": "FindManyOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<Answer[]>",
          "typeParameters": [],
          "line": 168,
          "description": "<p>Find zero or more Model entities that matches the filter</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 4240,
                "end": 4253,
                "flags": 0,
                "escapedText": "findManyQuery"
              },
              "type": "AnswerFindManyQueryDto",
              "optional": true,
              "tagName": {
                "pos": 4234,
                "end": 4239,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request query</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 4293,
                "end": 4300,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "FindManyOptions",
              "optional": true,
              "tagName": {
                "pos": 4287,
                "end": 4292,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 4330,
                "end": 4337,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>an array of Model entities</p>\n"
            }
          ]
        },
        {
          "name": "findUnique",
          "args": [
            {
              "name": "options",
              "type": "FindUniqueOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<literal type |  | AnswerFindUniqueParamsDto, Answer>",
          "typeParameters": [],
          "line": 144,
          "description": "<p>Count the number of Answer entities that matches the filter</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 3489,
                "end": 3496,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "FindUniqueOptions",
              "optional": true,
              "tagName": {
                "pos": 3483,
                "end": 3488,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 3526,
                "end": 3533,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the number of Answer</p>\n"
            }
          ]
        },
        {
          "name": "findUnique$",
          "args": [
            {
              "name": "findUniqueParams",
              "type": "AnswerFindUniqueParamsDto"
            },
            {
              "name": "findUniqueQuery",
              "type": "AnswerFindUniqueQueryDto",
              "optional": true
            },
            {
              "name": "options",
              "type": "FindUniqueOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<Answer>",
          "typeParameters": [],
          "line": 120,
          "description": "<p>Find zero or one Model that matches the filter</p>\n<p>model</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 2681,
                "end": 2697,
                "flags": 0,
                "escapedText": "findUniqueParams"
              },
              "type": "AnswerFindUniqueParamsDto",
              "tagName": {
                "pos": 2675,
                "end": 2680,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request param</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 2737,
                "end": 2752,
                "flags": 0,
                "escapedText": "findUniqueQuery"
              },
              "type": "AnswerFindUniqueQueryDto",
              "optional": true,
              "tagName": {
                "pos": 2731,
                "end": 2736,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request query</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 2792,
                "end": 2799,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "FindUniqueOptions",
              "optional": true,
              "tagName": {
                "pos": 2786,
                "end": 2791,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 2829,
                "end": 2836,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>a Model or null</p>\n"
            }
          ]
        },
        {
          "name": "patch",
          "args": [
            {
              "name": "options",
              "type": "PatchOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<literal type | , Answer>",
          "typeParameters": [],
          "line": 241,
          "description": "<p>Update one Answer</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 6194,
                "end": 6201,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "PatchOptions",
              "optional": true,
              "tagName": {
                "pos": 6188,
                "end": 6193,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 6231,
                "end": 6238,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated Answer</p>\n"
            }
          ]
        },
        {
          "name": "patch$",
          "args": [
            {
              "name": "updateParams",
              "type": "AnswerUpdateParamsDto"
            },
            {
              "name": "updateBody",
              "type": "AnswerUpdateBodyDto"
            },
            {
              "name": "options",
              "type": "PatchOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<Answer>",
          "typeParameters": [],
          "line": 206,
          "description": "<p>Update one Answer</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 5247,
                "end": 5259,
                "flags": 0,
                "escapedText": "updateParams"
              },
              "type": "AnswerUpdateParamsDto",
              "tagName": {
                "pos": 5241,
                "end": 5246,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request param</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 5299,
                "end": 5309,
                "flags": 0,
                "escapedText": "updateBody"
              },
              "type": "AnswerUpdateBodyDto",
              "tagName": {
                "pos": 5293,
                "end": 5298,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request body</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 5348,
                "end": 5355,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "PatchOptions",
              "optional": true,
              "tagName": {
                "pos": 5342,
                "end": 5347,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 5385,
                "end": 5392,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated Answer</p>\n"
            }
          ]
        },
        {
          "name": "remove",
          "args": [
            {
              "name": "options",
              "type": "RemoveOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<AnswerDeleteParamsDto, Answer>",
          "typeParameters": [],
          "line": 349,
          "description": "<p>Delete one Answer</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 8933,
                "end": 8940,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "RemoveOptions",
              "optional": true,
              "tagName": {
                "pos": 8927,
                "end": 8932,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 8970,
                "end": 8977,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated Answer</p>\n"
            }
          ]
        },
        {
          "name": "remove$",
          "args": [
            {
              "name": "deleteParams",
              "type": "AnswerDeleteParamsDto"
            },
            {
              "name": "options",
              "type": "RemoveOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<Answer>",
          "typeParameters": [],
          "line": 323,
          "description": "<p>Delete one Answer</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 8263,
                "end": 8275,
                "flags": 0,
                "escapedText": "deleteParams"
              },
              "type": "AnswerDeleteParamsDto",
              "tagName": {
                "pos": 8257,
                "end": 8262,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request param</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 8315,
                "end": 8322,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "RemoveOptions",
              "optional": true,
              "tagName": {
                "pos": 8309,
                "end": 8314,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 8352,
                "end": 8359,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated Answer</p>\n"
            }
          ]
        },
        {
          "name": "upsert",
          "args": [
            {
              "name": "options",
              "type": "UpsertOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<literal type | , Answer>",
          "typeParameters": [],
          "line": 302,
          "description": "<p>Update one Answer</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 7737,
                "end": 7744,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "UpsertOptions",
              "optional": true,
              "tagName": {
                "pos": 7731,
                "end": 7736,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 7774,
                "end": 7781,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated Answer</p>\n"
            }
          ]
        },
        {
          "name": "upsert$",
          "args": [
            {
              "name": "updateParams",
              "type": "AnswerUpsertParamsDto"
            },
            {
              "name": "updateBody",
              "type": "AnswerUpsertBodyDto"
            },
            {
              "name": "options",
              "type": "UpsertOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<Answer>",
          "typeParameters": [],
          "line": 272,
          "description": "<p>Update one Answer</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 6861,
                "end": 6873,
                "flags": 0,
                "escapedText": "updateParams"
              },
              "type": "AnswerUpsertParamsDto",
              "tagName": {
                "pos": 6855,
                "end": 6860,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request param</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 6913,
                "end": 6923,
                "flags": 0,
                "escapedText": "updateBody"
              },
              "type": "AnswerUpsertBodyDto",
              "tagName": {
                "pos": 6907,
                "end": 6912,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request body</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 6962,
                "end": 6969,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "UpsertOptions",
              "optional": true,
              "tagName": {
                "pos": 6956,
                "end": 6961,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 6999,
                "end": 7006,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated Answer</p>\n"
            }
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "AnswerUpdateBodyDto",
      "id": "class-AnswerUpdateBodyDto-a16e8809113d12272d0296baaf2fd860",
      "file": "generated/rest-dtos/dtos/answer/answer-update-body.dto.ts",
      "type": "class",
      "sourceCode": "import {  \n  IsOptional,\n  IsString,\n  IsUUID, \n} from 'class-validator';\n\n \nexport class AnswerUpdateBodyDto {\n  @IsString() \n  @IsUUID(\"all\", ) \n  @IsOptional()\n  user?: string;\n\n  @IsString() \n  @IsUUID(\"all\", ) \n  @IsOptional()\n  question?: string;\n\n  @IsString({ each: true}) \n  @IsUUID(\"all\", { each: true}) \n  @IsOptional()\n  tags?: string[];\n\n}\n",
      "properties": [
        {
          "name": "question",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 18,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": "'all'"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "tags",
          "type": "string[]",
          "optional": true,
          "description": "",
          "line": 23,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": "{each: true}"
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": "'all', {each: true}"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "user",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 13,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": "'all'"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "AnswerUpdateParamsDto",
      "id": "class-AnswerUpdateParamsDto-e9cea86ed8b63cda3fdbcda69366d3b6",
      "file": "generated/rest-dtos/dtos/answer/answer-update-params.dto.ts",
      "type": "class",
      "sourceCode": "import {\n  IsString,\n  IsUUID,\n} from 'class-validator';\n\nexport class AnswerUpdateParamsDto {\n  @IsString()\n  @IsUUID()\n  id!: string;\n}\n",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "AnswerUpsertBodyDto",
      "id": "class-AnswerUpsertBodyDto-5ac1976f984322ebaf91decd852170e0",
      "file": "generated/rest-dtos/dtos/answer/answer-upsert-body.dto.ts",
      "type": "class",
      "sourceCode": "import {  \n  IsOptional,\n  IsString,\n  IsUUID, \n} from 'class-validator';\n\n \nexport class AnswerUpsertBodyDto {\n  @IsString() \n  @IsUUID(\"all\", ) \n  user!: string;\n\n  @IsString() \n  @IsUUID(\"all\", ) \n  question!: string;\n\n  @IsString({ each: true}) \n  @IsUUID(\"all\", { each: true}) \n  @IsOptional()\n  tags?: string[];\n\n}\n",
      "properties": [
        {
          "name": "question",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 16,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": "'all'"
            }
          ]
        },
        {
          "name": "tags",
          "type": "string[]",
          "optional": true,
          "description": "",
          "line": 21,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": "{each: true}"
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": "'all', {each: true}"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "user",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 12,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": "'all'"
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "AnswerUpsertParamsDto",
      "id": "class-AnswerUpsertParamsDto-e59c9db0b300f31b872e0671edaaa64f",
      "file": "generated/rest-dtos/dtos/answer/answer-upsert-params.dto.ts",
      "type": "class",
      "sourceCode": "import {\n  IsString,\n  IsUUID,\n} from 'class-validator';\n\nexport class AnswerUpsertParamsDto {\n  @IsString()\n  @IsUUID()\n  id!: string;\n}\n",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "AppPage",
      "id": "class-AppPage-ee2067dfb1c303f41003aea7d82d51e0",
      "file": "e2e/src/app.po.ts",
      "type": "class",
      "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  async navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl);\n  }\n\n  async getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText();\n  }\n}\n",
      "properties": [],
      "methods": [
        {
          "name": "getTitleText",
          "args": [],
          "optional": false,
          "returnType": "Promise<string>",
          "typeParameters": [],
          "line": 8,
          "modifierKind": [120]
        },
        {
          "name": "navigateTo",
          "args": [],
          "optional": false,
          "returnType": "Promise<unknown>",
          "typeParameters": [],
          "line": 4,
          "modifierKind": [120]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "Message",
      "id": "class-Message-77f8056f2ab5806fddd1df6ff3393ffe",
      "file": "generated/models/models/message.ts",
      "type": "class",
      "sourceCode": "import {  \n  IsNumber,\n  IsDate,\n  IsOptional,\n  IsString,\n  IsUUID,\n  ValidateNested,\n} from 'class-validator';\n\nimport { Tag } from './tag';\nimport { Question } from './question';\n\nimport { Message as PrismaMessage } from '@prisma/client';\n\nexport class Message implements PrismaMessage {\n  @IsString() \n  @IsUUID(\"all\", ) \n  id!: string;\n\n  @IsString() \n  text!: string;\n\n  @IsNumber({}, )\n  @IsDate({}, )\n  @IsOptional()\n  hour: Date | null = null;\n\n  @ValidateNested({ each: true}) \n  tags?: Tag[];\n\n  @ValidateNested({ each: true}) \n  questions?: Question[];\n\n}\n",
      "properties": [
        {
          "name": "hour",
          "defaultValue": "null",
          "type": "Date | null",
          "optional": false,
          "description": "",
          "line": 27,
          "decorators": [
            {
              "name": "IsNumber",
              "stringifiedArguments": "{}"
            },
            {
              "name": "IsDate",
              "stringifiedArguments": "{}"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 19,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": "'all'"
            }
          ]
        },
        {
          "name": "questions",
          "type": "Question[]",
          "optional": true,
          "description": "",
          "line": 33,
          "decorators": [
            {
              "name": "ValidateNested",
              "stringifiedArguments": "{each: true}"
            }
          ]
        },
        {
          "name": "tags",
          "type": "Tag[]",
          "optional": true,
          "description": "",
          "line": 30,
          "decorators": [
            {
              "name": "ValidateNested",
              "stringifiedArguments": "{each: true}"
            }
          ]
        },
        {
          "name": "text",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 22,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "implements": ["PrismaMessage"]
    },
    {
      "name": "MessageCountQueryDto",
      "id": "class-MessageCountQueryDto-c00d7b69436256d56da21b6e4cd2999f",
      "file": "generated/rest-dtos/dtos/message/message-count-query.dto.ts",
      "type": "class",
      "sourceCode": "import {\n\n  IsOptional,\n  IsString,\n} from 'class-validator';\n\n \nexport class MessageCountQueryDto {\n  @IsString() \n  @IsOptional()\n  id?: string;\n\n  @IsString() \n  @IsOptional()\n  text?: string;\n\n}\n",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 12,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "text",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 16,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "MessageCreateBodyDto",
      "id": "class-MessageCreateBodyDto-9828357f06a72d31b6b0c745c3be9770",
      "file": "generated/rest-dtos/dtos/message/message-create-body.dto.ts",
      "type": "class",
      "sourceCode": "import {  \n  IsDate,\n  IsOptional,\n  IsString,\n  IsUUID,\n} from 'class-validator';\n\n \nexport class MessageCreateBodyDto {\n  @IsString() \n  text!: string;\n\n  @IsDate({}, )\n  @IsOptional()\n  hour?: Date;\n\n  @IsString({ each: true}) \n  @IsUUID(\"all\", { each: true}) \n  tags!: string[];\n\n  @IsString({ each: true}) \n  @IsUUID(\"all\", { each: true}) \n  questions!: string[];\n\n}\n",
      "properties": [
        {
          "name": "hour",
          "type": "Date",
          "optional": true,
          "description": "",
          "line": 16,
          "decorators": [
            {
              "name": "IsDate",
              "stringifiedArguments": "{}"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "questions",
          "type": "string[]",
          "optional": false,
          "description": "",
          "line": 24,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": "{each: true}"
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": "'all', {each: true}"
            }
          ]
        },
        {
          "name": "tags",
          "type": "string[]",
          "optional": false,
          "description": "",
          "line": 20,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": "{each: true}"
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": "'all', {each: true}"
            }
          ]
        },
        {
          "name": "text",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 12,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "MessageDeleteParamsDto",
      "id": "class-MessageDeleteParamsDto-ad6c1d41b4cb6b88fc2a02c9b40c35de",
      "file": "generated/rest-dtos/dtos/message/message-delete-params.dto.ts",
      "type": "class",
      "sourceCode": "import {\n  IsString,\n  IsUUID,\n} from 'class-validator';\n\nexport class MessageDeleteParamsDto {\n  @IsString()\n  @IsUUID()\n  id!: string;\n}\n",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "MessageFindManyQueryDto",
      "id": "class-MessageFindManyQueryDto-e9519ddd6197db315b4d278f21077432",
      "file": "generated/rest-dtos/dtos/message/message-find-many-query.dto.ts",
      "type": "class",
      "sourceCode": "import {\n  IsIn,\n  IsInt,\n  IsNumber,\n  IsOptional,\n  IsString,\n\n  Min,\n} from 'class-validator';\n\nimport {\n  MessageInclude,\n  SortOrder,\n  Message,\n} from '@generated/models';\n\nexport class MessageFindManyQueryDto {\n  @IsString() \n  @IsOptional()\n  id?: string;\n\n  @IsString() \n  @IsOptional()\n  text?: string;\n\n  @IsString({ each: true })\n  @IsIn(MessageInclude, { each: true })\n  @IsOptional()\n  populate?: MessageInclude[];\n\n  @IsOptional()\n  @IsString()\n  @IsIn([\n    'id',\n    'text',\n  ]) \n  sort: keyof Message = 'id';\n\n  @IsOptional()\n  @IsIn(Object.values(SortOrder)) \n  order: SortOrder = 'asc';\n\n  @IsOptional()\n  @IsNumber()\n  @IsInt()\n  @Min(1)\n  take = 100;\n\n  @IsOptional()\n  @IsNumber()\n  @IsInt()\n  @Min(0)\n  skip = 0;\n}\n",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 20,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "order",
          "defaultValue": "'asc'",
          "type": "SortOrder",
          "optional": false,
          "description": "",
          "line": 41,
          "decorators": [
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            },
            {
              "name": "IsIn",
              "stringifiedArguments": "undefined"
            }
          ]
        },
        {
          "name": "populate",
          "type": "MessageInclude[]",
          "optional": true,
          "description": "",
          "line": 29,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": "{each: true}"
            },
            {
              "name": "IsIn",
              "stringifiedArguments": "MessageInclude, {each: true}"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "skip",
          "defaultValue": "0",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 53,
          "decorators": [
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            },
            {
              "name": "IsNumber",
              "stringifiedArguments": ""
            },
            {
              "name": "IsInt",
              "stringifiedArguments": ""
            },
            {
              "name": "Min",
              "stringifiedArguments": "0"
            }
          ]
        },
        {
          "name": "sort",
          "defaultValue": "'id'",
          "type": "",
          "optional": false,
          "description": "",
          "line": 37,
          "decorators": [
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            },
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsIn",
              "stringifiedArguments": "undefined"
            }
          ]
        },
        {
          "name": "take",
          "defaultValue": "100",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 47,
          "decorators": [
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            },
            {
              "name": "IsNumber",
              "stringifiedArguments": ""
            },
            {
              "name": "IsInt",
              "stringifiedArguments": ""
            },
            {
              "name": "Min",
              "stringifiedArguments": "1"
            }
          ]
        },
        {
          "name": "text",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 24,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "MessageFindUniqueParamsDto",
      "id": "class-MessageFindUniqueParamsDto-6dbac639bbeed083f742ce4c205b500c",
      "file": "generated/rest-dtos/dtos/message/message-find-unique-params.dto.ts",
      "type": "class",
      "sourceCode": "import {\n  IsString,\n  IsUUID,\n} from 'class-validator';\n\nexport class MessageFindUniqueParamsDto {\n  @IsString()\n  @IsUUID()\n  id!: string;\n}\n",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "MessageFindUniqueQueryDto",
      "id": "class-MessageFindUniqueQueryDto-755d4f8855ec21b6536d87602a605597",
      "file": "generated/rest-dtos/dtos/message/message-find-unique-query.dto.ts",
      "type": "class",
      "sourceCode": "import {\n  IsIn,\n  IsOptional,\n  IsString,\n} from 'class-validator';\n\nimport { MessageInclude } from '@generated/models';\nexport class MessageFindUniqueQueryDto {\n  @IsString({ each: true })\n  @IsIn(MessageInclude,\n    { each: true }\n  )\n  @IsOptional()\n  populate?: MessageInclude[];\n}\n",
      "properties": [
        {
          "name": "populate",
          "type": "MessageInclude[]",
          "optional": true,
          "description": "",
          "line": 15,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": "{each: true}"
            },
            {
              "name": "IsIn",
              "stringifiedArguments": "MessageInclude, {each: true}"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "MessageService",
      "id": "class-MessageService-839863a1260e4ec107f5d9763e6c082a",
      "file": "generated/rext-client/services/message.service.ts",
      "type": "class",
      "sourceCode": "import { Observable, OperatorFunction, zip } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\nimport {\n  count,\n  CountAjaxOptions,\n  create,\n  CreateAjaxOptions,\n  extractAjaxResponseData,\n  findMany,\n  FindManyOptions,\n  findUnique,\n  FindUniqueOptions,\n  fromDto,\n  isAlike,\n  patch,\n  PatchOptions,\n  remove,\n  RemoveOptions,\n  transformAndValidateMap,\n  upsert,\n  UpsertOptions,\n} from '../helpers';\n\nimport { Message } from '@generated/models';\nimport {\n  MessageCountQueryDto,\n  MessageCreateBodyDto,\n  MessageDeleteParamsDto,\n  MessageFindManyQueryDto,\n  MessageFindUniqueParamsDto,\n  MessageFindUniqueQueryDto,\n  MessageUpdateBodyDto,\n  MessageUpdateParamsDto,\n  MessageUpsertBodyDto,\n  MessageUpsertParamsDto,\n} from '@generated/rest-dtos';\n\nexport class MessageService {\n  public apiUrl: URL;\n\n  constructor(apiUrl: string | URL) {\n    this.apiUrl = new URL('message', apiUrl.toString());\n  }\n\n  /**\n   * Create a new Message\n   *\n   * @param createBody - Dto of the request body\n   * @param options - Ajax request options\n   * @returns a new Message\n   */\n  public create$(\n    createBody: MessageCreateBodyDto,\n    options?: CreateAjaxOptions,\n  ): Observable<Message> {\n    return fromDto(createBody, MessageCreateBodyDto).pipe(\n      switchMap((body) =>\n        create(this.apiUrl, body, options).pipe(\n          extractAjaxResponseData(),\n          transformAndValidateMap(Message),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Create a new Message\n   *\n   * @param options - Ajax request options\n   * @returns a new Message\n   */\n  public create(\n    options?: CreateAjaxOptions,\n  ): OperatorFunction<MessageCreateBodyDto, Message> {\n    return switchMap((createBody) => this.create$(createBody, options));\n  }\n\n  /**\n   * Count the number of Message entities that matches the filter\n   *\n   * @param countQuery - Dto of the request query\n   * @param options - Ajax request options\n   * @returns the number of Message\n   */\n  public count$(\n    countQuery?: MessageCountQueryDto,\n    options?: CountAjaxOptions,\n  ): Observable<number> {\n    return fromDto(countQuery, MessageCountQueryDto).pipe(\n      switchMap((query) =>\n        count(this.apiUrl, { ...query }, options).pipe(\n          extractAjaxResponseData(),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Count the number of Message entities that matches the filter\n   *\n   * @param options - Ajax request options\n   * @returns the number of Message\n   */\n  public count(\n    options?: CountAjaxOptions,\n  ): OperatorFunction<MessageCountQueryDto | undefined, number> {\n    return switchMap((countQuery) => this.count$(countQuery, options));\n  }\n\n  /**\n   * Find zero or one Model that matches the filter\n   *\n   model\n   * @param findUniqueParams - Dto of the request param\n   * @param findUniqueQuery - Dto of the request query\n   * @param options - Ajax request options\n   * @returns a Model or null\n   */\n  public findUnique$(\n    findUniqueParams: MessageFindUniqueParamsDto,\n    findUniqueQuery?: MessageFindUniqueQueryDto,\n    options?: FindUniqueOptions,\n  ): Observable<Message> {\n    return zip(\n      fromDto(findUniqueParams, MessageFindUniqueParamsDto),\n      fromDto(findUniqueQuery, MessageFindUniqueQueryDto),\n    ).pipe(\n      switchMap(([params, query]) =>\n        findUnique(this.apiUrl, params, { ...query }, options).pipe(\n          extractAjaxResponseData(),\n          transformAndValidateMap(Message),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Count the number of Message entities that matches the filter\n   *\n   * @param options - Ajax request options\n   * @returns the number of Message\n   */\n  public findUnique(\n    options?: FindUniqueOptions,\n  ): OperatorFunction<\n    | { params: MessageFindUniqueParamsDto; query?: MessageFindUniqueQueryDto }\n    | [MessageFindUniqueParamsDto, MessageFindUniqueQueryDto]\n    | MessageFindUniqueParamsDto,\n    Message\n  > {\n    return switchMap((source) => {\n      if (Array.isArray(source))\n        return this.findUnique$(source[0], source[1], options);\n      if (isAlike(source, MessageFindUniqueParamsDto))\n        return this.findUnique$(source, undefined, options);\n      return this.findUnique$(source.params, source.query, options);\n    });\n  }\n\n  /**\n   * Find zero or more Model entities that matches the filter\n   *\n   * @param findManyQuery - Dto of the request query\n   * @param options - Ajax request options\n   * @returns an array of Model entities\n   */\n  public findMany$(\n    findManyQuery?: MessageFindManyQueryDto,\n    options?: FindManyOptions,\n  ): Observable<Message[]> {\n    return fromDto(findManyQuery, MessageFindManyQueryDto).pipe(\n      switchMap((params) =>\n        findMany(this.apiUrl, { ...params }, options).pipe(\n          extractAjaxResponseData(),\n          transformAndValidateMap(Message),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Find zero or more Model entities that matches the filter\n   *\n   * @param options - Ajax request options\n   * @returns an array of Model entities\n   */\n  public findMany(\n    options?: FindManyOptions,\n  ): OperatorFunction<MessageFindManyQueryDto | undefined, Message[]> {\n    return switchMap((findManyQuery) => this.findMany$(findManyQuery, options));\n  }\n\n  /**\n   * Update one Message\n   *\n   * @Remarks\n   *\n   * Partial updates are allowed with this method\n   *\n   * @param updateParams - Dto of the request param\n   * @param updateBody - Dto of the request body\n   * @param options - Ajax request options\n   * @returns the updated Message\n   */\n  public patch$(\n    updateParams: MessageUpdateParamsDto,\n    updateBody: MessageUpdateBodyDto,\n    options?: PatchOptions,\n  ): Observable<Message> {\n    return zip(\n      fromDto(updateParams, MessageUpdateParamsDto),\n      fromDto(updateBody, MessageUpdateBodyDto),\n    ).pipe(\n      switchMap(([params, body]) =>\n        patch(this.apiUrl, params, body, options).pipe(\n          extractAjaxResponseData(),\n          transformAndValidateMap(Message),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * patch$ alias\n   */\n  public update$ = this.patch$.bind(this);\n\n  /**\n   * Update one Message\n   *\n   * @Remarks\n   *\n   * Partial updates are allowed with this method\n   *\n   * @param updateParams - Dto of the request param\n   * @param updateBody - Dto of the request body\n   * @param options - Ajax request options\n   * @returns the updated Message\n   */\n  public patch(\n    options?: PatchOptions,\n  ): OperatorFunction<\n    | { params: MessageUpdateParamsDto; body: MessageUpdateBodyDto }\n    | [MessageUpdateParamsDto, MessageUpdateBodyDto],\n    Message\n  > {\n    return switchMap((source) => {\n      if (Array.isArray(source))\n        return this.patch$(source[0], source[1], options);\n      return this.patch$(source.params, source.body, options);\n    });\n  }\n\n  /**\n   * patch alias\n   */\n  public update = this.patch.bind(this);\n\n  /**\n   * Update one Message\n   *\n   * @Remarks\n   *\n   * Partial updates are allowed with this method\n   *\n   * @param updateParams - Dto of the request param\n   * @param updateBody - Dto of the request body\n   * @param options - Ajax request options\n   * @returns the updated Message\n   */\n  public upsert$(\n    updateParams: MessageUpsertParamsDto,\n    updateBody: MessageUpsertBodyDto,\n    options?: UpsertOptions,\n  ): Observable<Message> {\n    return zip(\n      fromDto(updateParams, MessageUpsertParamsDto),\n      fromDto(updateBody, MessageUpsertBodyDto),\n    ).pipe(\n      switchMap(([params, body]) =>\n        upsert(this.apiUrl, params, body, options).pipe(\n          extractAjaxResponseData(),\n          transformAndValidateMap(Message),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Update one Message\n   *\n   * @Remarks\n   *\n   * Partial updates are allowed with this method\n   *\n   * @param updateParams - Dto of the request param\n   * @param updateBody - Dto of the request body\n   * @param options - Ajax request options\n   * @returns the updated Message\n   */\n  public upsert(\n    options?: UpsertOptions,\n  ): OperatorFunction<\n    | { params: MessageUpsertParamsDto; body: MessageUpsertBodyDto }\n    | [MessageUpsertParamsDto, MessageUpsertBodyDto],\n    Message\n  > {\n    return switchMap((source) => {\n      if (Array.isArray(source))\n        return this.upsert$(source[0], source[1], options);\n      return this.upsert$(source.params, source.body, options);\n    });\n  }\n\n  /**\n   * Delete one Message\n   *\n   * @param deleteParams - Dto of the request param\n   * @param options - Ajax request options\n   * @returns the updated Message\n   */\n  public remove$(\n    deleteParams: MessageDeleteParamsDto,\n    options?: RemoveOptions,\n  ): Observable<Message> {\n    return fromDto(deleteParams, MessageDeleteParamsDto).pipe(\n      switchMap((params) =>\n        remove(this.apiUrl, { ...params }, options).pipe(\n          extractAjaxResponseData(),\n          transformAndValidateMap(Message),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * remove$ alias\n   */\n  public delete$ = this.remove$.bind(this);\n\n  /**\n   * Delete one Message\n   *\n   * @param deleteParams - Dto of the request param\n   * @param options - Ajax request options\n   * @returns the updated Message\n   */\n  public remove(\n    options?: RemoveOptions,\n  ): OperatorFunction<MessageDeleteParamsDto, Message> {\n    return switchMap((removeParams) => this.remove$(removeParams, options));\n  }\n\n  /**\n   * remove alias\n   */\n  public delete = this.remove.bind(this);\n}\n\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "apiUrl",
            "type": "string | URL"
          }
        ],
        "line": 40,
        "jsdoctags": [
          {
            "name": "apiUrl",
            "type": "string | URL",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "apiUrl",
          "type": "URL",
          "optional": false,
          "description": "",
          "line": 40,
          "modifierKind": [114]
        },
        {
          "name": "delete",
          "defaultValue": "this.remove.bind(this)",
          "type": "",
          "optional": false,
          "description": "<p>remove alias</p>\n",
          "line": 358,
          "modifierKind": [114]
        },
        {
          "name": "delete$",
          "defaultValue": "this.remove$.bind(this)",
          "type": "",
          "optional": false,
          "description": "<p>remove$ alias</p>\n",
          "line": 340,
          "modifierKind": [114]
        },
        {
          "name": "update",
          "defaultValue": "this.patch.bind(this)",
          "type": "",
          "optional": false,
          "description": "<p>patch alias</p>\n",
          "line": 258,
          "modifierKind": [114]
        },
        {
          "name": "update$",
          "defaultValue": "this.patch$.bind(this)",
          "type": "",
          "optional": false,
          "description": "<p>patch$ alias</p>\n",
          "line": 227,
          "modifierKind": [114]
        }
      ],
      "methods": [
        {
          "name": "count",
          "args": [
            {
              "name": "options",
              "type": "CountAjaxOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<MessageCountQueryDto | undefined, number>",
          "typeParameters": [],
          "line": 105,
          "description": "<p>Count the number of Message entities that matches the filter</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 2363,
                "end": 2370,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "CountAjaxOptions",
              "optional": true,
              "tagName": {
                "pos": 2357,
                "end": 2362,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 2400,
                "end": 2407,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the number of Message</p>\n"
            }
          ]
        },
        {
          "name": "count$",
          "args": [
            {
              "name": "countQuery",
              "type": "MessageCountQueryDto",
              "optional": true
            },
            {
              "name": "options",
              "type": "CountAjaxOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<number>",
          "typeParameters": [],
          "line": 86,
          "description": "<p>Count the number of Message entities that matches the filter</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 1826,
                "end": 1836,
                "flags": 0,
                "escapedText": "countQuery"
              },
              "type": "MessageCountQueryDto",
              "optional": true,
              "tagName": {
                "pos": 1820,
                "end": 1825,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request query</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 1876,
                "end": 1883,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "CountAjaxOptions",
              "optional": true,
              "tagName": {
                "pos": 1870,
                "end": 1875,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 1913,
                "end": 1920,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the number of Message</p>\n"
            }
          ]
        },
        {
          "name": "create",
          "args": [
            {
              "name": "options",
              "type": "CreateAjaxOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<MessageCreateBodyDto, Message>",
          "typeParameters": [],
          "line": 73,
          "description": "<p>Create a new Message</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 1489,
                "end": 1496,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "CreateAjaxOptions",
              "optional": true,
              "tagName": {
                "pos": 1483,
                "end": 1488,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 1526,
                "end": 1533,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>a new Message</p>\n"
            }
          ]
        },
        {
          "name": "create$",
          "args": [
            {
              "name": "createBody",
              "type": "MessageCreateBodyDto"
            },
            {
              "name": "options",
              "type": "CreateAjaxOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<Message>",
          "typeParameters": [],
          "line": 53,
          "description": "<p>Create a new Message</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 963,
                "end": 973,
                "flags": 0,
                "escapedText": "createBody"
              },
              "type": "MessageCreateBodyDto",
              "tagName": {
                "pos": 957,
                "end": 962,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request body</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 1012,
                "end": 1019,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "CreateAjaxOptions",
              "optional": true,
              "tagName": {
                "pos": 1006,
                "end": 1011,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 1049,
                "end": 1056,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>a new Message</p>\n"
            }
          ]
        },
        {
          "name": "findMany",
          "args": [
            {
              "name": "options",
              "type": "FindManyOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<MessageFindManyQueryDto | undefined, Message[]>",
          "typeParameters": [],
          "line": 188,
          "description": "<p>Find zero or more Model entities that matches the filter</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 4892,
                "end": 4899,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "FindManyOptions",
              "optional": true,
              "tagName": {
                "pos": 4886,
                "end": 4891,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 4929,
                "end": 4936,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>an array of Model entities</p>\n"
            }
          ]
        },
        {
          "name": "findMany$",
          "args": [
            {
              "name": "findManyQuery",
              "type": "MessageFindManyQueryDto",
              "optional": true
            },
            {
              "name": "options",
              "type": "FindManyOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<Message[]>",
          "typeParameters": [],
          "line": 168,
          "description": "<p>Find zero or more Model entities that matches the filter</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 4285,
                "end": 4298,
                "flags": 0,
                "escapedText": "findManyQuery"
              },
              "type": "MessageFindManyQueryDto",
              "optional": true,
              "tagName": {
                "pos": 4279,
                "end": 4284,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request query</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 4338,
                "end": 4345,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "FindManyOptions",
              "optional": true,
              "tagName": {
                "pos": 4332,
                "end": 4337,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 4375,
                "end": 4382,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>an array of Model entities</p>\n"
            }
          ]
        },
        {
          "name": "findUnique",
          "args": [
            {
              "name": "options",
              "type": "FindUniqueOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<literal type |  | MessageFindUniqueParamsDto, Message>",
          "typeParameters": [],
          "line": 144,
          "description": "<p>Count the number of Message entities that matches the filter</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 3526,
                "end": 3533,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "FindUniqueOptions",
              "optional": true,
              "tagName": {
                "pos": 3520,
                "end": 3525,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 3563,
                "end": 3570,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the number of Message</p>\n"
            }
          ]
        },
        {
          "name": "findUnique$",
          "args": [
            {
              "name": "findUniqueParams",
              "type": "MessageFindUniqueParamsDto"
            },
            {
              "name": "findUniqueQuery",
              "type": "MessageFindUniqueQueryDto",
              "optional": true
            },
            {
              "name": "options",
              "type": "FindUniqueOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<Message>",
          "typeParameters": [],
          "line": 120,
          "description": "<p>Find zero or one Model that matches the filter</p>\n<p>model</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 2711,
                "end": 2727,
                "flags": 0,
                "escapedText": "findUniqueParams"
              },
              "type": "MessageFindUniqueParamsDto",
              "tagName": {
                "pos": 2705,
                "end": 2710,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request param</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 2767,
                "end": 2782,
                "flags": 0,
                "escapedText": "findUniqueQuery"
              },
              "type": "MessageFindUniqueQueryDto",
              "optional": true,
              "tagName": {
                "pos": 2761,
                "end": 2766,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request query</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 2822,
                "end": 2829,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "FindUniqueOptions",
              "optional": true,
              "tagName": {
                "pos": 2816,
                "end": 2821,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 2859,
                "end": 2866,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>a Model or null</p>\n"
            }
          ]
        },
        {
          "name": "patch",
          "args": [
            {
              "name": "options",
              "type": "PatchOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<literal type | , Message>",
          "typeParameters": [],
          "line": 241,
          "description": "<p>Update one Message</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 6254,
                "end": 6261,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "PatchOptions",
              "optional": true,
              "tagName": {
                "pos": 6248,
                "end": 6253,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 6291,
                "end": 6298,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated Message</p>\n"
            }
          ]
        },
        {
          "name": "patch$",
          "args": [
            {
              "name": "updateParams",
              "type": "MessageUpdateParamsDto"
            },
            {
              "name": "updateBody",
              "type": "MessageUpdateBodyDto"
            },
            {
              "name": "options",
              "type": "PatchOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<Message>",
          "typeParameters": [],
          "line": 206,
          "description": "<p>Update one Message</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 5299,
                "end": 5311,
                "flags": 0,
                "escapedText": "updateParams"
              },
              "type": "MessageUpdateParamsDto",
              "tagName": {
                "pos": 5293,
                "end": 5298,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request param</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 5351,
                "end": 5361,
                "flags": 0,
                "escapedText": "updateBody"
              },
              "type": "MessageUpdateBodyDto",
              "tagName": {
                "pos": 5345,
                "end": 5350,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request body</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 5400,
                "end": 5407,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "PatchOptions",
              "optional": true,
              "tagName": {
                "pos": 5394,
                "end": 5399,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 5437,
                "end": 5444,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated Message</p>\n"
            }
          ]
        },
        {
          "name": "remove",
          "args": [
            {
              "name": "options",
              "type": "RemoveOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<MessageDeleteParamsDto, Message>",
          "typeParameters": [],
          "line": 349,
          "description": "<p>Delete one Message</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 9021,
                "end": 9028,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "RemoveOptions",
              "optional": true,
              "tagName": {
                "pos": 9015,
                "end": 9020,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 9058,
                "end": 9065,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated Message</p>\n"
            }
          ]
        },
        {
          "name": "remove$",
          "args": [
            {
              "name": "deleteParams",
              "type": "MessageDeleteParamsDto"
            },
            {
              "name": "options",
              "type": "RemoveOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<Message>",
          "typeParameters": [],
          "line": 323,
          "description": "<p>Delete one Message</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 8345,
                "end": 8357,
                "flags": 0,
                "escapedText": "deleteParams"
              },
              "type": "MessageDeleteParamsDto",
              "tagName": {
                "pos": 8339,
                "end": 8344,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request param</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 8397,
                "end": 8404,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "RemoveOptions",
              "optional": true,
              "tagName": {
                "pos": 8391,
                "end": 8396,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 8434,
                "end": 8441,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated Message</p>\n"
            }
          ]
        },
        {
          "name": "upsert",
          "args": [
            {
              "name": "options",
              "type": "UpsertOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<literal type | , Message>",
          "typeParameters": [],
          "line": 302,
          "description": "<p>Update one Message</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 7812,
                "end": 7819,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "UpsertOptions",
              "optional": true,
              "tagName": {
                "pos": 7806,
                "end": 7811,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 7849,
                "end": 7856,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated Message</p>\n"
            }
          ]
        },
        {
          "name": "upsert$",
          "args": [
            {
              "name": "updateParams",
              "type": "MessageUpsertParamsDto"
            },
            {
              "name": "updateBody",
              "type": "MessageUpsertBodyDto"
            },
            {
              "name": "options",
              "type": "UpsertOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<Message>",
          "typeParameters": [],
          "line": 272,
          "description": "<p>Update one Message</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 6928,
                "end": 6940,
                "flags": 0,
                "escapedText": "updateParams"
              },
              "type": "MessageUpsertParamsDto",
              "tagName": {
                "pos": 6922,
                "end": 6927,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request param</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 6980,
                "end": 6990,
                "flags": 0,
                "escapedText": "updateBody"
              },
              "type": "MessageUpsertBodyDto",
              "tagName": {
                "pos": 6974,
                "end": 6979,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request body</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 7029,
                "end": 7036,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "UpsertOptions",
              "optional": true,
              "tagName": {
                "pos": 7023,
                "end": 7028,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 7066,
                "end": 7073,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated Message</p>\n"
            }
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "MessageUpdateBodyDto",
      "id": "class-MessageUpdateBodyDto-48e2c1973cb3bbdc709f04127c404b79",
      "file": "generated/rest-dtos/dtos/message/message-update-body.dto.ts",
      "type": "class",
      "sourceCode": "import {  \n  IsNumber,\n  IsDate,\n  IsOptional,\n  IsString,\n  IsUUID, \n} from 'class-validator';\n\n \nexport class MessageUpdateBodyDto {\n  @IsString() \n  @IsOptional()\n  text?: string;\n\n  @IsNumber({}, )\n  @IsDate({}, )\n  @IsOptional()\n  hour?: Date;\n\n  @IsString({ each: true}) \n  @IsUUID(\"all\", { each: true}) \n  @IsOptional()\n  tags?: string[];\n\n  @IsString({ each: true}) \n  @IsUUID(\"all\", { each: true}) \n  @IsOptional()\n  questions?: string[];\n\n}\n",
      "properties": [
        {
          "name": "hour",
          "type": "Date",
          "optional": true,
          "description": "",
          "line": 19,
          "decorators": [
            {
              "name": "IsNumber",
              "stringifiedArguments": "{}"
            },
            {
              "name": "IsDate",
              "stringifiedArguments": "{}"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "questions",
          "type": "string[]",
          "optional": true,
          "description": "",
          "line": 29,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": "{each: true}"
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": "'all', {each: true}"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "tags",
          "type": "string[]",
          "optional": true,
          "description": "",
          "line": 24,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": "{each: true}"
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": "'all', {each: true}"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "text",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 14,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "MessageUpdateParamsDto",
      "id": "class-MessageUpdateParamsDto-6f4f75a359156dc08899fd559d9810ff",
      "file": "generated/rest-dtos/dtos/message/message-update-params.dto.ts",
      "type": "class",
      "sourceCode": "import {\n  IsString,\n  IsUUID,\n} from 'class-validator';\n\nexport class MessageUpdateParamsDto {\n  @IsString()\n  @IsUUID()\n  id!: string;\n}\n",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "MessageUpsertBodyDto",
      "id": "class-MessageUpsertBodyDto-e9caa9a3bdd5b9bf9d6a1e434f8cd172",
      "file": "generated/rest-dtos/dtos/message/message-upsert-body.dto.ts",
      "type": "class",
      "sourceCode": "import {  \n  IsNumber,\n  IsDate,\n  IsOptional,\n  IsString,\n  IsUUID, \n} from 'class-validator';\n\n \nexport class MessageUpsertBodyDto {\n  @IsString() \n  text!: string;\n\n  @IsNumber({}, )\n  @IsDate({}, )\n  @IsOptional()\n  hour?: Date;\n\n  @IsString({ each: true}) \n  @IsUUID(\"all\", { each: true}) \n  tags!: string[];\n\n  @IsString({ each: true}) \n  @IsUUID(\"all\", { each: true}) \n  questions!: string[];\n\n}\n",
      "properties": [
        {
          "name": "hour",
          "type": "Date",
          "optional": true,
          "description": "",
          "line": 18,
          "decorators": [
            {
              "name": "IsNumber",
              "stringifiedArguments": "{}"
            },
            {
              "name": "IsDate",
              "stringifiedArguments": "{}"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "questions",
          "type": "string[]",
          "optional": false,
          "description": "",
          "line": 26,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": "{each: true}"
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": "'all', {each: true}"
            }
          ]
        },
        {
          "name": "tags",
          "type": "string[]",
          "optional": false,
          "description": "",
          "line": 22,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": "{each: true}"
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": "'all', {each: true}"
            }
          ]
        },
        {
          "name": "text",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 13,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "MessageUpsertParamsDto",
      "id": "class-MessageUpsertParamsDto-f237a2977a2927021b624be154edf41b",
      "file": "generated/rest-dtos/dtos/message/message-upsert-params.dto.ts",
      "type": "class",
      "sourceCode": "import {\n  IsString,\n  IsUUID,\n} from 'class-validator';\n\nexport class MessageUpsertParamsDto {\n  @IsString()\n  @IsUUID()\n  id!: string;\n}\n",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "OpenQuestion",
      "id": "class-OpenQuestion-1fea049f97924486feb56948731bfaba",
      "file": "generated/models/models/open-question.ts",
      "type": "class",
      "sourceCode": "import {  \n  IsString,\n  IsUUID,\n  ValidateNested,\n} from 'class-validator';\n\nimport { Question } from './question';\nimport { Variable } from './variable';\n\nimport { OpenQuestion as PrismaOpenQuestion } from '@prisma/client';\n\nexport class OpenQuestion implements PrismaOpenQuestion {\n  @IsString() \n  @IsUUID(\"all\", ) \n  id!: string;\n\n  @IsString() \n  text!: string;\n\n  @IsString() \n  key!: string;\n\n  @ValidateNested() \n  question?: Question;\n\n  @IsString() \n  @IsUUID(\"all\") \n  questionId!: string;\n\n  @ValidateNested({ each: true}) \n  variableAsOpenQuestion?: Variable[];\n\n}\n",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 16,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": "'all'"
            }
          ]
        },
        {
          "name": "key",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 22,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "question",
          "type": "Question",
          "optional": true,
          "description": "",
          "line": 25,
          "decorators": [
            {
              "name": "ValidateNested",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "questionId",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 29,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": "'all'"
            }
          ]
        },
        {
          "name": "text",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 19,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "variableAsOpenQuestion",
          "type": "Variable[]",
          "optional": true,
          "description": "",
          "line": 32,
          "decorators": [
            {
              "name": "ValidateNested",
              "stringifiedArguments": "{each: true}"
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "implements": ["PrismaOpenQuestion"]
    },
    {
      "name": "OpenQuestionCountQueryDto",
      "id": "class-OpenQuestionCountQueryDto-96c7614c67eaac5ea092956fdf9feba5",
      "file": "generated/rest-dtos/dtos/open-question/open-question-count-query.dto.ts",
      "type": "class",
      "sourceCode": "import {\n\n  IsOptional,\n  IsString,\n} from 'class-validator';\n\n \nexport class OpenQuestionCountQueryDto {\n  @IsString() \n  @IsOptional()\n  id?: string;\n\n  @IsString() \n  @IsOptional()\n  text?: string;\n\n  @IsString() \n  @IsOptional()\n  key?: string;\n\n}\n",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 12,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "key",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 20,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "text",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 16,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "OpenQuestionCreateBodyDto",
      "id": "class-OpenQuestionCreateBodyDto-4a7d4b63196484ad40868a7b745cbe61",
      "file": "generated/rest-dtos/dtos/open-question/open-question-create-body.dto.ts",
      "type": "class",
      "sourceCode": "import {  \n  IsString,\n  IsUUID,\n} from 'class-validator';\n\n \nexport class OpenQuestionCreateBodyDto {\n  @IsString() \n  text!: string;\n\n  @IsString() \n  key!: string;\n\n  @IsString() \n  @IsUUID(\"all\", ) \n  question!: string;\n\n}\n",
      "properties": [
        {
          "name": "key",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 13,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "question",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 17,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": "'all'"
            }
          ]
        },
        {
          "name": "text",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "OpenQuestionDeleteParamsDto",
      "id": "class-OpenQuestionDeleteParamsDto-f04570e8f9d39aa83ec7a8c33d02ec57",
      "file": "generated/rest-dtos/dtos/open-question/open-question-delete-params.dto.ts",
      "type": "class",
      "sourceCode": "import {\n  IsString,\n  IsUUID,\n} from 'class-validator';\n\nexport class OpenQuestionDeleteParamsDto {\n  @IsString()\n  @IsUUID()\n  id!: string;\n}\n",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "OpenQuestionFindManyQueryDto",
      "id": "class-OpenQuestionFindManyQueryDto-03aee4bafce3c697b0a857bdd6b1ebd6",
      "file": "generated/rest-dtos/dtos/open-question/open-question-find-many-query.dto.ts",
      "type": "class",
      "sourceCode": "import {\n  IsIn,\n  IsInt,\n  IsNumber,\n  IsOptional,\n  IsString,\n\n  Min,\n} from 'class-validator';\n\nimport {\n  OpenQuestionInclude,\n  SortOrder,\n  OpenQuestion,\n} from '@generated/models';\n\nexport class OpenQuestionFindManyQueryDto {\n  @IsString() \n  @IsOptional()\n  id?: string;\n\n  @IsString() \n  @IsOptional()\n  text?: string;\n\n  @IsString() \n  @IsOptional()\n  key?: string;\n\n  @IsString({ each: true })\n  @IsIn(OpenQuestionInclude, { each: true })\n  @IsOptional()\n  populate?: OpenQuestionInclude[];\n\n  @IsOptional()\n  @IsString()\n  @IsIn([\n    'id',\n    'text',\n    'key',\n  ]) \n  sort: keyof OpenQuestion = 'id';\n\n  @IsOptional()\n  @IsIn(Object.values(SortOrder)) \n  order: SortOrder = 'asc';\n\n  @IsOptional()\n  @IsNumber()\n  @IsInt()\n  @Min(1)\n  take = 100;\n\n  @IsOptional()\n  @IsNumber()\n  @IsInt()\n  @Min(0)\n  skip = 0;\n}\n",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 20,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "key",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 28,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "order",
          "defaultValue": "'asc'",
          "type": "SortOrder",
          "optional": false,
          "description": "",
          "line": 46,
          "decorators": [
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            },
            {
              "name": "IsIn",
              "stringifiedArguments": "undefined"
            }
          ]
        },
        {
          "name": "populate",
          "type": "OpenQuestionInclude[]",
          "optional": true,
          "description": "",
          "line": 33,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": "{each: true}"
            },
            {
              "name": "IsIn",
              "stringifiedArguments": "OpenQuestionInclude, {each: true}"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "skip",
          "defaultValue": "0",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 58,
          "decorators": [
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            },
            {
              "name": "IsNumber",
              "stringifiedArguments": ""
            },
            {
              "name": "IsInt",
              "stringifiedArguments": ""
            },
            {
              "name": "Min",
              "stringifiedArguments": "0"
            }
          ]
        },
        {
          "name": "sort",
          "defaultValue": "'id'",
          "type": "",
          "optional": false,
          "description": "",
          "line": 42,
          "decorators": [
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            },
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsIn",
              "stringifiedArguments": "undefined"
            }
          ]
        },
        {
          "name": "take",
          "defaultValue": "100",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 52,
          "decorators": [
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            },
            {
              "name": "IsNumber",
              "stringifiedArguments": ""
            },
            {
              "name": "IsInt",
              "stringifiedArguments": ""
            },
            {
              "name": "Min",
              "stringifiedArguments": "1"
            }
          ]
        },
        {
          "name": "text",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 24,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "OpenQuestionFindUniqueParamsDto",
      "id": "class-OpenQuestionFindUniqueParamsDto-1ad36fa5dbcf28a2a89bc311c1c962b8",
      "file": "generated/rest-dtos/dtos/open-question/open-question-find-unique-params.dto.ts",
      "type": "class",
      "sourceCode": "import {\n  IsString,\n  IsUUID,\n} from 'class-validator';\n\nexport class OpenQuestionFindUniqueParamsDto {\n  @IsString()\n  @IsUUID()\n  id!: string;\n}\n",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "OpenQuestionFindUniqueQueryDto",
      "id": "class-OpenQuestionFindUniqueQueryDto-6be28ab5b7a9771b0482a5b3a84deae2",
      "file": "generated/rest-dtos/dtos/open-question/open-question-find-unique-query.dto.ts",
      "type": "class",
      "sourceCode": "import {\n  IsIn,\n  IsOptional,\n  IsString,\n} from 'class-validator';\n\nimport { OpenQuestionInclude } from '@generated/models';\nexport class OpenQuestionFindUniqueQueryDto {\n  @IsString({ each: true })\n  @IsIn(OpenQuestionInclude,\n    { each: true }\n  )\n  @IsOptional()\n  populate?: OpenQuestionInclude[];\n}\n",
      "properties": [
        {
          "name": "populate",
          "type": "OpenQuestionInclude[]",
          "optional": true,
          "description": "",
          "line": 15,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": "{each: true}"
            },
            {
              "name": "IsIn",
              "stringifiedArguments": "OpenQuestionInclude, {each: true}"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "OpenQuestionService",
      "id": "class-OpenQuestionService-b3991e5f260cc1d57829c431df705dde",
      "file": "generated/rext-client/services/open-question.service.ts",
      "type": "class",
      "sourceCode": "import { Observable, OperatorFunction, zip } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\nimport {\n  count,\n  CountAjaxOptions,\n  create,\n  CreateAjaxOptions,\n  extractAjaxResponseData,\n  findMany,\n  FindManyOptions,\n  findUnique,\n  FindUniqueOptions,\n  fromDto,\n  isAlike,\n  patch,\n  PatchOptions,\n  remove,\n  RemoveOptions,\n  transformAndValidateMap,\n  upsert,\n  UpsertOptions,\n} from '../helpers';\n\nimport { OpenQuestion } from '@generated/models';\nimport {\n  OpenQuestionCountQueryDto,\n  OpenQuestionCreateBodyDto,\n  OpenQuestionDeleteParamsDto,\n  OpenQuestionFindManyQueryDto,\n  OpenQuestionFindUniqueParamsDto,\n  OpenQuestionFindUniqueQueryDto,\n  OpenQuestionUpdateBodyDto,\n  OpenQuestionUpdateParamsDto,\n  OpenQuestionUpsertBodyDto,\n  OpenQuestionUpsertParamsDto,\n} from '@generated/rest-dtos';\n\nexport class OpenQuestionService {\n  public apiUrl: URL;\n\n  constructor(apiUrl: string | URL) {\n    this.apiUrl = new URL('open-question', apiUrl.toString());\n  }\n\n  /**\n   * Create a new OpenQuestion\n   *\n   * @param createBody - Dto of the request body\n   * @param options - Ajax request options\n   * @returns a new OpenQuestion\n   */\n  public create$(\n    createBody: OpenQuestionCreateBodyDto,\n    options?: CreateAjaxOptions,\n  ): Observable<OpenQuestion> {\n    return fromDto(createBody, OpenQuestionCreateBodyDto).pipe(\n      switchMap((body) =>\n        create(this.apiUrl, body, options).pipe(\n          extractAjaxResponseData(),\n          transformAndValidateMap(OpenQuestion),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Create a new OpenQuestion\n   *\n   * @param options - Ajax request options\n   * @returns a new OpenQuestion\n   */\n  public create(\n    options?: CreateAjaxOptions,\n  ): OperatorFunction<OpenQuestionCreateBodyDto, OpenQuestion> {\n    return switchMap((createBody) => this.create$(createBody, options));\n  }\n\n  /**\n   * Count the number of OpenQuestion entities that matches the filter\n   *\n   * @param countQuery - Dto of the request query\n   * @param options - Ajax request options\n   * @returns the number of OpenQuestion\n   */\n  public count$(\n    countQuery?: OpenQuestionCountQueryDto,\n    options?: CountAjaxOptions,\n  ): Observable<number> {\n    return fromDto(countQuery, OpenQuestionCountQueryDto).pipe(\n      switchMap((query) =>\n        count(this.apiUrl, { ...query }, options).pipe(\n          extractAjaxResponseData(),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Count the number of OpenQuestion entities that matches the filter\n   *\n   * @param options - Ajax request options\n   * @returns the number of OpenQuestion\n   */\n  public count(\n    options?: CountAjaxOptions,\n  ): OperatorFunction<OpenQuestionCountQueryDto | undefined, number> {\n    return switchMap((countQuery) => this.count$(countQuery, options));\n  }\n\n  /**\n   * Find zero or one Model that matches the filter\n   *\n   model\n   * @param findUniqueParams - Dto of the request param\n   * @param findUniqueQuery - Dto of the request query\n   * @param options - Ajax request options\n   * @returns a Model or null\n   */\n  public findUnique$(\n    findUniqueParams: OpenQuestionFindUniqueParamsDto,\n    findUniqueQuery?: OpenQuestionFindUniqueQueryDto,\n    options?: FindUniqueOptions,\n  ): Observable<OpenQuestion> {\n    return zip(\n      fromDto(findUniqueParams, OpenQuestionFindUniqueParamsDto),\n      fromDto(findUniqueQuery, OpenQuestionFindUniqueQueryDto),\n    ).pipe(\n      switchMap(([params, query]) =>\n        findUnique(this.apiUrl, params, { ...query }, options).pipe(\n          extractAjaxResponseData(),\n          transformAndValidateMap(OpenQuestion),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Count the number of OpenQuestion entities that matches the filter\n   *\n   * @param options - Ajax request options\n   * @returns the number of OpenQuestion\n   */\n  public findUnique(\n    options?: FindUniqueOptions,\n  ): OperatorFunction<\n    | { params: OpenQuestionFindUniqueParamsDto; query?: OpenQuestionFindUniqueQueryDto }\n    | [OpenQuestionFindUniqueParamsDto, OpenQuestionFindUniqueQueryDto]\n    | OpenQuestionFindUniqueParamsDto,\n    OpenQuestion\n  > {\n    return switchMap((source) => {\n      if (Array.isArray(source))\n        return this.findUnique$(source[0], source[1], options);\n      if (isAlike(source, OpenQuestionFindUniqueParamsDto))\n        return this.findUnique$(source, undefined, options);\n      return this.findUnique$(source.params, source.query, options);\n    });\n  }\n\n  /**\n   * Find zero or more Model entities that matches the filter\n   *\n   * @param findManyQuery - Dto of the request query\n   * @param options - Ajax request options\n   * @returns an array of Model entities\n   */\n  public findMany$(\n    findManyQuery?: OpenQuestionFindManyQueryDto,\n    options?: FindManyOptions,\n  ): Observable<OpenQuestion[]> {\n    return fromDto(findManyQuery, OpenQuestionFindManyQueryDto).pipe(\n      switchMap((params) =>\n        findMany(this.apiUrl, { ...params }, options).pipe(\n          extractAjaxResponseData(),\n          transformAndValidateMap(OpenQuestion),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Find zero or more Model entities that matches the filter\n   *\n   * @param options - Ajax request options\n   * @returns an array of Model entities\n   */\n  public findMany(\n    options?: FindManyOptions,\n  ): OperatorFunction<OpenQuestionFindManyQueryDto | undefined, OpenQuestion[]> {\n    return switchMap((findManyQuery) => this.findMany$(findManyQuery, options));\n  }\n\n  /**\n   * Update one OpenQuestion\n   *\n   * @Remarks\n   *\n   * Partial updates are allowed with this method\n   *\n   * @param updateParams - Dto of the request param\n   * @param updateBody - Dto of the request body\n   * @param options - Ajax request options\n   * @returns the updated OpenQuestion\n   */\n  public patch$(\n    updateParams: OpenQuestionUpdateParamsDto,\n    updateBody: OpenQuestionUpdateBodyDto,\n    options?: PatchOptions,\n  ): Observable<OpenQuestion> {\n    return zip(\n      fromDto(updateParams, OpenQuestionUpdateParamsDto),\n      fromDto(updateBody, OpenQuestionUpdateBodyDto),\n    ).pipe(\n      switchMap(([params, body]) =>\n        patch(this.apiUrl, params, body, options).pipe(\n          extractAjaxResponseData(),\n          transformAndValidateMap(OpenQuestion),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * patch$ alias\n   */\n  public update$ = this.patch$.bind(this);\n\n  /**\n   * Update one OpenQuestion\n   *\n   * @Remarks\n   *\n   * Partial updates are allowed with this method\n   *\n   * @param updateParams - Dto of the request param\n   * @param updateBody - Dto of the request body\n   * @param options - Ajax request options\n   * @returns the updated OpenQuestion\n   */\n  public patch(\n    options?: PatchOptions,\n  ): OperatorFunction<\n    | { params: OpenQuestionUpdateParamsDto; body: OpenQuestionUpdateBodyDto }\n    | [OpenQuestionUpdateParamsDto, OpenQuestionUpdateBodyDto],\n    OpenQuestion\n  > {\n    return switchMap((source) => {\n      if (Array.isArray(source))\n        return this.patch$(source[0], source[1], options);\n      return this.patch$(source.params, source.body, options);\n    });\n  }\n\n  /**\n   * patch alias\n   */\n  public update = this.patch.bind(this);\n\n  /**\n   * Update one OpenQuestion\n   *\n   * @Remarks\n   *\n   * Partial updates are allowed with this method\n   *\n   * @param updateParams - Dto of the request param\n   * @param updateBody - Dto of the request body\n   * @param options - Ajax request options\n   * @returns the updated OpenQuestion\n   */\n  public upsert$(\n    updateParams: OpenQuestionUpsertParamsDto,\n    updateBody: OpenQuestionUpsertBodyDto,\n    options?: UpsertOptions,\n  ): Observable<OpenQuestion> {\n    return zip(\n      fromDto(updateParams, OpenQuestionUpsertParamsDto),\n      fromDto(updateBody, OpenQuestionUpsertBodyDto),\n    ).pipe(\n      switchMap(([params, body]) =>\n        upsert(this.apiUrl, params, body, options).pipe(\n          extractAjaxResponseData(),\n          transformAndValidateMap(OpenQuestion),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Update one OpenQuestion\n   *\n   * @Remarks\n   *\n   * Partial updates are allowed with this method\n   *\n   * @param updateParams - Dto of the request param\n   * @param updateBody - Dto of the request body\n   * @param options - Ajax request options\n   * @returns the updated OpenQuestion\n   */\n  public upsert(\n    options?: UpsertOptions,\n  ): OperatorFunction<\n    | { params: OpenQuestionUpsertParamsDto; body: OpenQuestionUpsertBodyDto }\n    | [OpenQuestionUpsertParamsDto, OpenQuestionUpsertBodyDto],\n    OpenQuestion\n  > {\n    return switchMap((source) => {\n      if (Array.isArray(source))\n        return this.upsert$(source[0], source[1], options);\n      return this.upsert$(source.params, source.body, options);\n    });\n  }\n\n  /**\n   * Delete one OpenQuestion\n   *\n   * @param deleteParams - Dto of the request param\n   * @param options - Ajax request options\n   * @returns the updated OpenQuestion\n   */\n  public remove$(\n    deleteParams: OpenQuestionDeleteParamsDto,\n    options?: RemoveOptions,\n  ): Observable<OpenQuestion> {\n    return fromDto(deleteParams, OpenQuestionDeleteParamsDto).pipe(\n      switchMap((params) =>\n        remove(this.apiUrl, { ...params }, options).pipe(\n          extractAjaxResponseData(),\n          transformAndValidateMap(OpenQuestion),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * remove$ alias\n   */\n  public delete$ = this.remove$.bind(this);\n\n  /**\n   * Delete one OpenQuestion\n   *\n   * @param deleteParams - Dto of the request param\n   * @param options - Ajax request options\n   * @returns the updated OpenQuestion\n   */\n  public remove(\n    options?: RemoveOptions,\n  ): OperatorFunction<OpenQuestionDeleteParamsDto, OpenQuestion> {\n    return switchMap((removeParams) => this.remove$(removeParams, options));\n  }\n\n  /**\n   * remove alias\n   */\n  public delete = this.remove.bind(this);\n}\n\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "apiUrl",
            "type": "string | URL"
          }
        ],
        "line": 40,
        "jsdoctags": [
          {
            "name": "apiUrl",
            "type": "string | URL",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "apiUrl",
          "type": "URL",
          "optional": false,
          "description": "",
          "line": 40,
          "modifierKind": [114]
        },
        {
          "name": "delete",
          "defaultValue": "this.remove.bind(this)",
          "type": "",
          "optional": false,
          "description": "<p>remove alias</p>\n",
          "line": 358,
          "modifierKind": [114]
        },
        {
          "name": "delete$",
          "defaultValue": "this.remove$.bind(this)",
          "type": "",
          "optional": false,
          "description": "<p>remove$ alias</p>\n",
          "line": 340,
          "modifierKind": [114]
        },
        {
          "name": "update",
          "defaultValue": "this.patch.bind(this)",
          "type": "",
          "optional": false,
          "description": "<p>patch alias</p>\n",
          "line": 258,
          "modifierKind": [114]
        },
        {
          "name": "update$",
          "defaultValue": "this.patch$.bind(this)",
          "type": "",
          "optional": false,
          "description": "<p>patch$ alias</p>\n",
          "line": 227,
          "modifierKind": [114]
        }
      ],
      "methods": [
        {
          "name": "count",
          "args": [
            {
              "name": "options",
              "type": "CountAjaxOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<OpenQuestionCountQueryDto | undefined, number>",
          "typeParameters": [],
          "line": 105,
          "description": "<p>Count the number of OpenQuestion entities that matches the filter</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 2504,
                "end": 2511,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "CountAjaxOptions",
              "optional": true,
              "tagName": {
                "pos": 2498,
                "end": 2503,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 2541,
                "end": 2548,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the number of OpenQuestion</p>\n"
            }
          ]
        },
        {
          "name": "count$",
          "args": [
            {
              "name": "countQuery",
              "type": "OpenQuestionCountQueryDto",
              "optional": true
            },
            {
              "name": "options",
              "type": "CountAjaxOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<number>",
          "typeParameters": [],
          "line": 86,
          "description": "<p>Count the number of OpenQuestion entities that matches the filter</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 1947,
                "end": 1957,
                "flags": 0,
                "escapedText": "countQuery"
              },
              "type": "OpenQuestionCountQueryDto",
              "optional": true,
              "tagName": {
                "pos": 1941,
                "end": 1946,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request query</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 1997,
                "end": 2004,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "CountAjaxOptions",
              "optional": true,
              "tagName": {
                "pos": 1991,
                "end": 1996,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 2034,
                "end": 2041,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the number of OpenQuestion</p>\n"
            }
          ]
        },
        {
          "name": "create",
          "args": [
            {
              "name": "options",
              "type": "CreateAjaxOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<OpenQuestionCreateBodyDto, OpenQuestion>",
          "typeParameters": [],
          "line": 73,
          "description": "<p>Create a new OpenQuestion</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 1590,
                "end": 1597,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "CreateAjaxOptions",
              "optional": true,
              "tagName": {
                "pos": 1584,
                "end": 1589,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 1627,
                "end": 1634,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>a new OpenQuestion</p>\n"
            }
          ]
        },
        {
          "name": "create$",
          "args": [
            {
              "name": "createBody",
              "type": "OpenQuestionCreateBodyDto"
            },
            {
              "name": "options",
              "type": "CreateAjaxOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<OpenQuestion>",
          "typeParameters": [],
          "line": 53,
          "description": "<p>Create a new OpenQuestion</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 1034,
                "end": 1044,
                "flags": 0,
                "escapedText": "createBody"
              },
              "type": "OpenQuestionCreateBodyDto",
              "tagName": {
                "pos": 1028,
                "end": 1033,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request body</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 1083,
                "end": 1090,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "CreateAjaxOptions",
              "optional": true,
              "tagName": {
                "pos": 1077,
                "end": 1082,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 1120,
                "end": 1127,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>a new OpenQuestion</p>\n"
            }
          ]
        },
        {
          "name": "findMany",
          "args": [
            {
              "name": "options",
              "type": "FindManyOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<OpenQuestionFindManyQueryDto | undefined, OpenQuestion[]>",
          "typeParameters": [],
          "line": 188,
          "description": "<p>Find zero or more Model entities that matches the filter</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 5138,
                "end": 5145,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "FindManyOptions",
              "optional": true,
              "tagName": {
                "pos": 5132,
                "end": 5137,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 5175,
                "end": 5182,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>an array of Model entities</p>\n"
            }
          ]
        },
        {
          "name": "findMany$",
          "args": [
            {
              "name": "findManyQuery",
              "type": "OpenQuestionFindManyQueryDto",
              "optional": true
            },
            {
              "name": "options",
              "type": "FindManyOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<OpenQuestion[]>",
          "typeParameters": [],
          "line": 168,
          "description": "<p>Find zero or more Model entities that matches the filter</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 4511,
                "end": 4524,
                "flags": 0,
                "escapedText": "findManyQuery"
              },
              "type": "OpenQuestionFindManyQueryDto",
              "optional": true,
              "tagName": {
                "pos": 4505,
                "end": 4510,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request query</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 4564,
                "end": 4571,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "FindManyOptions",
              "optional": true,
              "tagName": {
                "pos": 4558,
                "end": 4563,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 4601,
                "end": 4608,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>an array of Model entities</p>\n"
            }
          ]
        },
        {
          "name": "findUnique",
          "args": [
            {
              "name": "options",
              "type": "FindUniqueOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<literal type |  | OpenQuestionFindUniqueParamsDto, OpenQuestion>",
          "typeParameters": [],
          "line": 144,
          "description": "<p>Count the number of OpenQuestion entities that matches the filter</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 3712,
                "end": 3719,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "FindUniqueOptions",
              "optional": true,
              "tagName": {
                "pos": 3706,
                "end": 3711,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 3749,
                "end": 3756,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the number of OpenQuestion</p>\n"
            }
          ]
        },
        {
          "name": "findUnique$",
          "args": [
            {
              "name": "findUniqueParams",
              "type": "OpenQuestionFindUniqueParamsDto"
            },
            {
              "name": "findUniqueQuery",
              "type": "OpenQuestionFindUniqueQueryDto",
              "optional": true
            },
            {
              "name": "options",
              "type": "FindUniqueOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<OpenQuestion>",
          "typeParameters": [],
          "line": 120,
          "description": "<p>Find zero or one Model that matches the filter</p>\n<p>model</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 2862,
                "end": 2878,
                "flags": 0,
                "escapedText": "findUniqueParams"
              },
              "type": "OpenQuestionFindUniqueParamsDto",
              "tagName": {
                "pos": 2856,
                "end": 2861,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request param</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 2918,
                "end": 2933,
                "flags": 0,
                "escapedText": "findUniqueQuery"
              },
              "type": "OpenQuestionFindUniqueQueryDto",
              "optional": true,
              "tagName": {
                "pos": 2912,
                "end": 2917,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request query</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 2973,
                "end": 2980,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "FindUniqueOptions",
              "optional": true,
              "tagName": {
                "pos": 2967,
                "end": 2972,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 3010,
                "end": 3017,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>a Model or null</p>\n"
            }
          ]
        },
        {
          "name": "patch",
          "args": [
            {
              "name": "options",
              "type": "PatchOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<literal type | , OpenQuestion>",
          "typeParameters": [],
          "line": 241,
          "description": "<p>Update one OpenQuestion</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 6555,
                "end": 6562,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "PatchOptions",
              "optional": true,
              "tagName": {
                "pos": 6549,
                "end": 6554,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 6592,
                "end": 6599,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated OpenQuestion</p>\n"
            }
          ]
        },
        {
          "name": "patch$",
          "args": [
            {
              "name": "updateParams",
              "type": "OpenQuestionUpdateParamsDto"
            },
            {
              "name": "updateBody",
              "type": "OpenQuestionUpdateBodyDto"
            },
            {
              "name": "options",
              "type": "PatchOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<OpenQuestion>",
          "typeParameters": [],
          "line": 206,
          "description": "<p>Update one OpenQuestion</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 5560,
                "end": 5572,
                "flags": 0,
                "escapedText": "updateParams"
              },
              "type": "OpenQuestionUpdateParamsDto",
              "tagName": {
                "pos": 5554,
                "end": 5559,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request param</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 5612,
                "end": 5622,
                "flags": 0,
                "escapedText": "updateBody"
              },
              "type": "OpenQuestionUpdateBodyDto",
              "tagName": {
                "pos": 5606,
                "end": 5611,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request body</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 5661,
                "end": 5668,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "PatchOptions",
              "optional": true,
              "tagName": {
                "pos": 5655,
                "end": 5660,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 5698,
                "end": 5705,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated OpenQuestion</p>\n"
            }
          ]
        },
        {
          "name": "remove",
          "args": [
            {
              "name": "options",
              "type": "RemoveOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<OpenQuestionDeleteParamsDto, OpenQuestion>",
          "typeParameters": [],
          "line": 349,
          "description": "<p>Delete one OpenQuestion</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 9462,
                "end": 9469,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "RemoveOptions",
              "optional": true,
              "tagName": {
                "pos": 9456,
                "end": 9461,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 9499,
                "end": 9506,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated OpenQuestion</p>\n"
            }
          ]
        },
        {
          "name": "remove$",
          "args": [
            {
              "name": "deleteParams",
              "type": "OpenQuestionDeleteParamsDto"
            },
            {
              "name": "options",
              "type": "RemoveOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<OpenQuestion>",
          "typeParameters": [],
          "line": 323,
          "description": "<p>Delete one OpenQuestion</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 8756,
                "end": 8768,
                "flags": 0,
                "escapedText": "deleteParams"
              },
              "type": "OpenQuestionDeleteParamsDto",
              "tagName": {
                "pos": 8750,
                "end": 8755,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request param</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 8808,
                "end": 8815,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "RemoveOptions",
              "optional": true,
              "tagName": {
                "pos": 8802,
                "end": 8807,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 8845,
                "end": 8852,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated OpenQuestion</p>\n"
            }
          ]
        },
        {
          "name": "upsert",
          "args": [
            {
              "name": "options",
              "type": "UpsertOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<literal type | , OpenQuestion>",
          "typeParameters": [],
          "line": 302,
          "description": "<p>Update one OpenQuestion</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 8188,
                "end": 8195,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "UpsertOptions",
              "optional": true,
              "tagName": {
                "pos": 8182,
                "end": 8187,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 8225,
                "end": 8232,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated OpenQuestion</p>\n"
            }
          ]
        },
        {
          "name": "upsert$",
          "args": [
            {
              "name": "updateParams",
              "type": "OpenQuestionUpsertParamsDto"
            },
            {
              "name": "updateBody",
              "type": "OpenQuestionUpsertBodyDto"
            },
            {
              "name": "options",
              "type": "UpsertOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<OpenQuestion>",
          "typeParameters": [],
          "line": 272,
          "description": "<p>Update one OpenQuestion</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 7264,
                "end": 7276,
                "flags": 0,
                "escapedText": "updateParams"
              },
              "type": "OpenQuestionUpsertParamsDto",
              "tagName": {
                "pos": 7258,
                "end": 7263,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request param</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 7316,
                "end": 7326,
                "flags": 0,
                "escapedText": "updateBody"
              },
              "type": "OpenQuestionUpsertBodyDto",
              "tagName": {
                "pos": 7310,
                "end": 7315,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request body</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 7365,
                "end": 7372,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "UpsertOptions",
              "optional": true,
              "tagName": {
                "pos": 7359,
                "end": 7364,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 7402,
                "end": 7409,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated OpenQuestion</p>\n"
            }
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "OpenQuestionUpdateBodyDto",
      "id": "class-OpenQuestionUpdateBodyDto-78bd8d9ae2181f035db69d02510af583",
      "file": "generated/rest-dtos/dtos/open-question/open-question-update-body.dto.ts",
      "type": "class",
      "sourceCode": "import {  \n  IsOptional,\n  IsString,\n  IsUUID, \n} from 'class-validator';\n\n \nexport class OpenQuestionUpdateBodyDto {\n  @IsString() \n  @IsOptional()\n  text?: string;\n\n  @IsString() \n  @IsOptional()\n  key?: string;\n\n  @IsString() \n  @IsUUID(\"all\", ) \n  @IsOptional()\n  question?: string;\n\n}\n",
      "properties": [
        {
          "name": "key",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 16,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "question",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 21,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": "'all'"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "text",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 12,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "OpenQuestionUpdateParamsDto",
      "id": "class-OpenQuestionUpdateParamsDto-83e1e378edea8c8c67ede5849f2e4f48",
      "file": "generated/rest-dtos/dtos/open-question/open-question-update-params.dto.ts",
      "type": "class",
      "sourceCode": "import {\n  IsString,\n  IsUUID,\n} from 'class-validator';\n\nexport class OpenQuestionUpdateParamsDto {\n  @IsString()\n  @IsUUID()\n  id!: string;\n}\n",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "OpenQuestionUpsertBodyDto",
      "id": "class-OpenQuestionUpsertBodyDto-9d1b23e9be9dc2312f19fee348117f9d",
      "file": "generated/rest-dtos/dtos/open-question/open-question-upsert-body.dto.ts",
      "type": "class",
      "sourceCode": "import {  \n  IsString,\n  IsUUID, \n} from 'class-validator';\n\n \nexport class OpenQuestionUpsertBodyDto {\n  @IsString() \n  text!: string;\n\n  @IsString() \n  key!: string;\n\n  @IsString() \n  @IsUUID(\"all\", ) \n  question!: string;\n\n}\n",
      "properties": [
        {
          "name": "key",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 13,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "question",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 17,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": "'all'"
            }
          ]
        },
        {
          "name": "text",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "OpenQuestionUpsertParamsDto",
      "id": "class-OpenQuestionUpsertParamsDto-c95c826fb675aa62f86ff037e2d25562",
      "file": "generated/rest-dtos/dtos/open-question/open-question-upsert-params.dto.ts",
      "type": "class",
      "sourceCode": "import {\n  IsString,\n  IsUUID,\n} from 'class-validator';\n\nexport class OpenQuestionUpsertParamsDto {\n  @IsString()\n  @IsUUID()\n  id!: string;\n}\n",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "Question",
      "id": "class-Question-83f8c3932b28573651aa0e1a148e1eee",
      "file": "generated/models/models/question.ts",
      "type": "class",
      "sourceCode": "import {  \n  IsOptional,\n  IsString,\n  IsUUID,\n  ValidateNested,\n} from 'class-validator';\n\nimport { Tag } from './tag';\nimport { Answer } from './answer';\nimport { Message } from './message';\nimport { OpenQuestion } from './open-question';\n\nimport { Question as PrismaQuestion } from '@prisma/client';\n\nexport class Question implements PrismaQuestion {\n  @IsString() \n  @IsUUID(\"all\", ) \n  id!: string;\n\n  @IsString() \n  title!: string;\n\n  @IsString() \n  text!: string;\n\n  @ValidateNested() \n  @IsOptional()\n  parentQuestion?: Question;\n\n  @ValidateNested({ each: true}) \n  @IsOptional()\n  tags?: Tag[];\n\n  @IsOptional()\n  @IsString() \n  @IsUUID(\"all\") \n  parentQuestionId: string | null = null;\n\n  @ValidateNested({ each: true}) \n  answerAsQuestion?: Answer[];\n\n  @ValidateNested({ each: true}) \n  messageAsQuestions?: Message[];\n\n  @ValidateNested({ each: true}) \n  openQuestionAsQuestion?: OpenQuestion[];\n\n  @ValidateNested({ each: true}) \n  questionAsParentQuestion?: Question[];\n\n}\n",
      "properties": [
        {
          "name": "answerAsQuestion",
          "type": "Answer[]",
          "optional": true,
          "description": "",
          "line": 41,
          "decorators": [
            {
              "name": "ValidateNested",
              "stringifiedArguments": "{each: true}"
            }
          ]
        },
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 19,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": "'all'"
            }
          ]
        },
        {
          "name": "messageAsQuestions",
          "type": "Message[]",
          "optional": true,
          "description": "",
          "line": 44,
          "decorators": [
            {
              "name": "ValidateNested",
              "stringifiedArguments": "{each: true}"
            }
          ]
        },
        {
          "name": "openQuestionAsQuestion",
          "type": "OpenQuestion[]",
          "optional": true,
          "description": "",
          "line": 47,
          "decorators": [
            {
              "name": "ValidateNested",
              "stringifiedArguments": "{each: true}"
            }
          ]
        },
        {
          "name": "parentQuestion",
          "type": "Question",
          "optional": true,
          "description": "",
          "line": 29,
          "decorators": [
            {
              "name": "ValidateNested",
              "stringifiedArguments": ""
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "parentQuestionId",
          "defaultValue": "null",
          "type": "string | null",
          "optional": false,
          "description": "",
          "line": 38,
          "decorators": [
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            },
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": "'all'"
            }
          ]
        },
        {
          "name": "questionAsParentQuestion",
          "type": "Question[]",
          "optional": true,
          "description": "",
          "line": 50,
          "decorators": [
            {
              "name": "ValidateNested",
              "stringifiedArguments": "{each: true}"
            }
          ]
        },
        {
          "name": "tags",
          "type": "Tag[]",
          "optional": true,
          "description": "",
          "line": 33,
          "decorators": [
            {
              "name": "ValidateNested",
              "stringifiedArguments": "{each: true}"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "text",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 25,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "title",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 22,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "implements": ["PrismaQuestion"]
    },
    {
      "name": "QuestionCountQueryDto",
      "id": "class-QuestionCountQueryDto-09d5a105285818155d7c34a215f890ae",
      "file": "generated/rest-dtos/dtos/question/question-count-query.dto.ts",
      "type": "class",
      "sourceCode": "import {\n\n  IsOptional,\n  IsString,\n} from 'class-validator';\n\n \nexport class QuestionCountQueryDto {\n  @IsString() \n  @IsOptional()\n  id?: string;\n\n  @IsString() \n  @IsOptional()\n  title?: string;\n\n  @IsString() \n  @IsOptional()\n  text?: string;\n\n}\n",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 12,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "text",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 20,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "title",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 16,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "QuestionCreateBodyDto",
      "id": "class-QuestionCreateBodyDto-b5be2287306e62c3859081ff2148a6fb",
      "file": "generated/rest-dtos/dtos/question/question-create-body.dto.ts",
      "type": "class",
      "sourceCode": "import {  \n  IsOptional,\n  IsString,\n  IsUUID,\n} from 'class-validator';\n\n \nexport class QuestionCreateBodyDto {\n  @IsString() \n  title!: string;\n\n  @IsString() \n  text!: string;\n\n  @IsString() \n  @IsUUID(\"all\", ) \n  @IsOptional()\n  parentQuestion?: string;\n\n  @IsString({ each: true}) \n  @IsUUID(\"all\", { each: true}) \n  @IsOptional()\n  tags?: string[];\n\n}\n",
      "properties": [
        {
          "name": "parentQuestion",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 19,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": "'all'"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "tags",
          "type": "string[]",
          "optional": true,
          "description": "",
          "line": 24,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": "{each: true}"
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": "'all', {each: true}"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "text",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 14,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "title",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 11,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "QuestionDeleteParamsDto",
      "id": "class-QuestionDeleteParamsDto-76a77eb62d020475a052e9b0ed4970df",
      "file": "generated/rest-dtos/dtos/question/question-delete-params.dto.ts",
      "type": "class",
      "sourceCode": "import {\n  IsString,\n  IsUUID,\n} from 'class-validator';\n\nexport class QuestionDeleteParamsDto {\n  @IsString()\n  @IsUUID()\n  id!: string;\n}\n",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "QuestionFindManyQueryDto",
      "id": "class-QuestionFindManyQueryDto-680156716f966a2e856c9cfa6781d38d",
      "file": "generated/rest-dtos/dtos/question/question-find-many-query.dto.ts",
      "type": "class",
      "sourceCode": "import {\n  IsIn,\n  IsInt,\n  IsNumber,\n  IsOptional,\n  IsString,\n\n  Min,\n} from 'class-validator';\n\nimport {\n  QuestionInclude,\n  SortOrder,\n  Question,\n} from '@generated/models';\n\nexport class QuestionFindManyQueryDto {\n  @IsString() \n  @IsOptional()\n  id?: string;\n\n  @IsString() \n  @IsOptional()\n  title?: string;\n\n  @IsString() \n  @IsOptional()\n  text?: string;\n\n  @IsString({ each: true })\n  @IsIn(QuestionInclude, { each: true })\n  @IsOptional()\n  populate?: QuestionInclude[];\n\n  @IsOptional()\n  @IsString()\n  @IsIn([\n    'id',\n    'title',\n    'text',\n  ]) \n  sort: keyof Question = 'id';\n\n  @IsOptional()\n  @IsIn(Object.values(SortOrder)) \n  order: SortOrder = 'asc';\n\n  @IsOptional()\n  @IsNumber()\n  @IsInt()\n  @Min(1)\n  take = 100;\n\n  @IsOptional()\n  @IsNumber()\n  @IsInt()\n  @Min(0)\n  skip = 0;\n}\n",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 20,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "order",
          "defaultValue": "'asc'",
          "type": "SortOrder",
          "optional": false,
          "description": "",
          "line": 46,
          "decorators": [
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            },
            {
              "name": "IsIn",
              "stringifiedArguments": "undefined"
            }
          ]
        },
        {
          "name": "populate",
          "type": "QuestionInclude[]",
          "optional": true,
          "description": "",
          "line": 33,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": "{each: true}"
            },
            {
              "name": "IsIn",
              "stringifiedArguments": "QuestionInclude, {each: true}"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "skip",
          "defaultValue": "0",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 58,
          "decorators": [
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            },
            {
              "name": "IsNumber",
              "stringifiedArguments": ""
            },
            {
              "name": "IsInt",
              "stringifiedArguments": ""
            },
            {
              "name": "Min",
              "stringifiedArguments": "0"
            }
          ]
        },
        {
          "name": "sort",
          "defaultValue": "'id'",
          "type": "",
          "optional": false,
          "description": "",
          "line": 42,
          "decorators": [
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            },
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsIn",
              "stringifiedArguments": "undefined"
            }
          ]
        },
        {
          "name": "take",
          "defaultValue": "100",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 52,
          "decorators": [
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            },
            {
              "name": "IsNumber",
              "stringifiedArguments": ""
            },
            {
              "name": "IsInt",
              "stringifiedArguments": ""
            },
            {
              "name": "Min",
              "stringifiedArguments": "1"
            }
          ]
        },
        {
          "name": "text",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 28,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "title",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 24,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "QuestionFindUniqueParamsDto",
      "id": "class-QuestionFindUniqueParamsDto-79ff62989f1bc3843ef6724f05fa42f1",
      "file": "generated/rest-dtos/dtos/question/question-find-unique-params.dto.ts",
      "type": "class",
      "sourceCode": "import {\n  IsString,\n  IsUUID,\n} from 'class-validator';\n\nexport class QuestionFindUniqueParamsDto {\n  @IsString()\n  @IsUUID()\n  id!: string;\n}\n",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "QuestionFindUniqueQueryDto",
      "id": "class-QuestionFindUniqueQueryDto-1e16b22d3b7a23e2505b0b5a6635efe8",
      "file": "generated/rest-dtos/dtos/question/question-find-unique-query.dto.ts",
      "type": "class",
      "sourceCode": "import {\n  IsIn,\n  IsOptional,\n  IsString,\n} from 'class-validator';\n\nimport { QuestionInclude } from '@generated/models';\nexport class QuestionFindUniqueQueryDto {\n  @IsString({ each: true })\n  @IsIn(QuestionInclude,\n    { each: true }\n  )\n  @IsOptional()\n  populate?: QuestionInclude[];\n}\n",
      "properties": [
        {
          "name": "populate",
          "type": "QuestionInclude[]",
          "optional": true,
          "description": "",
          "line": 15,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": "{each: true}"
            },
            {
              "name": "IsIn",
              "stringifiedArguments": "QuestionInclude, {each: true}"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "QuestionService",
      "id": "class-QuestionService-968ceb8154bd9a3636bee32d8a54fd31",
      "file": "generated/rext-client/services/question.service.ts",
      "type": "class",
      "sourceCode": "import { Observable, OperatorFunction, zip } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\nimport {\n  count,\n  CountAjaxOptions,\n  create,\n  CreateAjaxOptions,\n  extractAjaxResponseData,\n  findMany,\n  FindManyOptions,\n  findUnique,\n  FindUniqueOptions,\n  fromDto,\n  isAlike,\n  patch,\n  PatchOptions,\n  remove,\n  RemoveOptions,\n  transformAndValidateMap,\n  upsert,\n  UpsertOptions,\n} from '../helpers';\n\nimport { Question } from '@generated/models';\nimport {\n  QuestionCountQueryDto,\n  QuestionCreateBodyDto,\n  QuestionDeleteParamsDto,\n  QuestionFindManyQueryDto,\n  QuestionFindUniqueParamsDto,\n  QuestionFindUniqueQueryDto,\n  QuestionUpdateBodyDto,\n  QuestionUpdateParamsDto,\n  QuestionUpsertBodyDto,\n  QuestionUpsertParamsDto,\n} from '@generated/rest-dtos';\n\nexport class QuestionService {\n  public apiUrl: URL;\n\n  constructor(apiUrl: string | URL) {\n    this.apiUrl = new URL('question', apiUrl.toString());\n  }\n\n  /**\n   * Create a new Question\n   *\n   * @param createBody - Dto of the request body\n   * @param options - Ajax request options\n   * @returns a new Question\n   */\n  public create$(\n    createBody: QuestionCreateBodyDto,\n    options?: CreateAjaxOptions,\n  ): Observable<Question> {\n    return fromDto(createBody, QuestionCreateBodyDto).pipe(\n      switchMap((body) =>\n        create(this.apiUrl, body, options).pipe(\n          extractAjaxResponseData(),\n          transformAndValidateMap(Question),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Create a new Question\n   *\n   * @param options - Ajax request options\n   * @returns a new Question\n   */\n  public create(\n    options?: CreateAjaxOptions,\n  ): OperatorFunction<QuestionCreateBodyDto, Question> {\n    return switchMap((createBody) => this.create$(createBody, options));\n  }\n\n  /**\n   * Count the number of Question entities that matches the filter\n   *\n   * @param countQuery - Dto of the request query\n   * @param options - Ajax request options\n   * @returns the number of Question\n   */\n  public count$(\n    countQuery?: QuestionCountQueryDto,\n    options?: CountAjaxOptions,\n  ): Observable<number> {\n    return fromDto(countQuery, QuestionCountQueryDto).pipe(\n      switchMap((query) =>\n        count(this.apiUrl, { ...query }, options).pipe(\n          extractAjaxResponseData(),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Count the number of Question entities that matches the filter\n   *\n   * @param options - Ajax request options\n   * @returns the number of Question\n   */\n  public count(\n    options?: CountAjaxOptions,\n  ): OperatorFunction<QuestionCountQueryDto | undefined, number> {\n    return switchMap((countQuery) => this.count$(countQuery, options));\n  }\n\n  /**\n   * Find zero or one Model that matches the filter\n   *\n   model\n   * @param findUniqueParams - Dto of the request param\n   * @param findUniqueQuery - Dto of the request query\n   * @param options - Ajax request options\n   * @returns a Model or null\n   */\n  public findUnique$(\n    findUniqueParams: QuestionFindUniqueParamsDto,\n    findUniqueQuery?: QuestionFindUniqueQueryDto,\n    options?: FindUniqueOptions,\n  ): Observable<Question> {\n    return zip(\n      fromDto(findUniqueParams, QuestionFindUniqueParamsDto),\n      fromDto(findUniqueQuery, QuestionFindUniqueQueryDto),\n    ).pipe(\n      switchMap(([params, query]) =>\n        findUnique(this.apiUrl, params, { ...query }, options).pipe(\n          extractAjaxResponseData(),\n          transformAndValidateMap(Question),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Count the number of Question entities that matches the filter\n   *\n   * @param options - Ajax request options\n   * @returns the number of Question\n   */\n  public findUnique(\n    options?: FindUniqueOptions,\n  ): OperatorFunction<\n    | { params: QuestionFindUniqueParamsDto; query?: QuestionFindUniqueQueryDto }\n    | [QuestionFindUniqueParamsDto, QuestionFindUniqueQueryDto]\n    | QuestionFindUniqueParamsDto,\n    Question\n  > {\n    return switchMap((source) => {\n      if (Array.isArray(source))\n        return this.findUnique$(source[0], source[1], options);\n      if (isAlike(source, QuestionFindUniqueParamsDto))\n        return this.findUnique$(source, undefined, options);\n      return this.findUnique$(source.params, source.query, options);\n    });\n  }\n\n  /**\n   * Find zero or more Model entities that matches the filter\n   *\n   * @param findManyQuery - Dto of the request query\n   * @param options - Ajax request options\n   * @returns an array of Model entities\n   */\n  public findMany$(\n    findManyQuery?: QuestionFindManyQueryDto,\n    options?: FindManyOptions,\n  ): Observable<Question[]> {\n    return fromDto(findManyQuery, QuestionFindManyQueryDto).pipe(\n      switchMap((params) =>\n        findMany(this.apiUrl, { ...params }, options).pipe(\n          extractAjaxResponseData(),\n          transformAndValidateMap(Question),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Find zero or more Model entities that matches the filter\n   *\n   * @param options - Ajax request options\n   * @returns an array of Model entities\n   */\n  public findMany(\n    options?: FindManyOptions,\n  ): OperatorFunction<QuestionFindManyQueryDto | undefined, Question[]> {\n    return switchMap((findManyQuery) => this.findMany$(findManyQuery, options));\n  }\n\n  /**\n   * Update one Question\n   *\n   * @Remarks\n   *\n   * Partial updates are allowed with this method\n   *\n   * @param updateParams - Dto of the request param\n   * @param updateBody - Dto of the request body\n   * @param options - Ajax request options\n   * @returns the updated Question\n   */\n  public patch$(\n    updateParams: QuestionUpdateParamsDto,\n    updateBody: QuestionUpdateBodyDto,\n    options?: PatchOptions,\n  ): Observable<Question> {\n    return zip(\n      fromDto(updateParams, QuestionUpdateParamsDto),\n      fromDto(updateBody, QuestionUpdateBodyDto),\n    ).pipe(\n      switchMap(([params, body]) =>\n        patch(this.apiUrl, params, body, options).pipe(\n          extractAjaxResponseData(),\n          transformAndValidateMap(Question),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * patch$ alias\n   */\n  public update$ = this.patch$.bind(this);\n\n  /**\n   * Update one Question\n   *\n   * @Remarks\n   *\n   * Partial updates are allowed with this method\n   *\n   * @param updateParams - Dto of the request param\n   * @param updateBody - Dto of the request body\n   * @param options - Ajax request options\n   * @returns the updated Question\n   */\n  public patch(\n    options?: PatchOptions,\n  ): OperatorFunction<\n    | { params: QuestionUpdateParamsDto; body: QuestionUpdateBodyDto }\n    | [QuestionUpdateParamsDto, QuestionUpdateBodyDto],\n    Question\n  > {\n    return switchMap((source) => {\n      if (Array.isArray(source))\n        return this.patch$(source[0], source[1], options);\n      return this.patch$(source.params, source.body, options);\n    });\n  }\n\n  /**\n   * patch alias\n   */\n  public update = this.patch.bind(this);\n\n  /**\n   * Update one Question\n   *\n   * @Remarks\n   *\n   * Partial updates are allowed with this method\n   *\n   * @param updateParams - Dto of the request param\n   * @param updateBody - Dto of the request body\n   * @param options - Ajax request options\n   * @returns the updated Question\n   */\n  public upsert$(\n    updateParams: QuestionUpsertParamsDto,\n    updateBody: QuestionUpsertBodyDto,\n    options?: UpsertOptions,\n  ): Observable<Question> {\n    return zip(\n      fromDto(updateParams, QuestionUpsertParamsDto),\n      fromDto(updateBody, QuestionUpsertBodyDto),\n    ).pipe(\n      switchMap(([params, body]) =>\n        upsert(this.apiUrl, params, body, options).pipe(\n          extractAjaxResponseData(),\n          transformAndValidateMap(Question),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Update one Question\n   *\n   * @Remarks\n   *\n   * Partial updates are allowed with this method\n   *\n   * @param updateParams - Dto of the request param\n   * @param updateBody - Dto of the request body\n   * @param options - Ajax request options\n   * @returns the updated Question\n   */\n  public upsert(\n    options?: UpsertOptions,\n  ): OperatorFunction<\n    | { params: QuestionUpsertParamsDto; body: QuestionUpsertBodyDto }\n    | [QuestionUpsertParamsDto, QuestionUpsertBodyDto],\n    Question\n  > {\n    return switchMap((source) => {\n      if (Array.isArray(source))\n        return this.upsert$(source[0], source[1], options);\n      return this.upsert$(source.params, source.body, options);\n    });\n  }\n\n  /**\n   * Delete one Question\n   *\n   * @param deleteParams - Dto of the request param\n   * @param options - Ajax request options\n   * @returns the updated Question\n   */\n  public remove$(\n    deleteParams: QuestionDeleteParamsDto,\n    options?: RemoveOptions,\n  ): Observable<Question> {\n    return fromDto(deleteParams, QuestionDeleteParamsDto).pipe(\n      switchMap((params) =>\n        remove(this.apiUrl, { ...params }, options).pipe(\n          extractAjaxResponseData(),\n          transformAndValidateMap(Question),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * remove$ alias\n   */\n  public delete$ = this.remove$.bind(this);\n\n  /**\n   * Delete one Question\n   *\n   * @param deleteParams - Dto of the request param\n   * @param options - Ajax request options\n   * @returns the updated Question\n   */\n  public remove(\n    options?: RemoveOptions,\n  ): OperatorFunction<QuestionDeleteParamsDto, Question> {\n    return switchMap((removeParams) => this.remove$(removeParams, options));\n  }\n\n  /**\n   * remove alias\n   */\n  public delete = this.remove.bind(this);\n}\n\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "apiUrl",
            "type": "string | URL"
          }
        ],
        "line": 40,
        "jsdoctags": [
          {
            "name": "apiUrl",
            "type": "string | URL",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "apiUrl",
          "type": "URL",
          "optional": false,
          "description": "",
          "line": 40,
          "modifierKind": [114]
        },
        {
          "name": "delete",
          "defaultValue": "this.remove.bind(this)",
          "type": "",
          "optional": false,
          "description": "<p>remove alias</p>\n",
          "line": 358,
          "modifierKind": [114]
        },
        {
          "name": "delete$",
          "defaultValue": "this.remove$.bind(this)",
          "type": "",
          "optional": false,
          "description": "<p>remove$ alias</p>\n",
          "line": 340,
          "modifierKind": [114]
        },
        {
          "name": "update",
          "defaultValue": "this.patch.bind(this)",
          "type": "",
          "optional": false,
          "description": "<p>patch alias</p>\n",
          "line": 258,
          "modifierKind": [114]
        },
        {
          "name": "update$",
          "defaultValue": "this.patch$.bind(this)",
          "type": "",
          "optional": false,
          "description": "<p>patch$ alias</p>\n",
          "line": 227,
          "modifierKind": [114]
        }
      ],
      "methods": [
        {
          "name": "count",
          "args": [
            {
              "name": "options",
              "type": "CountAjaxOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<QuestionCountQueryDto | undefined, number>",
          "typeParameters": [],
          "line": 105,
          "description": "<p>Count the number of Question entities that matches the filter</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 2391,
                "end": 2398,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "CountAjaxOptions",
              "optional": true,
              "tagName": {
                "pos": 2385,
                "end": 2390,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 2428,
                "end": 2435,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the number of Question</p>\n"
            }
          ]
        },
        {
          "name": "count$",
          "args": [
            {
              "name": "countQuery",
              "type": "QuestionCountQueryDto",
              "optional": true
            },
            {
              "name": "options",
              "type": "CountAjaxOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<number>",
          "typeParameters": [],
          "line": 86,
          "description": "<p>Count the number of Question entities that matches the filter</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 1850,
                "end": 1860,
                "flags": 0,
                "escapedText": "countQuery"
              },
              "type": "QuestionCountQueryDto",
              "optional": true,
              "tagName": {
                "pos": 1844,
                "end": 1849,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request query</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 1900,
                "end": 1907,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "CountAjaxOptions",
              "optional": true,
              "tagName": {
                "pos": 1894,
                "end": 1899,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 1937,
                "end": 1944,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the number of Question</p>\n"
            }
          ]
        },
        {
          "name": "create",
          "args": [
            {
              "name": "options",
              "type": "CreateAjaxOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<QuestionCreateBodyDto, Question>",
          "typeParameters": [],
          "line": 73,
          "description": "<p>Create a new Question</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 1509,
                "end": 1516,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "CreateAjaxOptions",
              "optional": true,
              "tagName": {
                "pos": 1503,
                "end": 1508,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 1546,
                "end": 1553,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>a new Question</p>\n"
            }
          ]
        },
        {
          "name": "create$",
          "args": [
            {
              "name": "createBody",
              "type": "QuestionCreateBodyDto"
            },
            {
              "name": "options",
              "type": "CreateAjaxOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<Question>",
          "typeParameters": [],
          "line": 53,
          "description": "<p>Create a new Question</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 977,
                "end": 987,
                "flags": 0,
                "escapedText": "createBody"
              },
              "type": "QuestionCreateBodyDto",
              "tagName": {
                "pos": 971,
                "end": 976,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request body</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 1026,
                "end": 1033,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "CreateAjaxOptions",
              "optional": true,
              "tagName": {
                "pos": 1020,
                "end": 1025,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 1063,
                "end": 1070,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>a new Question</p>\n"
            }
          ]
        },
        {
          "name": "findMany",
          "args": [
            {
              "name": "options",
              "type": "FindManyOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<QuestionFindManyQueryDto | undefined, Question[]>",
          "typeParameters": [],
          "line": 188,
          "description": "<p>Find zero or more Model entities that matches the filter</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 4941,
                "end": 4948,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "FindManyOptions",
              "optional": true,
              "tagName": {
                "pos": 4935,
                "end": 4940,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 4978,
                "end": 4985,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>an array of Model entities</p>\n"
            }
          ]
        },
        {
          "name": "findMany$",
          "args": [
            {
              "name": "findManyQuery",
              "type": "QuestionFindManyQueryDto",
              "optional": true
            },
            {
              "name": "options",
              "type": "FindManyOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<Question[]>",
          "typeParameters": [],
          "line": 168,
          "description": "<p>Find zero or more Model entities that matches the filter</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 4330,
                "end": 4343,
                "flags": 0,
                "escapedText": "findManyQuery"
              },
              "type": "QuestionFindManyQueryDto",
              "optional": true,
              "tagName": {
                "pos": 4324,
                "end": 4329,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request query</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 4383,
                "end": 4390,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "FindManyOptions",
              "optional": true,
              "tagName": {
                "pos": 4377,
                "end": 4382,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 4420,
                "end": 4427,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>an array of Model entities</p>\n"
            }
          ]
        },
        {
          "name": "findUnique",
          "args": [
            {
              "name": "options",
              "type": "FindUniqueOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<literal type |  | QuestionFindUniqueParamsDto, Question>",
          "typeParameters": [],
          "line": 144,
          "description": "<p>Count the number of Question entities that matches the filter</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 3563,
                "end": 3570,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "FindUniqueOptions",
              "optional": true,
              "tagName": {
                "pos": 3557,
                "end": 3562,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 3600,
                "end": 3607,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the number of Question</p>\n"
            }
          ]
        },
        {
          "name": "findUnique$",
          "args": [
            {
              "name": "findUniqueParams",
              "type": "QuestionFindUniqueParamsDto"
            },
            {
              "name": "findUniqueQuery",
              "type": "QuestionFindUniqueQueryDto",
              "optional": true
            },
            {
              "name": "options",
              "type": "FindUniqueOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<Question>",
          "typeParameters": [],
          "line": 120,
          "description": "<p>Find zero or one Model that matches the filter</p>\n<p>model</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 2741,
                "end": 2757,
                "flags": 0,
                "escapedText": "findUniqueParams"
              },
              "type": "QuestionFindUniqueParamsDto",
              "tagName": {
                "pos": 2735,
                "end": 2740,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request param</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 2797,
                "end": 2812,
                "flags": 0,
                "escapedText": "findUniqueQuery"
              },
              "type": "QuestionFindUniqueQueryDto",
              "optional": true,
              "tagName": {
                "pos": 2791,
                "end": 2796,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request query</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 2852,
                "end": 2859,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "FindUniqueOptions",
              "optional": true,
              "tagName": {
                "pos": 2846,
                "end": 2851,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 2889,
                "end": 2896,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>a Model or null</p>\n"
            }
          ]
        },
        {
          "name": "patch",
          "args": [
            {
              "name": "options",
              "type": "PatchOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<literal type | , Question>",
          "typeParameters": [],
          "line": 241,
          "description": "<p>Update one Question</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 6314,
                "end": 6321,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "PatchOptions",
              "optional": true,
              "tagName": {
                "pos": 6308,
                "end": 6313,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 6351,
                "end": 6358,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated Question</p>\n"
            }
          ]
        },
        {
          "name": "patch$",
          "args": [
            {
              "name": "updateParams",
              "type": "QuestionUpdateParamsDto"
            },
            {
              "name": "updateBody",
              "type": "QuestionUpdateBodyDto"
            },
            {
              "name": "options",
              "type": "PatchOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<Question>",
          "typeParameters": [],
          "line": 206,
          "description": "<p>Update one Question</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 5351,
                "end": 5363,
                "flags": 0,
                "escapedText": "updateParams"
              },
              "type": "QuestionUpdateParamsDto",
              "tagName": {
                "pos": 5345,
                "end": 5350,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request param</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 5403,
                "end": 5413,
                "flags": 0,
                "escapedText": "updateBody"
              },
              "type": "QuestionUpdateBodyDto",
              "tagName": {
                "pos": 5397,
                "end": 5402,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request body</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 5452,
                "end": 5459,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "PatchOptions",
              "optional": true,
              "tagName": {
                "pos": 5446,
                "end": 5451,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 5489,
                "end": 5496,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated Question</p>\n"
            }
          ]
        },
        {
          "name": "remove",
          "args": [
            {
              "name": "options",
              "type": "RemoveOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<QuestionDeleteParamsDto, Question>",
          "typeParameters": [],
          "line": 349,
          "description": "<p>Delete one Question</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 9109,
                "end": 9116,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "RemoveOptions",
              "optional": true,
              "tagName": {
                "pos": 9103,
                "end": 9108,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 9146,
                "end": 9153,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated Question</p>\n"
            }
          ]
        },
        {
          "name": "remove$",
          "args": [
            {
              "name": "deleteParams",
              "type": "QuestionDeleteParamsDto"
            },
            {
              "name": "options",
              "type": "RemoveOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<Question>",
          "typeParameters": [],
          "line": 323,
          "description": "<p>Delete one Question</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 8427,
                "end": 8439,
                "flags": 0,
                "escapedText": "deleteParams"
              },
              "type": "QuestionDeleteParamsDto",
              "tagName": {
                "pos": 8421,
                "end": 8426,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request param</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 8479,
                "end": 8486,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "RemoveOptions",
              "optional": true,
              "tagName": {
                "pos": 8473,
                "end": 8478,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 8516,
                "end": 8523,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated Question</p>\n"
            }
          ]
        },
        {
          "name": "upsert",
          "args": [
            {
              "name": "options",
              "type": "UpsertOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<literal type | , Question>",
          "typeParameters": [],
          "line": 302,
          "description": "<p>Update one Question</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 7887,
                "end": 7894,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "UpsertOptions",
              "optional": true,
              "tagName": {
                "pos": 7881,
                "end": 7886,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 7924,
                "end": 7931,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated Question</p>\n"
            }
          ]
        },
        {
          "name": "upsert$",
          "args": [
            {
              "name": "updateParams",
              "type": "QuestionUpsertParamsDto"
            },
            {
              "name": "updateBody",
              "type": "QuestionUpsertBodyDto"
            },
            {
              "name": "options",
              "type": "UpsertOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<Question>",
          "typeParameters": [],
          "line": 272,
          "description": "<p>Update one Question</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 6995,
                "end": 7007,
                "flags": 0,
                "escapedText": "updateParams"
              },
              "type": "QuestionUpsertParamsDto",
              "tagName": {
                "pos": 6989,
                "end": 6994,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request param</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 7047,
                "end": 7057,
                "flags": 0,
                "escapedText": "updateBody"
              },
              "type": "QuestionUpsertBodyDto",
              "tagName": {
                "pos": 7041,
                "end": 7046,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request body</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 7096,
                "end": 7103,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "UpsertOptions",
              "optional": true,
              "tagName": {
                "pos": 7090,
                "end": 7095,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 7133,
                "end": 7140,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated Question</p>\n"
            }
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "QuestionUpdateBodyDto",
      "id": "class-QuestionUpdateBodyDto-71662f55f314bf46a737c208d53a9085",
      "file": "generated/rest-dtos/dtos/question/question-update-body.dto.ts",
      "type": "class",
      "sourceCode": "import {  \n  IsOptional,\n  IsString,\n  IsUUID, \n} from 'class-validator';\n\n \nexport class QuestionUpdateBodyDto {\n  @IsString() \n  @IsOptional()\n  title?: string;\n\n  @IsString() \n  @IsOptional()\n  text?: string;\n\n  @IsString() \n  @IsUUID(\"all\", ) \n  @IsOptional()\n  parentQuestion?: string;\n\n  @IsString({ each: true}) \n  @IsUUID(\"all\", { each: true}) \n  @IsOptional()\n  tags?: string[];\n\n}\n",
      "properties": [
        {
          "name": "parentQuestion",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 21,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": "'all'"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "tags",
          "type": "string[]",
          "optional": true,
          "description": "",
          "line": 26,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": "{each: true}"
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": "'all', {each: true}"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "text",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 16,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "title",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 12,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "QuestionUpdateParamsDto",
      "id": "class-QuestionUpdateParamsDto-f3ffce9cce6618a48d39047f7cef114a",
      "file": "generated/rest-dtos/dtos/question/question-update-params.dto.ts",
      "type": "class",
      "sourceCode": "import {\n  IsString,\n  IsUUID,\n} from 'class-validator';\n\nexport class QuestionUpdateParamsDto {\n  @IsString()\n  @IsUUID()\n  id!: string;\n}\n",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "QuestionUpsertBodyDto",
      "id": "class-QuestionUpsertBodyDto-4e86944a4862034f5906441f13ab113b",
      "file": "generated/rest-dtos/dtos/question/question-upsert-body.dto.ts",
      "type": "class",
      "sourceCode": "import {  \n  IsOptional,\n  IsString,\n  IsUUID, \n} from 'class-validator';\n\n \nexport class QuestionUpsertBodyDto {\n  @IsString() \n  title!: string;\n\n  @IsString() \n  text!: string;\n\n  @IsString() \n  @IsUUID(\"all\", ) \n  @IsOptional()\n  parentQuestion?: string;\n\n  @IsString({ each: true}) \n  @IsUUID(\"all\", { each: true}) \n  @IsOptional()\n  tags?: string[];\n\n}\n",
      "properties": [
        {
          "name": "parentQuestion",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 19,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": "'all'"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "tags",
          "type": "string[]",
          "optional": true,
          "description": "",
          "line": 24,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": "{each: true}"
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": "'all', {each: true}"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "text",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 14,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "title",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 11,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "QuestionUpsertParamsDto",
      "id": "class-QuestionUpsertParamsDto-ab76bb3bde82070d74b23afda25219da",
      "file": "generated/rest-dtos/dtos/question/question-upsert-params.dto.ts",
      "type": "class",
      "sourceCode": "import {\n  IsString,\n  IsUUID,\n} from 'class-validator';\n\nexport class QuestionUpsertParamsDto {\n  @IsString()\n  @IsUUID()\n  id!: string;\n}\n",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "RextClient",
      "id": "class-RextClient-7a5ea55aefa7a22fba42debd3fa43eb1",
      "file": "generated/rext-client/rext-client.ts",
      "type": "class",
      "sourceCode": "import {\n  AnswerService,\n  MessageService,\n  OpenQuestionService,\n  QuestionService,\n  TagService,\n  UserService,\n  VariableService,\n} from './services';\n\nexport class RextClient {\n  public apiUrl: URL;\n\n  constructor(apiUrl: string | URL) {\n    this.apiUrl = new URL(apiUrl.toString());\n  }\n\n  private answerService!: AnswerService;\n\n  get answer() {\n    if (!this.answerService) {\n      this.answerService = new AnswerService(this.apiUrl);\n    }\n\n    return this.answerService;\n  }\n\n  private messageService!: MessageService;\n\n  get message() {\n    if (!this.messageService) {\n      this.messageService = new MessageService(this.apiUrl);\n    }\n\n    return this.messageService;\n  }\n\n  private openQuestionService!: OpenQuestionService;\n\n  get openQuestion() {\n    if (!this.openQuestionService) {\n      this.openQuestionService = new OpenQuestionService(this.apiUrl);\n    }\n\n    return this.openQuestionService;\n  }\n\n  private questionService!: QuestionService;\n\n  get question() {\n    if (!this.questionService) {\n      this.questionService = new QuestionService(this.apiUrl);\n    }\n\n    return this.questionService;\n  }\n\n  private tagService!: TagService;\n\n  get tag() {\n    if (!this.tagService) {\n      this.tagService = new TagService(this.apiUrl);\n    }\n\n    return this.tagService;\n  }\n\n  private userService!: UserService;\n\n  get user() {\n    if (!this.userService) {\n      this.userService = new UserService(this.apiUrl);\n    }\n\n    return this.userService;\n  }\n\n  private variableService!: VariableService;\n\n  get variable() {\n    if (!this.variableService) {\n      this.variableService = new VariableService(this.apiUrl);\n    }\n\n    return this.variableService;\n  }\n\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "apiUrl",
            "type": "string | URL"
          }
        ],
        "line": 12,
        "jsdoctags": [
          {
            "name": "apiUrl",
            "type": "string | URL",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "answerService",
          "type": "AnswerService",
          "optional": false,
          "description": "",
          "line": 18,
          "modifierKind": [112]
        },
        {
          "name": "apiUrl",
          "type": "URL",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [114]
        },
        {
          "name": "messageService",
          "type": "MessageService",
          "optional": false,
          "description": "",
          "line": 28,
          "modifierKind": [112]
        },
        {
          "name": "openQuestionService",
          "type": "OpenQuestionService",
          "optional": false,
          "description": "",
          "line": 38,
          "modifierKind": [112]
        },
        {
          "name": "questionService",
          "type": "QuestionService",
          "optional": false,
          "description": "",
          "line": 48,
          "modifierKind": [112]
        },
        {
          "name": "tagService",
          "type": "TagService",
          "optional": false,
          "description": "",
          "line": 58,
          "modifierKind": [112]
        },
        {
          "name": "userService",
          "type": "UserService",
          "optional": false,
          "description": "",
          "line": 68,
          "modifierKind": [112]
        },
        {
          "name": "variableService",
          "type": "VariableService",
          "optional": false,
          "description": "",
          "line": 78,
          "modifierKind": [112]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "accessors": {
        "answer": {
          "name": "answer",
          "getSignature": {
            "name": "answer",
            "type": "",
            "returnType": "",
            "line": 20
          }
        },
        "message": {
          "name": "message",
          "getSignature": {
            "name": "message",
            "type": "",
            "returnType": "",
            "line": 30
          }
        },
        "openQuestion": {
          "name": "openQuestion",
          "getSignature": {
            "name": "openQuestion",
            "type": "",
            "returnType": "",
            "line": 40
          }
        },
        "question": {
          "name": "question",
          "getSignature": {
            "name": "question",
            "type": "",
            "returnType": "",
            "line": 50
          }
        },
        "tag": {
          "name": "tag",
          "getSignature": {
            "name": "tag",
            "type": "",
            "returnType": "",
            "line": 60
          }
        },
        "user": {
          "name": "user",
          "getSignature": {
            "name": "user",
            "type": "",
            "returnType": "",
            "line": 70
          }
        },
        "variable": {
          "name": "variable",
          "getSignature": {
            "name": "variable",
            "type": "",
            "returnType": "",
            "line": 80
          }
        }
      },
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "Tag",
      "id": "class-Tag-8c3f296c468ed6979227c658dda67d5a",
      "file": "generated/models/models/tag.ts",
      "type": "class",
      "sourceCode": "import {  \n  IsString,\n  IsUUID,\n  ValidateNested,\n} from 'class-validator';\n\nimport { Answer } from './answer';\nimport { Message } from './message';\nimport { Question } from './question';\n\nimport { Tag as PrismaTag } from '@prisma/client';\n\nexport class Tag implements PrismaTag {\n  @IsString() \n  @IsUUID(\"all\", ) \n  id!: string;\n\n  @IsString() \n  label!: string;\n\n  @ValidateNested({ each: true}) \n  answerAsTags?: Answer[];\n\n  @ValidateNested({ each: true}) \n  messageAsTags?: Message[];\n\n  @ValidateNested({ each: true}) \n  questionAsTags?: Question[];\n\n}\n",
      "properties": [
        {
          "name": "answerAsTags",
          "type": "Answer[]",
          "optional": true,
          "description": "",
          "line": 23,
          "decorators": [
            {
              "name": "ValidateNested",
              "stringifiedArguments": "{each: true}"
            }
          ]
        },
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 17,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": "'all'"
            }
          ]
        },
        {
          "name": "label",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 20,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "messageAsTags",
          "type": "Message[]",
          "optional": true,
          "description": "",
          "line": 26,
          "decorators": [
            {
              "name": "ValidateNested",
              "stringifiedArguments": "{each: true}"
            }
          ]
        },
        {
          "name": "questionAsTags",
          "type": "Question[]",
          "optional": true,
          "description": "",
          "line": 29,
          "decorators": [
            {
              "name": "ValidateNested",
              "stringifiedArguments": "{each: true}"
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "implements": ["PrismaTag"]
    },
    {
      "name": "TagCountQueryDto",
      "id": "class-TagCountQueryDto-8dbce5a8151e16f6d7a18a7d641962c7",
      "file": "generated/rest-dtos/dtos/tag/tag-count-query.dto.ts",
      "type": "class",
      "sourceCode": "import {\n\n  IsOptional,\n  IsString,\n} from 'class-validator';\n\n \nexport class TagCountQueryDto {\n  @IsString() \n  @IsOptional()\n  id?: string;\n\n  @IsString() \n  @IsOptional()\n  label?: string;\n\n}\n",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 12,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "label",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 16,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "TagCreateBodyDto",
      "id": "class-TagCreateBodyDto-84a7ed79b877e07a5896f2027d78a52a",
      "file": "generated/rest-dtos/dtos/tag/tag-create-body.dto.ts",
      "type": "class",
      "sourceCode": "import {  \n  IsString,\n} from 'class-validator';\n\n \nexport class TagCreateBodyDto {\n  @IsString() \n  label!: string;\n\n}\n",
      "properties": [
        {
          "name": "label",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "TagDeleteParamsDto",
      "id": "class-TagDeleteParamsDto-4953dcd962c0fd86eb9f6ef70fb9c9c2",
      "file": "generated/rest-dtos/dtos/tag/tag-delete-params.dto.ts",
      "type": "class",
      "sourceCode": "import {\n  IsString,\n  IsUUID,\n} from 'class-validator';\n\nexport class TagDeleteParamsDto {\n  @IsString()\n  @IsUUID()\n  id!: string;\n}\n",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "TagFindManyQueryDto",
      "id": "class-TagFindManyQueryDto-ef11ade9805201c71654cd493486685d",
      "file": "generated/rest-dtos/dtos/tag/tag-find-many-query.dto.ts",
      "type": "class",
      "sourceCode": "import {\n  IsIn,\n  IsInt,\n  IsNumber,\n  IsOptional,\n  IsString,\n\n  Min,\n} from 'class-validator';\n\nimport {\n  TagInclude,\n  SortOrder,\n  Tag,\n} from '@generated/models';\n\nexport class TagFindManyQueryDto {\n  @IsString() \n  @IsOptional()\n  id?: string;\n\n  @IsString() \n  @IsOptional()\n  label?: string;\n\n  @IsString({ each: true })\n  @IsIn(TagInclude, { each: true })\n  @IsOptional()\n  populate?: TagInclude[];\n\n  @IsOptional()\n  @IsString()\n  @IsIn([\n    'id',\n    'label',\n  ]) \n  sort: keyof Tag = 'id';\n\n  @IsOptional()\n  @IsIn(Object.values(SortOrder)) \n  order: SortOrder = 'asc';\n\n  @IsOptional()\n  @IsNumber()\n  @IsInt()\n  @Min(1)\n  take = 100;\n\n  @IsOptional()\n  @IsNumber()\n  @IsInt()\n  @Min(0)\n  skip = 0;\n}\n",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 20,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "label",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 24,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "order",
          "defaultValue": "'asc'",
          "type": "SortOrder",
          "optional": false,
          "description": "",
          "line": 41,
          "decorators": [
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            },
            {
              "name": "IsIn",
              "stringifiedArguments": "undefined"
            }
          ]
        },
        {
          "name": "populate",
          "type": "TagInclude[]",
          "optional": true,
          "description": "",
          "line": 29,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": "{each: true}"
            },
            {
              "name": "IsIn",
              "stringifiedArguments": "TagInclude, {each: true}"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "skip",
          "defaultValue": "0",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 53,
          "decorators": [
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            },
            {
              "name": "IsNumber",
              "stringifiedArguments": ""
            },
            {
              "name": "IsInt",
              "stringifiedArguments": ""
            },
            {
              "name": "Min",
              "stringifiedArguments": "0"
            }
          ]
        },
        {
          "name": "sort",
          "defaultValue": "'id'",
          "type": "",
          "optional": false,
          "description": "",
          "line": 37,
          "decorators": [
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            },
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsIn",
              "stringifiedArguments": "undefined"
            }
          ]
        },
        {
          "name": "take",
          "defaultValue": "100",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 47,
          "decorators": [
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            },
            {
              "name": "IsNumber",
              "stringifiedArguments": ""
            },
            {
              "name": "IsInt",
              "stringifiedArguments": ""
            },
            {
              "name": "Min",
              "stringifiedArguments": "1"
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "TagFindUniqueParamsDto",
      "id": "class-TagFindUniqueParamsDto-443a3f29f99b11c5146fac1a43c9dbbb",
      "file": "generated/rest-dtos/dtos/tag/tag-find-unique-params.dto.ts",
      "type": "class",
      "sourceCode": "import {\n  IsString,\n  IsUUID,\n} from 'class-validator';\n\nexport class TagFindUniqueParamsDto {\n  @IsString()\n  @IsUUID()\n  id!: string;\n}\n",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "TagFindUniqueQueryDto",
      "id": "class-TagFindUniqueQueryDto-6789c2c78342ba39cea31625cf7b8193",
      "file": "generated/rest-dtos/dtos/tag/tag-find-unique-query.dto.ts",
      "type": "class",
      "sourceCode": "import {\n  IsIn,\n  IsOptional,\n  IsString,\n} from 'class-validator';\n\nimport { TagInclude } from '@generated/models';\nexport class TagFindUniqueQueryDto {\n  @IsString({ each: true })\n  @IsIn(TagInclude,\n    { each: true }\n  )\n  @IsOptional()\n  populate?: TagInclude[];\n}\n",
      "properties": [
        {
          "name": "populate",
          "type": "TagInclude[]",
          "optional": true,
          "description": "",
          "line": 15,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": "{each: true}"
            },
            {
              "name": "IsIn",
              "stringifiedArguments": "TagInclude, {each: true}"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "TagService",
      "id": "class-TagService-a45003437acff5ee87ebef0a1262613c",
      "file": "generated/rext-client/services/tag.service.ts",
      "type": "class",
      "sourceCode": "import { Observable, OperatorFunction, zip } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\nimport {\n  count,\n  CountAjaxOptions,\n  create,\n  CreateAjaxOptions,\n  extractAjaxResponseData,\n  findMany,\n  FindManyOptions,\n  findUnique,\n  FindUniqueOptions,\n  fromDto,\n  isAlike,\n  patch,\n  PatchOptions,\n  remove,\n  RemoveOptions,\n  transformAndValidateMap,\n  upsert,\n  UpsertOptions,\n} from '../helpers';\n\nimport { Tag } from '@generated/models';\nimport {\n  TagCountQueryDto,\n  TagCreateBodyDto,\n  TagDeleteParamsDto,\n  TagFindManyQueryDto,\n  TagFindUniqueParamsDto,\n  TagFindUniqueQueryDto,\n  TagUpdateBodyDto,\n  TagUpdateParamsDto,\n  TagUpsertBodyDto,\n  TagUpsertParamsDto,\n} from '@generated/rest-dtos';\n\nexport class TagService {\n  public apiUrl: URL;\n\n  constructor(apiUrl: string | URL) {\n    this.apiUrl = new URL('tag', apiUrl.toString());\n  }\n\n  /**\n   * Create a new Tag\n   *\n   * @param createBody - Dto of the request body\n   * @param options - Ajax request options\n   * @returns a new Tag\n   */\n  public create$(\n    createBody: TagCreateBodyDto,\n    options?: CreateAjaxOptions,\n  ): Observable<Tag> {\n    return fromDto(createBody, TagCreateBodyDto).pipe(\n      switchMap((body) =>\n        create(this.apiUrl, body, options).pipe(\n          extractAjaxResponseData(),\n          transformAndValidateMap(Tag),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Create a new Tag\n   *\n   * @param options - Ajax request options\n   * @returns a new Tag\n   */\n  public create(\n    options?: CreateAjaxOptions,\n  ): OperatorFunction<TagCreateBodyDto, Tag> {\n    return switchMap((createBody) => this.create$(createBody, options));\n  }\n\n  /**\n   * Count the number of Tag entities that matches the filter\n   *\n   * @param countQuery - Dto of the request query\n   * @param options - Ajax request options\n   * @returns the number of Tag\n   */\n  public count$(\n    countQuery?: TagCountQueryDto,\n    options?: CountAjaxOptions,\n  ): Observable<number> {\n    return fromDto(countQuery, TagCountQueryDto).pipe(\n      switchMap((query) =>\n        count(this.apiUrl, { ...query }, options).pipe(\n          extractAjaxResponseData(),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Count the number of Tag entities that matches the filter\n   *\n   * @param options - Ajax request options\n   * @returns the number of Tag\n   */\n  public count(\n    options?: CountAjaxOptions,\n  ): OperatorFunction<TagCountQueryDto | undefined, number> {\n    return switchMap((countQuery) => this.count$(countQuery, options));\n  }\n\n  /**\n   * Find zero or one Model that matches the filter\n   *\n   model\n   * @param findUniqueParams - Dto of the request param\n   * @param findUniqueQuery - Dto of the request query\n   * @param options - Ajax request options\n   * @returns a Model or null\n   */\n  public findUnique$(\n    findUniqueParams: TagFindUniqueParamsDto,\n    findUniqueQuery?: TagFindUniqueQueryDto,\n    options?: FindUniqueOptions,\n  ): Observable<Tag> {\n    return zip(\n      fromDto(findUniqueParams, TagFindUniqueParamsDto),\n      fromDto(findUniqueQuery, TagFindUniqueQueryDto),\n    ).pipe(\n      switchMap(([params, query]) =>\n        findUnique(this.apiUrl, params, { ...query }, options).pipe(\n          extractAjaxResponseData(),\n          transformAndValidateMap(Tag),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Count the number of Tag entities that matches the filter\n   *\n   * @param options - Ajax request options\n   * @returns the number of Tag\n   */\n  public findUnique(\n    options?: FindUniqueOptions,\n  ): OperatorFunction<\n    | { params: TagFindUniqueParamsDto; query?: TagFindUniqueQueryDto }\n    | [TagFindUniqueParamsDto, TagFindUniqueQueryDto]\n    | TagFindUniqueParamsDto,\n    Tag\n  > {\n    return switchMap((source) => {\n      if (Array.isArray(source))\n        return this.findUnique$(source[0], source[1], options);\n      if (isAlike(source, TagFindUniqueParamsDto))\n        return this.findUnique$(source, undefined, options);\n      return this.findUnique$(source.params, source.query, options);\n    });\n  }\n\n  /**\n   * Find zero or more Model entities that matches the filter\n   *\n   * @param findManyQuery - Dto of the request query\n   * @param options - Ajax request options\n   * @returns an array of Model entities\n   */\n  public findMany$(\n    findManyQuery?: TagFindManyQueryDto,\n    options?: FindManyOptions,\n  ): Observable<Tag[]> {\n    return fromDto(findManyQuery, TagFindManyQueryDto).pipe(\n      switchMap((params) =>\n        findMany(this.apiUrl, { ...params }, options).pipe(\n          extractAjaxResponseData(),\n          transformAndValidateMap(Tag),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Find zero or more Model entities that matches the filter\n   *\n   * @param options - Ajax request options\n   * @returns an array of Model entities\n   */\n  public findMany(\n    options?: FindManyOptions,\n  ): OperatorFunction<TagFindManyQueryDto | undefined, Tag[]> {\n    return switchMap((findManyQuery) => this.findMany$(findManyQuery, options));\n  }\n\n  /**\n   * Update one Tag\n   *\n   * @Remarks\n   *\n   * Partial updates are allowed with this method\n   *\n   * @param updateParams - Dto of the request param\n   * @param updateBody - Dto of the request body\n   * @param options - Ajax request options\n   * @returns the updated Tag\n   */\n  public patch$(\n    updateParams: TagUpdateParamsDto,\n    updateBody: TagUpdateBodyDto,\n    options?: PatchOptions,\n  ): Observable<Tag> {\n    return zip(\n      fromDto(updateParams, TagUpdateParamsDto),\n      fromDto(updateBody, TagUpdateBodyDto),\n    ).pipe(\n      switchMap(([params, body]) =>\n        patch(this.apiUrl, params, body, options).pipe(\n          extractAjaxResponseData(),\n          transformAndValidateMap(Tag),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * patch$ alias\n   */\n  public update$ = this.patch$.bind(this);\n\n  /**\n   * Update one Tag\n   *\n   * @Remarks\n   *\n   * Partial updates are allowed with this method\n   *\n   * @param updateParams - Dto of the request param\n   * @param updateBody - Dto of the request body\n   * @param options - Ajax request options\n   * @returns the updated Tag\n   */\n  public patch(\n    options?: PatchOptions,\n  ): OperatorFunction<\n    | { params: TagUpdateParamsDto; body: TagUpdateBodyDto }\n    | [TagUpdateParamsDto, TagUpdateBodyDto],\n    Tag\n  > {\n    return switchMap((source) => {\n      if (Array.isArray(source))\n        return this.patch$(source[0], source[1], options);\n      return this.patch$(source.params, source.body, options);\n    });\n  }\n\n  /**\n   * patch alias\n   */\n  public update = this.patch.bind(this);\n\n  /**\n   * Update one Tag\n   *\n   * @Remarks\n   *\n   * Partial updates are allowed with this method\n   *\n   * @param updateParams - Dto of the request param\n   * @param updateBody - Dto of the request body\n   * @param options - Ajax request options\n   * @returns the updated Tag\n   */\n  public upsert$(\n    updateParams: TagUpsertParamsDto,\n    updateBody: TagUpsertBodyDto,\n    options?: UpsertOptions,\n  ): Observable<Tag> {\n    return zip(\n      fromDto(updateParams, TagUpsertParamsDto),\n      fromDto(updateBody, TagUpsertBodyDto),\n    ).pipe(\n      switchMap(([params, body]) =>\n        upsert(this.apiUrl, params, body, options).pipe(\n          extractAjaxResponseData(),\n          transformAndValidateMap(Tag),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Update one Tag\n   *\n   * @Remarks\n   *\n   * Partial updates are allowed with this method\n   *\n   * @param updateParams - Dto of the request param\n   * @param updateBody - Dto of the request body\n   * @param options - Ajax request options\n   * @returns the updated Tag\n   */\n  public upsert(\n    options?: UpsertOptions,\n  ): OperatorFunction<\n    | { params: TagUpsertParamsDto; body: TagUpsertBodyDto }\n    | [TagUpsertParamsDto, TagUpsertBodyDto],\n    Tag\n  > {\n    return switchMap((source) => {\n      if (Array.isArray(source))\n        return this.upsert$(source[0], source[1], options);\n      return this.upsert$(source.params, source.body, options);\n    });\n  }\n\n  /**\n   * Delete one Tag\n   *\n   * @param deleteParams - Dto of the request param\n   * @param options - Ajax request options\n   * @returns the updated Tag\n   */\n  public remove$(\n    deleteParams: TagDeleteParamsDto,\n    options?: RemoveOptions,\n  ): Observable<Tag> {\n    return fromDto(deleteParams, TagDeleteParamsDto).pipe(\n      switchMap((params) =>\n        remove(this.apiUrl, { ...params }, options).pipe(\n          extractAjaxResponseData(),\n          transformAndValidateMap(Tag),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * remove$ alias\n   */\n  public delete$ = this.remove$.bind(this);\n\n  /**\n   * Delete one Tag\n   *\n   * @param deleteParams - Dto of the request param\n   * @param options - Ajax request options\n   * @returns the updated Tag\n   */\n  public remove(\n    options?: RemoveOptions,\n  ): OperatorFunction<TagDeleteParamsDto, Tag> {\n    return switchMap((removeParams) => this.remove$(removeParams, options));\n  }\n\n  /**\n   * remove alias\n   */\n  public delete = this.remove.bind(this);\n}\n\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "apiUrl",
            "type": "string | URL"
          }
        ],
        "line": 40,
        "jsdoctags": [
          {
            "name": "apiUrl",
            "type": "string | URL",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "apiUrl",
          "type": "URL",
          "optional": false,
          "description": "",
          "line": 40,
          "modifierKind": [114]
        },
        {
          "name": "delete",
          "defaultValue": "this.remove.bind(this)",
          "type": "",
          "optional": false,
          "description": "<p>remove alias</p>\n",
          "line": 358,
          "modifierKind": [114]
        },
        {
          "name": "delete$",
          "defaultValue": "this.remove$.bind(this)",
          "type": "",
          "optional": false,
          "description": "<p>remove$ alias</p>\n",
          "line": 340,
          "modifierKind": [114]
        },
        {
          "name": "update",
          "defaultValue": "this.patch.bind(this)",
          "type": "",
          "optional": false,
          "description": "<p>patch alias</p>\n",
          "line": 258,
          "modifierKind": [114]
        },
        {
          "name": "update$",
          "defaultValue": "this.patch$.bind(this)",
          "type": "",
          "optional": false,
          "description": "<p>patch$ alias</p>\n",
          "line": 227,
          "modifierKind": [114]
        }
      ],
      "methods": [
        {
          "name": "count",
          "args": [
            {
              "name": "options",
              "type": "CountAjaxOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<TagCountQueryDto | undefined, number>",
          "typeParameters": [],
          "line": 105,
          "description": "<p>Count the number of Tag entities that matches the filter</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 2251,
                "end": 2258,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "CountAjaxOptions",
              "optional": true,
              "tagName": {
                "pos": 2245,
                "end": 2250,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 2288,
                "end": 2295,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the number of Tag</p>\n"
            }
          ]
        },
        {
          "name": "count$",
          "args": [
            {
              "name": "countQuery",
              "type": "TagCountQueryDto",
              "optional": true
            },
            {
              "name": "options",
              "type": "CountAjaxOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<number>",
          "typeParameters": [],
          "line": 86,
          "description": "<p>Count the number of Tag entities that matches the filter</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 1730,
                "end": 1740,
                "flags": 0,
                "escapedText": "countQuery"
              },
              "type": "TagCountQueryDto",
              "optional": true,
              "tagName": {
                "pos": 1724,
                "end": 1729,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request query</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 1780,
                "end": 1787,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "CountAjaxOptions",
              "optional": true,
              "tagName": {
                "pos": 1774,
                "end": 1779,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 1817,
                "end": 1824,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the number of Tag</p>\n"
            }
          ]
        },
        {
          "name": "create",
          "args": [
            {
              "name": "options",
              "type": "CreateAjaxOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<TagCreateBodyDto, Tag>",
          "typeParameters": [],
          "line": 73,
          "description": "<p>Create a new Tag</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 1409,
                "end": 1416,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "CreateAjaxOptions",
              "optional": true,
              "tagName": {
                "pos": 1403,
                "end": 1408,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 1446,
                "end": 1453,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>a new Tag</p>\n"
            }
          ]
        },
        {
          "name": "create$",
          "args": [
            {
              "name": "createBody",
              "type": "TagCreateBodyDto"
            },
            {
              "name": "options",
              "type": "CreateAjaxOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<Tag>",
          "typeParameters": [],
          "line": 53,
          "description": "<p>Create a new Tag</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 907,
                "end": 917,
                "flags": 0,
                "escapedText": "createBody"
              },
              "type": "TagCreateBodyDto",
              "tagName": {
                "pos": 901,
                "end": 906,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request body</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 956,
                "end": 963,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "CreateAjaxOptions",
              "optional": true,
              "tagName": {
                "pos": 950,
                "end": 955,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 993,
                "end": 1000,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>a new Tag</p>\n"
            }
          ]
        },
        {
          "name": "findMany",
          "args": [
            {
              "name": "options",
              "type": "FindManyOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<TagFindManyQueryDto | undefined, Tag[]>",
          "typeParameters": [],
          "line": 188,
          "description": "<p>Find zero or more Model entities that matches the filter</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 4696,
                "end": 4703,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "FindManyOptions",
              "optional": true,
              "tagName": {
                "pos": 4690,
                "end": 4695,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 4733,
                "end": 4740,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>an array of Model entities</p>\n"
            }
          ]
        },
        {
          "name": "findMany$",
          "args": [
            {
              "name": "findManyQuery",
              "type": "TagFindManyQueryDto",
              "optional": true
            },
            {
              "name": "options",
              "type": "FindManyOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<Tag[]>",
          "typeParameters": [],
          "line": 168,
          "description": "<p>Find zero or more Model entities that matches the filter</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 4105,
                "end": 4118,
                "flags": 0,
                "escapedText": "findManyQuery"
              },
              "type": "TagFindManyQueryDto",
              "optional": true,
              "tagName": {
                "pos": 4099,
                "end": 4104,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request query</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 4158,
                "end": 4165,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "FindManyOptions",
              "optional": true,
              "tagName": {
                "pos": 4152,
                "end": 4157,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 4195,
                "end": 4202,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>an array of Model entities</p>\n"
            }
          ]
        },
        {
          "name": "findUnique",
          "args": [
            {
              "name": "options",
              "type": "FindUniqueOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<literal type |  | TagFindUniqueParamsDto, Tag>",
          "typeParameters": [],
          "line": 144,
          "description": "<p>Count the number of Tag entities that matches the filter</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 3378,
                "end": 3385,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "FindUniqueOptions",
              "optional": true,
              "tagName": {
                "pos": 3372,
                "end": 3377,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 3415,
                "end": 3422,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the number of Tag</p>\n"
            }
          ]
        },
        {
          "name": "findUnique$",
          "args": [
            {
              "name": "findUniqueParams",
              "type": "TagFindUniqueParamsDto"
            },
            {
              "name": "findUniqueQuery",
              "type": "TagFindUniqueQueryDto",
              "optional": true
            },
            {
              "name": "options",
              "type": "FindUniqueOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<Tag>",
          "typeParameters": [],
          "line": 120,
          "description": "<p>Find zero or one Model that matches the filter</p>\n<p>model</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 2591,
                "end": 2607,
                "flags": 0,
                "escapedText": "findUniqueParams"
              },
              "type": "TagFindUniqueParamsDto",
              "tagName": {
                "pos": 2585,
                "end": 2590,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request param</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 2647,
                "end": 2662,
                "flags": 0,
                "escapedText": "findUniqueQuery"
              },
              "type": "TagFindUniqueQueryDto",
              "optional": true,
              "tagName": {
                "pos": 2641,
                "end": 2646,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request query</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 2702,
                "end": 2709,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "FindUniqueOptions",
              "optional": true,
              "tagName": {
                "pos": 2696,
                "end": 2701,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 2739,
                "end": 2746,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>a Model or null</p>\n"
            }
          ]
        },
        {
          "name": "patch",
          "args": [
            {
              "name": "options",
              "type": "PatchOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<literal type | , Tag>",
          "typeParameters": [],
          "line": 241,
          "description": "<p>Update one Tag</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 6014,
                "end": 6021,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "PatchOptions",
              "optional": true,
              "tagName": {
                "pos": 6008,
                "end": 6013,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 6051,
                "end": 6058,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated Tag</p>\n"
            }
          ]
        },
        {
          "name": "patch$",
          "args": [
            {
              "name": "updateParams",
              "type": "TagUpdateParamsDto"
            },
            {
              "name": "updateBody",
              "type": "TagUpdateBodyDto"
            },
            {
              "name": "options",
              "type": "PatchOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<Tag>",
          "typeParameters": [],
          "line": 206,
          "description": "<p>Update one Tag</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 5091,
                "end": 5103,
                "flags": 0,
                "escapedText": "updateParams"
              },
              "type": "TagUpdateParamsDto",
              "tagName": {
                "pos": 5085,
                "end": 5090,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request param</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 5143,
                "end": 5153,
                "flags": 0,
                "escapedText": "updateBody"
              },
              "type": "TagUpdateBodyDto",
              "tagName": {
                "pos": 5137,
                "end": 5142,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request body</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 5192,
                "end": 5199,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "PatchOptions",
              "optional": true,
              "tagName": {
                "pos": 5186,
                "end": 5191,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 5229,
                "end": 5236,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated Tag</p>\n"
            }
          ]
        },
        {
          "name": "remove",
          "args": [
            {
              "name": "options",
              "type": "RemoveOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<TagDeleteParamsDto, Tag>",
          "typeParameters": [],
          "line": 349,
          "description": "<p>Delete one Tag</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 8669,
                "end": 8676,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "RemoveOptions",
              "optional": true,
              "tagName": {
                "pos": 8663,
                "end": 8668,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 8706,
                "end": 8713,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated Tag</p>\n"
            }
          ]
        },
        {
          "name": "remove$",
          "args": [
            {
              "name": "deleteParams",
              "type": "TagDeleteParamsDto"
            },
            {
              "name": "options",
              "type": "RemoveOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<Tag>",
          "typeParameters": [],
          "line": 323,
          "description": "<p>Delete one Tag</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 8017,
                "end": 8029,
                "flags": 0,
                "escapedText": "deleteParams"
              },
              "type": "TagDeleteParamsDto",
              "tagName": {
                "pos": 8011,
                "end": 8016,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request param</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 8069,
                "end": 8076,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "RemoveOptions",
              "optional": true,
              "tagName": {
                "pos": 8063,
                "end": 8068,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 8106,
                "end": 8113,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated Tag</p>\n"
            }
          ]
        },
        {
          "name": "upsert",
          "args": [
            {
              "name": "options",
              "type": "UpsertOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<literal type | , Tag>",
          "typeParameters": [],
          "line": 302,
          "description": "<p>Update one Tag</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 7512,
                "end": 7519,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "UpsertOptions",
              "optional": true,
              "tagName": {
                "pos": 7506,
                "end": 7511,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 7549,
                "end": 7556,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated Tag</p>\n"
            }
          ]
        },
        {
          "name": "upsert$",
          "args": [
            {
              "name": "updateParams",
              "type": "TagUpsertParamsDto"
            },
            {
              "name": "updateBody",
              "type": "TagUpsertBodyDto"
            },
            {
              "name": "options",
              "type": "UpsertOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<Tag>",
          "typeParameters": [],
          "line": 272,
          "description": "<p>Update one Tag</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 6660,
                "end": 6672,
                "flags": 0,
                "escapedText": "updateParams"
              },
              "type": "TagUpsertParamsDto",
              "tagName": {
                "pos": 6654,
                "end": 6659,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request param</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 6712,
                "end": 6722,
                "flags": 0,
                "escapedText": "updateBody"
              },
              "type": "TagUpsertBodyDto",
              "tagName": {
                "pos": 6706,
                "end": 6711,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request body</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 6761,
                "end": 6768,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "UpsertOptions",
              "optional": true,
              "tagName": {
                "pos": 6755,
                "end": 6760,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 6798,
                "end": 6805,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated Tag</p>\n"
            }
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "TagUpdateBodyDto",
      "id": "class-TagUpdateBodyDto-9097e157e5b66f96fece94554a89af59",
      "file": "generated/rest-dtos/dtos/tag/tag-update-body.dto.ts",
      "type": "class",
      "sourceCode": "import {  \n  IsOptional,\n  IsString,\n} from 'class-validator';\n\n \nexport class TagUpdateBodyDto {\n  @IsString() \n  @IsOptional()\n  label?: string;\n\n}\n",
      "properties": [
        {
          "name": "label",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 11,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "TagUpdateParamsDto",
      "id": "class-TagUpdateParamsDto-562af25f5883d544932de555b12fa985",
      "file": "generated/rest-dtos/dtos/tag/tag-update-params.dto.ts",
      "type": "class",
      "sourceCode": "import {\n  IsString,\n  IsUUID,\n} from 'class-validator';\n\nexport class TagUpdateParamsDto {\n  @IsString()\n  @IsUUID()\n  id!: string;\n}\n",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "TagUpsertBodyDto",
      "id": "class-TagUpsertBodyDto-25fbbcf8e395b97ba519ac6be2bd466b",
      "file": "generated/rest-dtos/dtos/tag/tag-upsert-body.dto.ts",
      "type": "class",
      "sourceCode": "import {  \n  IsString,\n} from 'class-validator';\n\n \nexport class TagUpsertBodyDto {\n  @IsString() \n  label!: string;\n\n}\n",
      "properties": [
        {
          "name": "label",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "TagUpsertParamsDto",
      "id": "class-TagUpsertParamsDto-3cb71597f4a726e056e4bc85c9635d5a",
      "file": "generated/rest-dtos/dtos/tag/tag-upsert-params.dto.ts",
      "type": "class",
      "sourceCode": "import {\n  IsString,\n  IsUUID,\n} from 'class-validator';\n\nexport class TagUpsertParamsDto {\n  @IsString()\n  @IsUUID()\n  id!: string;\n}\n",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "User",
      "id": "class-User-d71d6cbb454bd9986fdba8c83f5dc446",
      "file": "generated/models/models/user.ts",
      "type": "class",
      "sourceCode": "import {  \n  IsBoolean, \n  IsEmail, \n  IsIn,\n  IsNumber,\n  IsDate,\n  IsOptional,\n  IsString,\n  IsUUID,\n  ValidateNested,\n  Matches, \n} from 'class-validator';\n\nimport { Answer } from './answer';\n\nimport {\n  UserGender,\n} from '../enums';\nimport { User as PrismaUser } from '@prisma/client';\n\nexport class User implements PrismaUser {\n  @IsString() \n  @IsUUID(\"all\", ) \n  id!: string;\n\n  @IsString() \n  name!: string;\n\n  @IsString() \n  @IsEmail({}, ) \n  email!: string;\n\n  @IsString() \n  @Matches(/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{8,}$/, ) \n  password!: string;\n\n  @IsString() \n  role!: string;\n\n  @IsBoolean() \n  banned!: boolean;\n\n  @IsNumber({}, )\n  @IsDate({}, )\n  @IsOptional()\n  lastConnectedAt: Date | null = null;\n\n  @IsString() \n  @IsIn(Object.values(UserGender),) \n  gender!: UserGender;\n\n  @ValidateNested({ each: true}) \n  answerAsUser?: Answer[];\n\n}\n",
      "properties": [
        {
          "name": "answerAsUser",
          "type": "Answer[]",
          "optional": true,
          "description": "",
          "line": 54,
          "decorators": [
            {
              "name": "ValidateNested",
              "stringifiedArguments": "{each: true}"
            }
          ]
        },
        {
          "name": "banned",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 42,
          "decorators": [
            {
              "name": "IsBoolean",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "email",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 32,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsEmail",
              "stringifiedArguments": "{}"
            }
          ]
        },
        {
          "name": "gender",
          "type": "UserGender",
          "optional": false,
          "description": "",
          "line": 51,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsIn",
              "stringifiedArguments": "undefined"
            }
          ]
        },
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 25,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": "'all'"
            }
          ]
        },
        {
          "name": "lastConnectedAt",
          "defaultValue": "null",
          "type": "Date | null",
          "optional": false,
          "description": "",
          "line": 47,
          "decorators": [
            {
              "name": "IsNumber",
              "stringifiedArguments": "{}"
            },
            {
              "name": "IsDate",
              "stringifiedArguments": "{}"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "name",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 28,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "password",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 36,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "Matches",
              "stringifiedArguments": "/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{8,}$/"
            }
          ]
        },
        {
          "name": "role",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 39,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "implements": ["PrismaUser"]
    },
    {
      "name": "UserCountQueryDto",
      "id": "class-UserCountQueryDto-fc908d57a54ca66aefb8ff2a0073ab52",
      "file": "generated/rest-dtos/dtos/user/user-count-query.dto.ts",
      "type": "class",
      "sourceCode": "import {\n  IsBoolean, \n  IsEmail, \n  IsIn,\n  IsDate,\n\n  IsOptional,\n  IsString,\n} from 'class-validator';\n\nimport {\n  UserGender,\n} from '@generated/models';\n\nexport class UserCountQueryDto {\n  @IsString() \n  @IsOptional()\n  id?: string;\n\n  @IsString() \n  @IsOptional()\n  name?: string;\n\n  @IsString() \n  @IsEmail({}, ) \n  @IsOptional()\n  email?: string;\n\n  @IsString() \n  @IsOptional()\n  role?: string;\n\n  @IsBoolean() \n  @IsOptional()\n  banned?: boolean;\n\n  @IsDate({}, )\n  @IsOptional()\n  lastConnectedAt?: Date;\n\n  @IsString() \n  @IsIn([Object.values(UserGender)], ) \n  @IsOptional()\n  gender?: UserGender;\n\n}\n",
      "properties": [
        {
          "name": "banned",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 36,
          "decorators": [
            {
              "name": "IsBoolean",
              "stringifiedArguments": ""
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "email",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 28,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsEmail",
              "stringifiedArguments": "{}"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "gender",
          "type": "UserGender",
          "optional": true,
          "description": "",
          "line": 45,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsIn",
              "stringifiedArguments": "undefined"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "id",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 19,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "lastConnectedAt",
          "type": "Date",
          "optional": true,
          "description": "",
          "line": 40,
          "decorators": [
            {
              "name": "IsDate",
              "stringifiedArguments": "{}"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "name",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 23,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "role",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 32,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "UserCreateBodyDto",
      "id": "class-UserCreateBodyDto-5ecb5b3e652c9355ed049797cd36124f",
      "file": "generated/rest-dtos/dtos/user/user-create-body.dto.ts",
      "type": "class",
      "sourceCode": "import {  \n  IsBoolean, \n  IsEmail, \n  IsIn,\n  IsDate,\n  IsOptional,\n  IsString,\n  Matches, \n} from 'class-validator';\n\nimport {\n  UserGender,\n} from '@generated/models';\n\nexport class UserCreateBodyDto {\n  @IsString() \n  name!: string;\n\n  @IsString() \n  @IsEmail({}, ) \n  email!: string;\n\n  @IsString() \n  @Matches(/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{8,}$/, ) \n  password!: string;\n\n  @IsString() \n  role!: string;\n\n  @IsBoolean() \n  banned!: boolean;\n\n  @IsDate({}, )\n  @IsOptional()\n  lastConnectedAt?: Date;\n\n  @IsString() \n  @IsIn(Object.values(UserGender),) \n  gender!: UserGender;\n\n}\n",
      "properties": [
        {
          "name": "banned",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 32,
          "decorators": [
            {
              "name": "IsBoolean",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "email",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 22,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsEmail",
              "stringifiedArguments": "{}"
            }
          ]
        },
        {
          "name": "gender",
          "type": "UserGender",
          "optional": false,
          "description": "",
          "line": 40,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsIn",
              "stringifiedArguments": "undefined"
            }
          ]
        },
        {
          "name": "lastConnectedAt",
          "type": "Date",
          "optional": true,
          "description": "",
          "line": 36,
          "decorators": [
            {
              "name": "IsDate",
              "stringifiedArguments": "{}"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "name",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 18,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "password",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 26,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "Matches",
              "stringifiedArguments": "/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{8,}$/"
            }
          ]
        },
        {
          "name": "role",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 29,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "UserDeleteParamsDto",
      "id": "class-UserDeleteParamsDto-834923a3f3f0fb8acb883698eb2d90b8",
      "file": "generated/rest-dtos/dtos/user/user-delete-params.dto.ts",
      "type": "class",
      "sourceCode": "import {\n  IsString,\n  IsUUID,\n} from 'class-validator';\n\nexport class UserDeleteParamsDto {\n  @IsString()\n  @IsUUID()\n  id!: string;\n}\n",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "UserFindManyQueryDto",
      "id": "class-UserFindManyQueryDto-548d8a46f79b0997481ca4e7fef95beb",
      "file": "generated/rest-dtos/dtos/user/user-find-many-query.dto.ts",
      "type": "class",
      "sourceCode": "import {\n  IsBoolean, \n  IsEmail, \n  IsDate, \n  IsIn,\n  IsInt,\n  IsNumber,\n  IsOptional,\n  IsString,\n\n  Min,\n} from 'class-validator';\n\nimport {\n  UserGender,\n  UserInclude,\n  SortOrder,\n  User,\n} from '@generated/models';\n\nexport class UserFindManyQueryDto {\n  @IsString() \n  @IsOptional()\n  id?: string;\n\n  @IsString() \n  @IsOptional()\n  name?: string;\n\n  @IsString() \n  @IsEmail({}, ) \n  @IsOptional()\n  email?: string;\n\n  @IsString() \n  @IsOptional()\n  role?: string;\n\n  @IsBoolean() \n  @IsOptional()\n  banned?: boolean;\n\n  @IsDate({},)\n  @IsOptional()\n  lastConnectedAt?: Date;\n\n  @IsString() \n  @IsIn(Object.values(UserGender), ) \n  @IsOptional()\n  gender?: UserGender;\n\n  @IsString({ each: true })\n  @IsIn(UserInclude, { each: true })\n  @IsOptional()\n  populate?: UserInclude[];\n\n  @IsOptional()\n  @IsString()\n  @IsIn([\n    'id',\n    'name',\n    'email',\n    'lastConnectedAt',\n    'gender',\n  ]) \n  sort: keyof User = 'id';\n\n  @IsOptional()\n  @IsIn(Object.values(SortOrder)) \n  order: SortOrder = 'asc';\n\n  @IsOptional()\n  @IsNumber()\n  @IsInt()\n  @Min(1)\n  take = 100;\n\n  @IsOptional()\n  @IsNumber()\n  @IsInt()\n  @Min(0)\n  skip = 0;\n}\n",
      "properties": [
        {
          "name": "banned",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 41,
          "decorators": [
            {
              "name": "IsBoolean",
              "stringifiedArguments": ""
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "email",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 33,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsEmail",
              "stringifiedArguments": "{}"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "gender",
          "type": "UserGender",
          "optional": true,
          "description": "",
          "line": 50,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsIn",
              "stringifiedArguments": "undefined"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "id",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 24,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "lastConnectedAt",
          "type": "Date",
          "optional": true,
          "description": "",
          "line": 45,
          "decorators": [
            {
              "name": "IsDate",
              "stringifiedArguments": "{}"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "name",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 28,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "order",
          "defaultValue": "'asc'",
          "type": "SortOrder",
          "optional": false,
          "description": "",
          "line": 70,
          "decorators": [
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            },
            {
              "name": "IsIn",
              "stringifiedArguments": "undefined"
            }
          ]
        },
        {
          "name": "populate",
          "type": "UserInclude[]",
          "optional": true,
          "description": "",
          "line": 55,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": "{each: true}"
            },
            {
              "name": "IsIn",
              "stringifiedArguments": "UserInclude, {each: true}"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "role",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 37,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "skip",
          "defaultValue": "0",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 82,
          "decorators": [
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            },
            {
              "name": "IsNumber",
              "stringifiedArguments": ""
            },
            {
              "name": "IsInt",
              "stringifiedArguments": ""
            },
            {
              "name": "Min",
              "stringifiedArguments": "0"
            }
          ]
        },
        {
          "name": "sort",
          "defaultValue": "'id'",
          "type": "",
          "optional": false,
          "description": "",
          "line": 66,
          "decorators": [
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            },
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsIn",
              "stringifiedArguments": "undefined"
            }
          ]
        },
        {
          "name": "take",
          "defaultValue": "100",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 76,
          "decorators": [
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            },
            {
              "name": "IsNumber",
              "stringifiedArguments": ""
            },
            {
              "name": "IsInt",
              "stringifiedArguments": ""
            },
            {
              "name": "Min",
              "stringifiedArguments": "1"
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "UserFindUniqueParamsDto",
      "id": "class-UserFindUniqueParamsDto-f8ddb751799784ed45ac055233db8fa1",
      "file": "generated/rest-dtos/dtos/user/user-find-unique-params.dto.ts",
      "type": "class",
      "sourceCode": "import {\n  IsString,\n  IsUUID,\n} from 'class-validator';\n\nexport class UserFindUniqueParamsDto {\n  @IsString()\n  @IsUUID()\n  id!: string;\n}\n",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "UserFindUniqueQueryDto",
      "id": "class-UserFindUniqueQueryDto-e0f2f0a8fb4ac3ab25a4fd8157611f58",
      "file": "generated/rest-dtos/dtos/user/user-find-unique-query.dto.ts",
      "type": "class",
      "sourceCode": "import {\n  IsIn,\n  IsOptional,\n  IsString,\n} from 'class-validator';\n\nimport { UserInclude } from '@generated/models';\nexport class UserFindUniqueQueryDto {\n  @IsString({ each: true })\n  @IsIn(UserInclude,\n    { each: true }\n  )\n  @IsOptional()\n  populate?: UserInclude[];\n}\n",
      "properties": [
        {
          "name": "populate",
          "type": "UserInclude[]",
          "optional": true,
          "description": "",
          "line": 15,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": "{each: true}"
            },
            {
              "name": "IsIn",
              "stringifiedArguments": "UserInclude, {each: true}"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "UserService",
      "id": "class-UserService-00ba821116de8197ca216efd98d68744",
      "file": "generated/rext-client/services/user.service.ts",
      "type": "class",
      "sourceCode": "import { Observable, OperatorFunction, zip } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\nimport {\n  count,\n  CountAjaxOptions,\n  create,\n  CreateAjaxOptions,\n  extractAjaxResponseData,\n  findMany,\n  FindManyOptions,\n  findUnique,\n  FindUniqueOptions,\n  fromDto,\n  isAlike,\n  patch,\n  PatchOptions,\n  remove,\n  RemoveOptions,\n  transformAndValidateMap,\n  upsert,\n  UpsertOptions,\n} from '../helpers';\n\nimport { User } from '@generated/models';\nimport {\n  UserCountQueryDto,\n  UserCreateBodyDto,\n  UserDeleteParamsDto,\n  UserFindManyQueryDto,\n  UserFindUniqueParamsDto,\n  UserFindUniqueQueryDto,\n  UserUpdateBodyDto,\n  UserUpdateParamsDto,\n  UserUpsertBodyDto,\n  UserUpsertParamsDto,\n} from '@generated/rest-dtos';\n\nexport class UserService {\n  public apiUrl: URL;\n\n  constructor(apiUrl: string | URL) {\n    this.apiUrl = new URL('user', apiUrl.toString());\n  }\n\n  /**\n   * Create a new User\n   *\n   * @param createBody - Dto of the request body\n   * @param options - Ajax request options\n   * @returns a new User\n   */\n  public create$(\n    createBody: UserCreateBodyDto,\n    options?: CreateAjaxOptions,\n  ): Observable<User> {\n    return fromDto(createBody, UserCreateBodyDto).pipe(\n      switchMap((body) =>\n        create(this.apiUrl, body, options).pipe(\n          extractAjaxResponseData(),\n          transformAndValidateMap(User),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Create a new User\n   *\n   * @param options - Ajax request options\n   * @returns a new User\n   */\n  public create(\n    options?: CreateAjaxOptions,\n  ): OperatorFunction<UserCreateBodyDto, User> {\n    return switchMap((createBody) => this.create$(createBody, options));\n  }\n\n  /**\n   * Count the number of User entities that matches the filter\n   *\n   * @param countQuery - Dto of the request query\n   * @param options - Ajax request options\n   * @returns the number of User\n   */\n  public count$(\n    countQuery?: UserCountQueryDto,\n    options?: CountAjaxOptions,\n  ): Observable<number> {\n    return fromDto(countQuery, UserCountQueryDto).pipe(\n      switchMap((query) =>\n        count(this.apiUrl, { ...query }, options).pipe(\n          extractAjaxResponseData(),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Count the number of User entities that matches the filter\n   *\n   * @param options - Ajax request options\n   * @returns the number of User\n   */\n  public count(\n    options?: CountAjaxOptions,\n  ): OperatorFunction<UserCountQueryDto | undefined, number> {\n    return switchMap((countQuery) => this.count$(countQuery, options));\n  }\n\n  /**\n   * Find zero or one Model that matches the filter\n   *\n   model\n   * @param findUniqueParams - Dto of the request param\n   * @param findUniqueQuery - Dto of the request query\n   * @param options - Ajax request options\n   * @returns a Model or null\n   */\n  public findUnique$(\n    findUniqueParams: UserFindUniqueParamsDto,\n    findUniqueQuery?: UserFindUniqueQueryDto,\n    options?: FindUniqueOptions,\n  ): Observable<User> {\n    return zip(\n      fromDto(findUniqueParams, UserFindUniqueParamsDto),\n      fromDto(findUniqueQuery, UserFindUniqueQueryDto),\n    ).pipe(\n      switchMap(([params, query]) =>\n        findUnique(this.apiUrl, params, { ...query }, options).pipe(\n          extractAjaxResponseData(),\n          transformAndValidateMap(User),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Count the number of User entities that matches the filter\n   *\n   * @param options - Ajax request options\n   * @returns the number of User\n   */\n  public findUnique(\n    options?: FindUniqueOptions,\n  ): OperatorFunction<\n    | { params: UserFindUniqueParamsDto; query?: UserFindUniqueQueryDto }\n    | [UserFindUniqueParamsDto, UserFindUniqueQueryDto]\n    | UserFindUniqueParamsDto,\n    User\n  > {\n    return switchMap((source) => {\n      if (Array.isArray(source))\n        return this.findUnique$(source[0], source[1], options);\n      if (isAlike(source, UserFindUniqueParamsDto))\n        return this.findUnique$(source, undefined, options);\n      return this.findUnique$(source.params, source.query, options);\n    });\n  }\n\n  /**\n   * Find zero or more Model entities that matches the filter\n   *\n   * @param findManyQuery - Dto of the request query\n   * @param options - Ajax request options\n   * @returns an array of Model entities\n   */\n  public findMany$(\n    findManyQuery?: UserFindManyQueryDto,\n    options?: FindManyOptions,\n  ): Observable<User[]> {\n    return fromDto(findManyQuery, UserFindManyQueryDto).pipe(\n      switchMap((params) =>\n        findMany(this.apiUrl, { ...params }, options).pipe(\n          extractAjaxResponseData(),\n          transformAndValidateMap(User),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Find zero or more Model entities that matches the filter\n   *\n   * @param options - Ajax request options\n   * @returns an array of Model entities\n   */\n  public findMany(\n    options?: FindManyOptions,\n  ): OperatorFunction<UserFindManyQueryDto | undefined, User[]> {\n    return switchMap((findManyQuery) => this.findMany$(findManyQuery, options));\n  }\n\n  /**\n   * Update one User\n   *\n   * @Remarks\n   *\n   * Partial updates are allowed with this method\n   *\n   * @param updateParams - Dto of the request param\n   * @param updateBody - Dto of the request body\n   * @param options - Ajax request options\n   * @returns the updated User\n   */\n  public patch$(\n    updateParams: UserUpdateParamsDto,\n    updateBody: UserUpdateBodyDto,\n    options?: PatchOptions,\n  ): Observable<User> {\n    return zip(\n      fromDto(updateParams, UserUpdateParamsDto),\n      fromDto(updateBody, UserUpdateBodyDto),\n    ).pipe(\n      switchMap(([params, body]) =>\n        patch(this.apiUrl, params, body, options).pipe(\n          extractAjaxResponseData(),\n          transformAndValidateMap(User),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * patch$ alias\n   */\n  public update$ = this.patch$.bind(this);\n\n  /**\n   * Update one User\n   *\n   * @Remarks\n   *\n   * Partial updates are allowed with this method\n   *\n   * @param updateParams - Dto of the request param\n   * @param updateBody - Dto of the request body\n   * @param options - Ajax request options\n   * @returns the updated User\n   */\n  public patch(\n    options?: PatchOptions,\n  ): OperatorFunction<\n    | { params: UserUpdateParamsDto; body: UserUpdateBodyDto }\n    | [UserUpdateParamsDto, UserUpdateBodyDto],\n    User\n  > {\n    return switchMap((source) => {\n      if (Array.isArray(source))\n        return this.patch$(source[0], source[1], options);\n      return this.patch$(source.params, source.body, options);\n    });\n  }\n\n  /**\n   * patch alias\n   */\n  public update = this.patch.bind(this);\n\n  /**\n   * Update one User\n   *\n   * @Remarks\n   *\n   * Partial updates are allowed with this method\n   *\n   * @param updateParams - Dto of the request param\n   * @param updateBody - Dto of the request body\n   * @param options - Ajax request options\n   * @returns the updated User\n   */\n  public upsert$(\n    updateParams: UserUpsertParamsDto,\n    updateBody: UserUpsertBodyDto,\n    options?: UpsertOptions,\n  ): Observable<User> {\n    return zip(\n      fromDto(updateParams, UserUpsertParamsDto),\n      fromDto(updateBody, UserUpsertBodyDto),\n    ).pipe(\n      switchMap(([params, body]) =>\n        upsert(this.apiUrl, params, body, options).pipe(\n          extractAjaxResponseData(),\n          transformAndValidateMap(User),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Update one User\n   *\n   * @Remarks\n   *\n   * Partial updates are allowed with this method\n   *\n   * @param updateParams - Dto of the request param\n   * @param updateBody - Dto of the request body\n   * @param options - Ajax request options\n   * @returns the updated User\n   */\n  public upsert(\n    options?: UpsertOptions,\n  ): OperatorFunction<\n    | { params: UserUpsertParamsDto; body: UserUpsertBodyDto }\n    | [UserUpsertParamsDto, UserUpsertBodyDto],\n    User\n  > {\n    return switchMap((source) => {\n      if (Array.isArray(source))\n        return this.upsert$(source[0], source[1], options);\n      return this.upsert$(source.params, source.body, options);\n    });\n  }\n\n  /**\n   * Delete one User\n   *\n   * @param deleteParams - Dto of the request param\n   * @param options - Ajax request options\n   * @returns the updated User\n   */\n  public remove$(\n    deleteParams: UserDeleteParamsDto,\n    options?: RemoveOptions,\n  ): Observable<User> {\n    return fromDto(deleteParams, UserDeleteParamsDto).pipe(\n      switchMap((params) =>\n        remove(this.apiUrl, { ...params }, options).pipe(\n          extractAjaxResponseData(),\n          transformAndValidateMap(User),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * remove$ alias\n   */\n  public delete$ = this.remove$.bind(this);\n\n  /**\n   * Delete one User\n   *\n   * @param deleteParams - Dto of the request param\n   * @param options - Ajax request options\n   * @returns the updated User\n   */\n  public remove(\n    options?: RemoveOptions,\n  ): OperatorFunction<UserDeleteParamsDto, User> {\n    return switchMap((removeParams) => this.remove$(removeParams, options));\n  }\n\n  /**\n   * remove alias\n   */\n  public delete = this.remove.bind(this);\n}\n\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "apiUrl",
            "type": "string | URL"
          }
        ],
        "line": 40,
        "jsdoctags": [
          {
            "name": "apiUrl",
            "type": "string | URL",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "apiUrl",
          "type": "URL",
          "optional": false,
          "description": "",
          "line": 40,
          "modifierKind": [114]
        },
        {
          "name": "delete",
          "defaultValue": "this.remove.bind(this)",
          "type": "",
          "optional": false,
          "description": "<p>remove alias</p>\n",
          "line": 358,
          "modifierKind": [114]
        },
        {
          "name": "delete$",
          "defaultValue": "this.remove$.bind(this)",
          "type": "",
          "optional": false,
          "description": "<p>remove$ alias</p>\n",
          "line": 340,
          "modifierKind": [114]
        },
        {
          "name": "update",
          "defaultValue": "this.patch.bind(this)",
          "type": "",
          "optional": false,
          "description": "<p>patch alias</p>\n",
          "line": 258,
          "modifierKind": [114]
        },
        {
          "name": "update$",
          "defaultValue": "this.patch$.bind(this)",
          "type": "",
          "optional": false,
          "description": "<p>patch$ alias</p>\n",
          "line": 227,
          "modifierKind": [114]
        }
      ],
      "methods": [
        {
          "name": "count",
          "args": [
            {
              "name": "options",
              "type": "CountAjaxOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<UserCountQueryDto | undefined, number>",
          "typeParameters": [],
          "line": 105,
          "description": "<p>Count the number of User entities that matches the filter</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 2279,
                "end": 2286,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "CountAjaxOptions",
              "optional": true,
              "tagName": {
                "pos": 2273,
                "end": 2278,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 2316,
                "end": 2323,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the number of User</p>\n"
            }
          ]
        },
        {
          "name": "count$",
          "args": [
            {
              "name": "countQuery",
              "type": "UserCountQueryDto",
              "optional": true
            },
            {
              "name": "options",
              "type": "CountAjaxOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<number>",
          "typeParameters": [],
          "line": 86,
          "description": "<p>Count the number of User entities that matches the filter</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 1754,
                "end": 1764,
                "flags": 0,
                "escapedText": "countQuery"
              },
              "type": "UserCountQueryDto",
              "optional": true,
              "tagName": {
                "pos": 1748,
                "end": 1753,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request query</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 1804,
                "end": 1811,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "CountAjaxOptions",
              "optional": true,
              "tagName": {
                "pos": 1798,
                "end": 1803,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 1841,
                "end": 1848,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the number of User</p>\n"
            }
          ]
        },
        {
          "name": "create",
          "args": [
            {
              "name": "options",
              "type": "CreateAjaxOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<UserCreateBodyDto, User>",
          "typeParameters": [],
          "line": 73,
          "description": "<p>Create a new User</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 1429,
                "end": 1436,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "CreateAjaxOptions",
              "optional": true,
              "tagName": {
                "pos": 1423,
                "end": 1428,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 1466,
                "end": 1473,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>a new User</p>\n"
            }
          ]
        },
        {
          "name": "create$",
          "args": [
            {
              "name": "createBody",
              "type": "UserCreateBodyDto"
            },
            {
              "name": "options",
              "type": "CreateAjaxOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<User>",
          "typeParameters": [],
          "line": 53,
          "description": "<p>Create a new User</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 921,
                "end": 931,
                "flags": 0,
                "escapedText": "createBody"
              },
              "type": "UserCreateBodyDto",
              "tagName": {
                "pos": 915,
                "end": 920,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request body</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 970,
                "end": 977,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "CreateAjaxOptions",
              "optional": true,
              "tagName": {
                "pos": 964,
                "end": 969,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 1007,
                "end": 1014,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>a new User</p>\n"
            }
          ]
        },
        {
          "name": "findMany",
          "args": [
            {
              "name": "options",
              "type": "FindManyOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<UserFindManyQueryDto | undefined, User[]>",
          "typeParameters": [],
          "line": 188,
          "description": "<p>Find zero or more Model entities that matches the filter</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 4745,
                "end": 4752,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "FindManyOptions",
              "optional": true,
              "tagName": {
                "pos": 4739,
                "end": 4744,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 4782,
                "end": 4789,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>an array of Model entities</p>\n"
            }
          ]
        },
        {
          "name": "findMany$",
          "args": [
            {
              "name": "findManyQuery",
              "type": "UserFindManyQueryDto",
              "optional": true
            },
            {
              "name": "options",
              "type": "FindManyOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<User[]>",
          "typeParameters": [],
          "line": 168,
          "description": "<p>Find zero or more Model entities that matches the filter</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 4150,
                "end": 4163,
                "flags": 0,
                "escapedText": "findManyQuery"
              },
              "type": "UserFindManyQueryDto",
              "optional": true,
              "tagName": {
                "pos": 4144,
                "end": 4149,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request query</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 4203,
                "end": 4210,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "FindManyOptions",
              "optional": true,
              "tagName": {
                "pos": 4197,
                "end": 4202,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 4240,
                "end": 4247,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>an array of Model entities</p>\n"
            }
          ]
        },
        {
          "name": "findUnique",
          "args": [
            {
              "name": "options",
              "type": "FindUniqueOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<literal type |  | UserFindUniqueParamsDto, User>",
          "typeParameters": [],
          "line": 144,
          "description": "<p>Count the number of User entities that matches the filter</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 3415,
                "end": 3422,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "FindUniqueOptions",
              "optional": true,
              "tagName": {
                "pos": 3409,
                "end": 3414,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 3452,
                "end": 3459,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the number of User</p>\n"
            }
          ]
        },
        {
          "name": "findUnique$",
          "args": [
            {
              "name": "findUniqueParams",
              "type": "UserFindUniqueParamsDto"
            },
            {
              "name": "findUniqueQuery",
              "type": "UserFindUniqueQueryDto",
              "optional": true
            },
            {
              "name": "options",
              "type": "FindUniqueOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<User>",
          "typeParameters": [],
          "line": 120,
          "description": "<p>Find zero or one Model that matches the filter</p>\n<p>model</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 2621,
                "end": 2637,
                "flags": 0,
                "escapedText": "findUniqueParams"
              },
              "type": "UserFindUniqueParamsDto",
              "tagName": {
                "pos": 2615,
                "end": 2620,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request param</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 2677,
                "end": 2692,
                "flags": 0,
                "escapedText": "findUniqueQuery"
              },
              "type": "UserFindUniqueQueryDto",
              "optional": true,
              "tagName": {
                "pos": 2671,
                "end": 2676,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request query</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 2732,
                "end": 2739,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "FindUniqueOptions",
              "optional": true,
              "tagName": {
                "pos": 2726,
                "end": 2731,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 2769,
                "end": 2776,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>a Model or null</p>\n"
            }
          ]
        },
        {
          "name": "patch",
          "args": [
            {
              "name": "options",
              "type": "PatchOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<literal type | , User>",
          "typeParameters": [],
          "line": 241,
          "description": "<p>Update one User</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 6074,
                "end": 6081,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "PatchOptions",
              "optional": true,
              "tagName": {
                "pos": 6068,
                "end": 6073,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 6111,
                "end": 6118,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated User</p>\n"
            }
          ]
        },
        {
          "name": "patch$",
          "args": [
            {
              "name": "updateParams",
              "type": "UserUpdateParamsDto"
            },
            {
              "name": "updateBody",
              "type": "UserUpdateBodyDto"
            },
            {
              "name": "options",
              "type": "PatchOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<User>",
          "typeParameters": [],
          "line": 206,
          "description": "<p>Update one User</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 5143,
                "end": 5155,
                "flags": 0,
                "escapedText": "updateParams"
              },
              "type": "UserUpdateParamsDto",
              "tagName": {
                "pos": 5137,
                "end": 5142,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request param</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 5195,
                "end": 5205,
                "flags": 0,
                "escapedText": "updateBody"
              },
              "type": "UserUpdateBodyDto",
              "tagName": {
                "pos": 5189,
                "end": 5194,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request body</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 5244,
                "end": 5251,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "PatchOptions",
              "optional": true,
              "tagName": {
                "pos": 5238,
                "end": 5243,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 5281,
                "end": 5288,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated User</p>\n"
            }
          ]
        },
        {
          "name": "remove",
          "args": [
            {
              "name": "options",
              "type": "RemoveOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<UserDeleteParamsDto, User>",
          "typeParameters": [],
          "line": 349,
          "description": "<p>Delete one User</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 8757,
                "end": 8764,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "RemoveOptions",
              "optional": true,
              "tagName": {
                "pos": 8751,
                "end": 8756,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 8794,
                "end": 8801,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated User</p>\n"
            }
          ]
        },
        {
          "name": "remove$",
          "args": [
            {
              "name": "deleteParams",
              "type": "UserDeleteParamsDto"
            },
            {
              "name": "options",
              "type": "RemoveOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<User>",
          "typeParameters": [],
          "line": 323,
          "description": "<p>Delete one User</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 8099,
                "end": 8111,
                "flags": 0,
                "escapedText": "deleteParams"
              },
              "type": "UserDeleteParamsDto",
              "tagName": {
                "pos": 8093,
                "end": 8098,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request param</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 8151,
                "end": 8158,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "RemoveOptions",
              "optional": true,
              "tagName": {
                "pos": 8145,
                "end": 8150,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 8188,
                "end": 8195,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated User</p>\n"
            }
          ]
        },
        {
          "name": "upsert",
          "args": [
            {
              "name": "options",
              "type": "UpsertOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<literal type | , User>",
          "typeParameters": [],
          "line": 302,
          "description": "<p>Update one User</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 7587,
                "end": 7594,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "UpsertOptions",
              "optional": true,
              "tagName": {
                "pos": 7581,
                "end": 7586,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 7624,
                "end": 7631,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated User</p>\n"
            }
          ]
        },
        {
          "name": "upsert$",
          "args": [
            {
              "name": "updateParams",
              "type": "UserUpsertParamsDto"
            },
            {
              "name": "updateBody",
              "type": "UserUpsertBodyDto"
            },
            {
              "name": "options",
              "type": "UpsertOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<User>",
          "typeParameters": [],
          "line": 272,
          "description": "<p>Update one User</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 6727,
                "end": 6739,
                "flags": 0,
                "escapedText": "updateParams"
              },
              "type": "UserUpsertParamsDto",
              "tagName": {
                "pos": 6721,
                "end": 6726,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request param</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 6779,
                "end": 6789,
                "flags": 0,
                "escapedText": "updateBody"
              },
              "type": "UserUpsertBodyDto",
              "tagName": {
                "pos": 6773,
                "end": 6778,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request body</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 6828,
                "end": 6835,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "UpsertOptions",
              "optional": true,
              "tagName": {
                "pos": 6822,
                "end": 6827,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 6865,
                "end": 6872,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated User</p>\n"
            }
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "UserUpdateBodyDto",
      "id": "class-UserUpdateBodyDto-fbec29a5be7e3fa29f0132d583fbd863",
      "file": "generated/rest-dtos/dtos/user/user-update-body.dto.ts",
      "type": "class",
      "sourceCode": "import {  \n  IsBoolean, \n  IsEmail, \n  IsIn,\n  IsNumber,\n  IsDate,\n  IsOptional,\n  IsString,\n  Matches, \n} from 'class-validator';\n\nimport {\n  UserGender,\n} from '@generated/models';\n\nexport class UserUpdateBodyDto {\n  @IsString() \n  @IsOptional()\n  name?: string;\n\n  @IsString() \n  @IsEmail({}, ) \n  @IsOptional()\n  email?: string;\n\n  @IsString() \n  @Matches(/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{8,}$/, ) \n  @IsOptional()\n  password?: string;\n\n  @IsString() \n  @IsOptional()\n  role?: string;\n\n  @IsBoolean() \n  @IsOptional()\n  banned?: boolean;\n\n  @IsNumber({}, )\n  @IsDate({}, )\n  @IsOptional()\n  lastConnectedAt?: Date;\n\n  @IsString() \n  @IsIn(Object.values(UserGender),) \n  @IsOptional()\n  gender?: UserGender;\n\n}\n",
      "properties": [
        {
          "name": "banned",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 38,
          "decorators": [
            {
              "name": "IsBoolean",
              "stringifiedArguments": ""
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "email",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 25,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsEmail",
              "stringifiedArguments": "{}"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "gender",
          "type": "UserGender",
          "optional": true,
          "description": "",
          "line": 48,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsIn",
              "stringifiedArguments": "undefined"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "lastConnectedAt",
          "type": "Date",
          "optional": true,
          "description": "",
          "line": 43,
          "decorators": [
            {
              "name": "IsNumber",
              "stringifiedArguments": "{}"
            },
            {
              "name": "IsDate",
              "stringifiedArguments": "{}"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "name",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 20,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "password",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 30,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "Matches",
              "stringifiedArguments": "/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{8,}$/"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "role",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 34,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "UserUpdateParamsDto",
      "id": "class-UserUpdateParamsDto-ef6901ebbb7cb5bde86b6fa50b5f02c9",
      "file": "generated/rest-dtos/dtos/user/user-update-params.dto.ts",
      "type": "class",
      "sourceCode": "import {\n  IsString,\n  IsUUID,\n} from 'class-validator';\n\nexport class UserUpdateParamsDto {\n  @IsString()\n  @IsUUID()\n  id!: string;\n}\n",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "UserUpsertBodyDto",
      "id": "class-UserUpsertBodyDto-20804f38a79ac3e64f471efbb4d1a415",
      "file": "generated/rest-dtos/dtos/user/user-upsert-body.dto.ts",
      "type": "class",
      "sourceCode": "import {  \n  IsBoolean, \n  IsEmail, \n  IsIn,\n  IsNumber,\n  IsDate,\n  IsOptional,\n  IsString,\n  Matches, \n} from 'class-validator';\n\nimport {\n  UserGender,\n} from '@generated/models';\n\nexport class UserUpsertBodyDto {\n  @IsString() \n  name!: string;\n\n  @IsString() \n  @IsEmail({}, ) \n  email!: string;\n\n  @IsString() \n  @Matches(/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{8,}$/, ) \n  password!: string;\n\n  @IsString() \n  role!: string;\n\n  @IsBoolean() \n  banned!: boolean;\n\n  @IsNumber({}, )\n  @IsDate({}, )\n  @IsOptional()\n  lastConnectedAt?: Date;\n\n  @IsString() \n  @IsIn(Object.values(UserGender),) \n  gender!: UserGender;\n\n}\n",
      "properties": [
        {
          "name": "banned",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 33,
          "decorators": [
            {
              "name": "IsBoolean",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "email",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 23,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsEmail",
              "stringifiedArguments": "{}"
            }
          ]
        },
        {
          "name": "gender",
          "type": "UserGender",
          "optional": false,
          "description": "",
          "line": 42,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsIn",
              "stringifiedArguments": "undefined"
            }
          ]
        },
        {
          "name": "lastConnectedAt",
          "type": "Date",
          "optional": true,
          "description": "",
          "line": 38,
          "decorators": [
            {
              "name": "IsNumber",
              "stringifiedArguments": "{}"
            },
            {
              "name": "IsDate",
              "stringifiedArguments": "{}"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "name",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 19,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "password",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 27,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "Matches",
              "stringifiedArguments": "/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{8,}$/"
            }
          ]
        },
        {
          "name": "role",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 30,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "UserUpsertParamsDto",
      "id": "class-UserUpsertParamsDto-5f47f148dc2bbae9fc8bce36fe6db15e",
      "file": "generated/rest-dtos/dtos/user/user-upsert-params.dto.ts",
      "type": "class",
      "sourceCode": "import {\n  IsString,\n  IsUUID,\n} from 'class-validator';\n\nexport class UserUpsertParamsDto {\n  @IsString()\n  @IsUUID()\n  id!: string;\n}\n",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "Variable",
      "id": "class-Variable-c26549cf2ea739bcfe7e25de0b7f68d4",
      "file": "generated/models/models/variable.ts",
      "type": "class",
      "sourceCode": "import {  \n  IsString,\n  IsUUID,\n  ValidateNested,\n} from 'class-validator';\n\nimport { OpenQuestion } from './open-question';\nimport { Answer } from './answer';\n\nimport { Variable as PrismaVariable } from '@prisma/client';\n\nexport class Variable implements PrismaVariable {\n  @IsString() \n  @IsUUID(\"all\", ) \n  id!: string;\n\n  @IsString() \n  value!: string;\n\n  @ValidateNested() \n  openQuestion?: OpenQuestion;\n\n  @ValidateNested() \n  answer?: Answer;\n\n  @IsString() \n  @IsUUID(\"all\") \n  openQuestionId!: string;\n\n  @IsString() \n  @IsUUID(\"all\") \n  answerId!: string;\n\n}\n",
      "properties": [
        {
          "name": "answer",
          "type": "Answer",
          "optional": true,
          "description": "",
          "line": 25,
          "decorators": [
            {
              "name": "ValidateNested",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "answerId",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 33,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": "'all'"
            }
          ]
        },
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 16,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": "'all'"
            }
          ]
        },
        {
          "name": "openQuestion",
          "type": "OpenQuestion",
          "optional": true,
          "description": "",
          "line": 22,
          "decorators": [
            {
              "name": "ValidateNested",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "openQuestionId",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 29,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": "'all'"
            }
          ]
        },
        {
          "name": "value",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 19,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "implements": ["PrismaVariable"]
    },
    {
      "name": "VariableCountQueryDto",
      "id": "class-VariableCountQueryDto-902112de9653d15c3b5cc5a9e228187f",
      "file": "generated/rest-dtos/dtos/variable/variable-count-query.dto.ts",
      "type": "class",
      "sourceCode": "import {\n\n  IsOptional,\n  IsString,\n} from 'class-validator';\n\n \nexport class VariableCountQueryDto {\n  @IsString() \n  @IsOptional()\n  id?: string;\n\n}\n",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 12,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "VariableCreateBodyDto",
      "id": "class-VariableCreateBodyDto-4cb60e20f7646302447be616fc7b08e0",
      "file": "generated/rest-dtos/dtos/variable/variable-create-body.dto.ts",
      "type": "class",
      "sourceCode": "import {  \n  IsString,\n  IsUUID,\n} from 'class-validator';\n\n \nexport class VariableCreateBodyDto {\n  @IsString() \n  value!: string;\n\n  @IsString() \n  @IsUUID(\"all\", ) \n  openQuestion!: string;\n\n  @IsString() \n  @IsUUID(\"all\", ) \n  answer!: string;\n\n}\n",
      "properties": [
        {
          "name": "answer",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 18,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": "'all'"
            }
          ]
        },
        {
          "name": "openQuestion",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 14,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": "'all'"
            }
          ]
        },
        {
          "name": "value",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "VariableDeleteParamsDto",
      "id": "class-VariableDeleteParamsDto-a31456f9f6327d0b87a1f70030c1b3f1",
      "file": "generated/rest-dtos/dtos/variable/variable-delete-params.dto.ts",
      "type": "class",
      "sourceCode": "import {\n  IsString,\n  IsUUID,\n} from 'class-validator';\n\nexport class VariableDeleteParamsDto {\n  @IsString()\n  @IsUUID()\n  id!: string;\n}\n",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "VariableFindManyQueryDto",
      "id": "class-VariableFindManyQueryDto-96c7de1ba3241df485d6aa09f0d9db9a",
      "file": "generated/rest-dtos/dtos/variable/variable-find-many-query.dto.ts",
      "type": "class",
      "sourceCode": "import {\n  IsIn,\n  IsInt,\n  IsNumber,\n  IsOptional,\n  IsString,\n\n  Min,\n} from 'class-validator';\n\nimport {\n  VariableInclude,\n  SortOrder,\n  Variable,\n} from '@generated/models';\n\nexport class VariableFindManyQueryDto {\n  @IsString() \n  @IsOptional()\n  id?: string;\n\n  @IsString({ each: true })\n  @IsIn(VariableInclude, { each: true })\n  @IsOptional()\n  populate?: VariableInclude[];\n\n  @IsOptional()\n  @IsString()\n  @IsIn([\n    'id',\n  ]) \n  sort: keyof Variable = 'id';\n\n  @IsOptional()\n  @IsIn(Object.values(SortOrder)) \n  order: SortOrder = 'asc';\n\n  @IsOptional()\n  @IsNumber()\n  @IsInt()\n  @Min(1)\n  take = 100;\n\n  @IsOptional()\n  @IsNumber()\n  @IsInt()\n  @Min(0)\n  skip = 0;\n}\n",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 20,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "order",
          "defaultValue": "'asc'",
          "type": "SortOrder",
          "optional": false,
          "description": "",
          "line": 36,
          "decorators": [
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            },
            {
              "name": "IsIn",
              "stringifiedArguments": "undefined"
            }
          ]
        },
        {
          "name": "populate",
          "type": "VariableInclude[]",
          "optional": true,
          "description": "",
          "line": 25,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": "{each: true}"
            },
            {
              "name": "IsIn",
              "stringifiedArguments": "VariableInclude, {each: true}"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "skip",
          "defaultValue": "0",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 48,
          "decorators": [
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            },
            {
              "name": "IsNumber",
              "stringifiedArguments": ""
            },
            {
              "name": "IsInt",
              "stringifiedArguments": ""
            },
            {
              "name": "Min",
              "stringifiedArguments": "0"
            }
          ]
        },
        {
          "name": "sort",
          "defaultValue": "'id'",
          "type": "",
          "optional": false,
          "description": "",
          "line": 32,
          "decorators": [
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            },
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsIn",
              "stringifiedArguments": "undefined"
            }
          ]
        },
        {
          "name": "take",
          "defaultValue": "100",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 42,
          "decorators": [
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            },
            {
              "name": "IsNumber",
              "stringifiedArguments": ""
            },
            {
              "name": "IsInt",
              "stringifiedArguments": ""
            },
            {
              "name": "Min",
              "stringifiedArguments": "1"
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "VariableFindUniqueParamsDto",
      "id": "class-VariableFindUniqueParamsDto-990a0267041a48707d67c5eeb028b9b3",
      "file": "generated/rest-dtos/dtos/variable/variable-find-unique-params.dto.ts",
      "type": "class",
      "sourceCode": "import {\n  IsString,\n  IsUUID,\n} from 'class-validator';\n\nexport class VariableFindUniqueParamsDto {\n  @IsString()\n  @IsUUID()\n  id!: string;\n}\n",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "VariableFindUniqueQueryDto",
      "id": "class-VariableFindUniqueQueryDto-d33e817f0c4d9c35d5e7458e8c2dbf65",
      "file": "generated/rest-dtos/dtos/variable/variable-find-unique-query.dto.ts",
      "type": "class",
      "sourceCode": "import {\n  IsIn,\n  IsOptional,\n  IsString,\n} from 'class-validator';\n\nimport { VariableInclude } from '@generated/models';\nexport class VariableFindUniqueQueryDto {\n  @IsString({ each: true })\n  @IsIn(VariableInclude,\n    { each: true }\n  )\n  @IsOptional()\n  populate?: VariableInclude[];\n}\n",
      "properties": [
        {
          "name": "populate",
          "type": "VariableInclude[]",
          "optional": true,
          "description": "",
          "line": 15,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": "{each: true}"
            },
            {
              "name": "IsIn",
              "stringifiedArguments": "VariableInclude, {each: true}"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "VariableService",
      "id": "class-VariableService-6f15cad08e6de57f3a010a8b012711a7",
      "file": "generated/rext-client/services/variable.service.ts",
      "type": "class",
      "sourceCode": "import { Observable, OperatorFunction, zip } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\nimport {\n  count,\n  CountAjaxOptions,\n  create,\n  CreateAjaxOptions,\n  extractAjaxResponseData,\n  findMany,\n  FindManyOptions,\n  findUnique,\n  FindUniqueOptions,\n  fromDto,\n  isAlike,\n  patch,\n  PatchOptions,\n  remove,\n  RemoveOptions,\n  transformAndValidateMap,\n  upsert,\n  UpsertOptions,\n} from '../helpers';\n\nimport { Variable } from '@generated/models';\nimport {\n  VariableCountQueryDto,\n  VariableCreateBodyDto,\n  VariableDeleteParamsDto,\n  VariableFindManyQueryDto,\n  VariableFindUniqueParamsDto,\n  VariableFindUniqueQueryDto,\n  VariableUpdateBodyDto,\n  VariableUpdateParamsDto,\n  VariableUpsertBodyDto,\n  VariableUpsertParamsDto,\n} from '@generated/rest-dtos';\n\nexport class VariableService {\n  public apiUrl: URL;\n\n  constructor(apiUrl: string | URL) {\n    this.apiUrl = new URL('variable', apiUrl.toString());\n  }\n\n  /**\n   * Create a new Variable\n   *\n   * @param createBody - Dto of the request body\n   * @param options - Ajax request options\n   * @returns a new Variable\n   */\n  public create$(\n    createBody: VariableCreateBodyDto,\n    options?: CreateAjaxOptions,\n  ): Observable<Variable> {\n    return fromDto(createBody, VariableCreateBodyDto).pipe(\n      switchMap((body) =>\n        create(this.apiUrl, body, options).pipe(\n          extractAjaxResponseData(),\n          transformAndValidateMap(Variable),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Create a new Variable\n   *\n   * @param options - Ajax request options\n   * @returns a new Variable\n   */\n  public create(\n    options?: CreateAjaxOptions,\n  ): OperatorFunction<VariableCreateBodyDto, Variable> {\n    return switchMap((createBody) => this.create$(createBody, options));\n  }\n\n  /**\n   * Count the number of Variable entities that matches the filter\n   *\n   * @param countQuery - Dto of the request query\n   * @param options - Ajax request options\n   * @returns the number of Variable\n   */\n  public count$(\n    countQuery?: VariableCountQueryDto,\n    options?: CountAjaxOptions,\n  ): Observable<number> {\n    return fromDto(countQuery, VariableCountQueryDto).pipe(\n      switchMap((query) =>\n        count(this.apiUrl, { ...query }, options).pipe(\n          extractAjaxResponseData(),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Count the number of Variable entities that matches the filter\n   *\n   * @param options - Ajax request options\n   * @returns the number of Variable\n   */\n  public count(\n    options?: CountAjaxOptions,\n  ): OperatorFunction<VariableCountQueryDto | undefined, number> {\n    return switchMap((countQuery) => this.count$(countQuery, options));\n  }\n\n  /**\n   * Find zero or one Model that matches the filter\n   *\n   model\n   * @param findUniqueParams - Dto of the request param\n   * @param findUniqueQuery - Dto of the request query\n   * @param options - Ajax request options\n   * @returns a Model or null\n   */\n  public findUnique$(\n    findUniqueParams: VariableFindUniqueParamsDto,\n    findUniqueQuery?: VariableFindUniqueQueryDto,\n    options?: FindUniqueOptions,\n  ): Observable<Variable> {\n    return zip(\n      fromDto(findUniqueParams, VariableFindUniqueParamsDto),\n      fromDto(findUniqueQuery, VariableFindUniqueQueryDto),\n    ).pipe(\n      switchMap(([params, query]) =>\n        findUnique(this.apiUrl, params, { ...query }, options).pipe(\n          extractAjaxResponseData(),\n          transformAndValidateMap(Variable),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Count the number of Variable entities that matches the filter\n   *\n   * @param options - Ajax request options\n   * @returns the number of Variable\n   */\n  public findUnique(\n    options?: FindUniqueOptions,\n  ): OperatorFunction<\n    | { params: VariableFindUniqueParamsDto; query?: VariableFindUniqueQueryDto }\n    | [VariableFindUniqueParamsDto, VariableFindUniqueQueryDto]\n    | VariableFindUniqueParamsDto,\n    Variable\n  > {\n    return switchMap((source) => {\n      if (Array.isArray(source))\n        return this.findUnique$(source[0], source[1], options);\n      if (isAlike(source, VariableFindUniqueParamsDto))\n        return this.findUnique$(source, undefined, options);\n      return this.findUnique$(source.params, source.query, options);\n    });\n  }\n\n  /**\n   * Find zero or more Model entities that matches the filter\n   *\n   * @param findManyQuery - Dto of the request query\n   * @param options - Ajax request options\n   * @returns an array of Model entities\n   */\n  public findMany$(\n    findManyQuery?: VariableFindManyQueryDto,\n    options?: FindManyOptions,\n  ): Observable<Variable[]> {\n    return fromDto(findManyQuery, VariableFindManyQueryDto).pipe(\n      switchMap((params) =>\n        findMany(this.apiUrl, { ...params }, options).pipe(\n          extractAjaxResponseData(),\n          transformAndValidateMap(Variable),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Find zero or more Model entities that matches the filter\n   *\n   * @param options - Ajax request options\n   * @returns an array of Model entities\n   */\n  public findMany(\n    options?: FindManyOptions,\n  ): OperatorFunction<VariableFindManyQueryDto | undefined, Variable[]> {\n    return switchMap((findManyQuery) => this.findMany$(findManyQuery, options));\n  }\n\n  /**\n   * Update one Variable\n   *\n   * @Remarks\n   *\n   * Partial updates are allowed with this method\n   *\n   * @param updateParams - Dto of the request param\n   * @param updateBody - Dto of the request body\n   * @param options - Ajax request options\n   * @returns the updated Variable\n   */\n  public patch$(\n    updateParams: VariableUpdateParamsDto,\n    updateBody: VariableUpdateBodyDto,\n    options?: PatchOptions,\n  ): Observable<Variable> {\n    return zip(\n      fromDto(updateParams, VariableUpdateParamsDto),\n      fromDto(updateBody, VariableUpdateBodyDto),\n    ).pipe(\n      switchMap(([params, body]) =>\n        patch(this.apiUrl, params, body, options).pipe(\n          extractAjaxResponseData(),\n          transformAndValidateMap(Variable),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * patch$ alias\n   */\n  public update$ = this.patch$.bind(this);\n\n  /**\n   * Update one Variable\n   *\n   * @Remarks\n   *\n   * Partial updates are allowed with this method\n   *\n   * @param updateParams - Dto of the request param\n   * @param updateBody - Dto of the request body\n   * @param options - Ajax request options\n   * @returns the updated Variable\n   */\n  public patch(\n    options?: PatchOptions,\n  ): OperatorFunction<\n    | { params: VariableUpdateParamsDto; body: VariableUpdateBodyDto }\n    | [VariableUpdateParamsDto, VariableUpdateBodyDto],\n    Variable\n  > {\n    return switchMap((source) => {\n      if (Array.isArray(source))\n        return this.patch$(source[0], source[1], options);\n      return this.patch$(source.params, source.body, options);\n    });\n  }\n\n  /**\n   * patch alias\n   */\n  public update = this.patch.bind(this);\n\n  /**\n   * Update one Variable\n   *\n   * @Remarks\n   *\n   * Partial updates are allowed with this method\n   *\n   * @param updateParams - Dto of the request param\n   * @param updateBody - Dto of the request body\n   * @param options - Ajax request options\n   * @returns the updated Variable\n   */\n  public upsert$(\n    updateParams: VariableUpsertParamsDto,\n    updateBody: VariableUpsertBodyDto,\n    options?: UpsertOptions,\n  ): Observable<Variable> {\n    return zip(\n      fromDto(updateParams, VariableUpsertParamsDto),\n      fromDto(updateBody, VariableUpsertBodyDto),\n    ).pipe(\n      switchMap(([params, body]) =>\n        upsert(this.apiUrl, params, body, options).pipe(\n          extractAjaxResponseData(),\n          transformAndValidateMap(Variable),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Update one Variable\n   *\n   * @Remarks\n   *\n   * Partial updates are allowed with this method\n   *\n   * @param updateParams - Dto of the request param\n   * @param updateBody - Dto of the request body\n   * @param options - Ajax request options\n   * @returns the updated Variable\n   */\n  public upsert(\n    options?: UpsertOptions,\n  ): OperatorFunction<\n    | { params: VariableUpsertParamsDto; body: VariableUpsertBodyDto }\n    | [VariableUpsertParamsDto, VariableUpsertBodyDto],\n    Variable\n  > {\n    return switchMap((source) => {\n      if (Array.isArray(source))\n        return this.upsert$(source[0], source[1], options);\n      return this.upsert$(source.params, source.body, options);\n    });\n  }\n\n  /**\n   * Delete one Variable\n   *\n   * @param deleteParams - Dto of the request param\n   * @param options - Ajax request options\n   * @returns the updated Variable\n   */\n  public remove$(\n    deleteParams: VariableDeleteParamsDto,\n    options?: RemoveOptions,\n  ): Observable<Variable> {\n    return fromDto(deleteParams, VariableDeleteParamsDto).pipe(\n      switchMap((params) =>\n        remove(this.apiUrl, { ...params }, options).pipe(\n          extractAjaxResponseData(),\n          transformAndValidateMap(Variable),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * remove$ alias\n   */\n  public delete$ = this.remove$.bind(this);\n\n  /**\n   * Delete one Variable\n   *\n   * @param deleteParams - Dto of the request param\n   * @param options - Ajax request options\n   * @returns the updated Variable\n   */\n  public remove(\n    options?: RemoveOptions,\n  ): OperatorFunction<VariableDeleteParamsDto, Variable> {\n    return switchMap((removeParams) => this.remove$(removeParams, options));\n  }\n\n  /**\n   * remove alias\n   */\n  public delete = this.remove.bind(this);\n}\n\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "apiUrl",
            "type": "string | URL"
          }
        ],
        "line": 40,
        "jsdoctags": [
          {
            "name": "apiUrl",
            "type": "string | URL",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "apiUrl",
          "type": "URL",
          "optional": false,
          "description": "",
          "line": 40,
          "modifierKind": [114]
        },
        {
          "name": "delete",
          "defaultValue": "this.remove.bind(this)",
          "type": "",
          "optional": false,
          "description": "<p>remove alias</p>\n",
          "line": 358,
          "modifierKind": [114]
        },
        {
          "name": "delete$",
          "defaultValue": "this.remove$.bind(this)",
          "type": "",
          "optional": false,
          "description": "<p>remove$ alias</p>\n",
          "line": 340,
          "modifierKind": [114]
        },
        {
          "name": "update",
          "defaultValue": "this.patch.bind(this)",
          "type": "",
          "optional": false,
          "description": "<p>patch alias</p>\n",
          "line": 258,
          "modifierKind": [114]
        },
        {
          "name": "update$",
          "defaultValue": "this.patch$.bind(this)",
          "type": "",
          "optional": false,
          "description": "<p>patch$ alias</p>\n",
          "line": 227,
          "modifierKind": [114]
        }
      ],
      "methods": [
        {
          "name": "count",
          "args": [
            {
              "name": "options",
              "type": "CountAjaxOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<VariableCountQueryDto | undefined, number>",
          "typeParameters": [],
          "line": 105,
          "description": "<p>Count the number of Variable entities that matches the filter</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 2391,
                "end": 2398,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "CountAjaxOptions",
              "optional": true,
              "tagName": {
                "pos": 2385,
                "end": 2390,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 2428,
                "end": 2435,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the number of Variable</p>\n"
            }
          ]
        },
        {
          "name": "count$",
          "args": [
            {
              "name": "countQuery",
              "type": "VariableCountQueryDto",
              "optional": true
            },
            {
              "name": "options",
              "type": "CountAjaxOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<number>",
          "typeParameters": [],
          "line": 86,
          "description": "<p>Count the number of Variable entities that matches the filter</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 1850,
                "end": 1860,
                "flags": 0,
                "escapedText": "countQuery"
              },
              "type": "VariableCountQueryDto",
              "optional": true,
              "tagName": {
                "pos": 1844,
                "end": 1849,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request query</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 1900,
                "end": 1907,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "CountAjaxOptions",
              "optional": true,
              "tagName": {
                "pos": 1894,
                "end": 1899,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 1937,
                "end": 1944,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the number of Variable</p>\n"
            }
          ]
        },
        {
          "name": "create",
          "args": [
            {
              "name": "options",
              "type": "CreateAjaxOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<VariableCreateBodyDto, Variable>",
          "typeParameters": [],
          "line": 73,
          "description": "<p>Create a new Variable</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 1509,
                "end": 1516,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "CreateAjaxOptions",
              "optional": true,
              "tagName": {
                "pos": 1503,
                "end": 1508,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 1546,
                "end": 1553,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>a new Variable</p>\n"
            }
          ]
        },
        {
          "name": "create$",
          "args": [
            {
              "name": "createBody",
              "type": "VariableCreateBodyDto"
            },
            {
              "name": "options",
              "type": "CreateAjaxOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<Variable>",
          "typeParameters": [],
          "line": 53,
          "description": "<p>Create a new Variable</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 977,
                "end": 987,
                "flags": 0,
                "escapedText": "createBody"
              },
              "type": "VariableCreateBodyDto",
              "tagName": {
                "pos": 971,
                "end": 976,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request body</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 1026,
                "end": 1033,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "CreateAjaxOptions",
              "optional": true,
              "tagName": {
                "pos": 1020,
                "end": 1025,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 1063,
                "end": 1070,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>a new Variable</p>\n"
            }
          ]
        },
        {
          "name": "findMany",
          "args": [
            {
              "name": "options",
              "type": "FindManyOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<VariableFindManyQueryDto | undefined, Variable[]>",
          "typeParameters": [],
          "line": 188,
          "description": "<p>Find zero or more Model entities that matches the filter</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 4941,
                "end": 4948,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "FindManyOptions",
              "optional": true,
              "tagName": {
                "pos": 4935,
                "end": 4940,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 4978,
                "end": 4985,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>an array of Model entities</p>\n"
            }
          ]
        },
        {
          "name": "findMany$",
          "args": [
            {
              "name": "findManyQuery",
              "type": "VariableFindManyQueryDto",
              "optional": true
            },
            {
              "name": "options",
              "type": "FindManyOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<Variable[]>",
          "typeParameters": [],
          "line": 168,
          "description": "<p>Find zero or more Model entities that matches the filter</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 4330,
                "end": 4343,
                "flags": 0,
                "escapedText": "findManyQuery"
              },
              "type": "VariableFindManyQueryDto",
              "optional": true,
              "tagName": {
                "pos": 4324,
                "end": 4329,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request query</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 4383,
                "end": 4390,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "FindManyOptions",
              "optional": true,
              "tagName": {
                "pos": 4377,
                "end": 4382,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 4420,
                "end": 4427,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>an array of Model entities</p>\n"
            }
          ]
        },
        {
          "name": "findUnique",
          "args": [
            {
              "name": "options",
              "type": "FindUniqueOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<literal type |  | VariableFindUniqueParamsDto, Variable>",
          "typeParameters": [],
          "line": 144,
          "description": "<p>Count the number of Variable entities that matches the filter</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 3563,
                "end": 3570,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "FindUniqueOptions",
              "optional": true,
              "tagName": {
                "pos": 3557,
                "end": 3562,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 3600,
                "end": 3607,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the number of Variable</p>\n"
            }
          ]
        },
        {
          "name": "findUnique$",
          "args": [
            {
              "name": "findUniqueParams",
              "type": "VariableFindUniqueParamsDto"
            },
            {
              "name": "findUniqueQuery",
              "type": "VariableFindUniqueQueryDto",
              "optional": true
            },
            {
              "name": "options",
              "type": "FindUniqueOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<Variable>",
          "typeParameters": [],
          "line": 120,
          "description": "<p>Find zero or one Model that matches the filter</p>\n<p>model</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 2741,
                "end": 2757,
                "flags": 0,
                "escapedText": "findUniqueParams"
              },
              "type": "VariableFindUniqueParamsDto",
              "tagName": {
                "pos": 2735,
                "end": 2740,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request param</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 2797,
                "end": 2812,
                "flags": 0,
                "escapedText": "findUniqueQuery"
              },
              "type": "VariableFindUniqueQueryDto",
              "optional": true,
              "tagName": {
                "pos": 2791,
                "end": 2796,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request query</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 2852,
                "end": 2859,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "FindUniqueOptions",
              "optional": true,
              "tagName": {
                "pos": 2846,
                "end": 2851,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 2889,
                "end": 2896,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>a Model or null</p>\n"
            }
          ]
        },
        {
          "name": "patch",
          "args": [
            {
              "name": "options",
              "type": "PatchOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<literal type | , Variable>",
          "typeParameters": [],
          "line": 241,
          "description": "<p>Update one Variable</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 6314,
                "end": 6321,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "PatchOptions",
              "optional": true,
              "tagName": {
                "pos": 6308,
                "end": 6313,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 6351,
                "end": 6358,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated Variable</p>\n"
            }
          ]
        },
        {
          "name": "patch$",
          "args": [
            {
              "name": "updateParams",
              "type": "VariableUpdateParamsDto"
            },
            {
              "name": "updateBody",
              "type": "VariableUpdateBodyDto"
            },
            {
              "name": "options",
              "type": "PatchOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<Variable>",
          "typeParameters": [],
          "line": 206,
          "description": "<p>Update one Variable</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 5351,
                "end": 5363,
                "flags": 0,
                "escapedText": "updateParams"
              },
              "type": "VariableUpdateParamsDto",
              "tagName": {
                "pos": 5345,
                "end": 5350,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request param</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 5403,
                "end": 5413,
                "flags": 0,
                "escapedText": "updateBody"
              },
              "type": "VariableUpdateBodyDto",
              "tagName": {
                "pos": 5397,
                "end": 5402,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request body</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 5452,
                "end": 5459,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "PatchOptions",
              "optional": true,
              "tagName": {
                "pos": 5446,
                "end": 5451,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 5489,
                "end": 5496,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated Variable</p>\n"
            }
          ]
        },
        {
          "name": "remove",
          "args": [
            {
              "name": "options",
              "type": "RemoveOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<VariableDeleteParamsDto, Variable>",
          "typeParameters": [],
          "line": 349,
          "description": "<p>Delete one Variable</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 9109,
                "end": 9116,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "RemoveOptions",
              "optional": true,
              "tagName": {
                "pos": 9103,
                "end": 9108,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 9146,
                "end": 9153,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated Variable</p>\n"
            }
          ]
        },
        {
          "name": "remove$",
          "args": [
            {
              "name": "deleteParams",
              "type": "VariableDeleteParamsDto"
            },
            {
              "name": "options",
              "type": "RemoveOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<Variable>",
          "typeParameters": [],
          "line": 323,
          "description": "<p>Delete one Variable</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 8427,
                "end": 8439,
                "flags": 0,
                "escapedText": "deleteParams"
              },
              "type": "VariableDeleteParamsDto",
              "tagName": {
                "pos": 8421,
                "end": 8426,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request param</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 8479,
                "end": 8486,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "RemoveOptions",
              "optional": true,
              "tagName": {
                "pos": 8473,
                "end": 8478,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 8516,
                "end": 8523,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated Variable</p>\n"
            }
          ]
        },
        {
          "name": "upsert",
          "args": [
            {
              "name": "options",
              "type": "UpsertOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "OperatorFunction<literal type | , Variable>",
          "typeParameters": [],
          "line": 302,
          "description": "<p>Update one Variable</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 7887,
                "end": 7894,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "UpsertOptions",
              "optional": true,
              "tagName": {
                "pos": 7881,
                "end": 7886,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 7924,
                "end": 7931,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated Variable</p>\n"
            }
          ]
        },
        {
          "name": "upsert$",
          "args": [
            {
              "name": "updateParams",
              "type": "VariableUpsertParamsDto"
            },
            {
              "name": "updateBody",
              "type": "VariableUpsertBodyDto"
            },
            {
              "name": "options",
              "type": "UpsertOptions",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<Variable>",
          "typeParameters": [],
          "line": 272,
          "description": "<p>Update one Variable</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 6995,
                "end": 7007,
                "flags": 0,
                "escapedText": "updateParams"
              },
              "type": "VariableUpsertParamsDto",
              "tagName": {
                "pos": 6989,
                "end": 6994,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request param</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 7047,
                "end": 7057,
                "flags": 0,
                "escapedText": "updateBody"
              },
              "type": "VariableUpsertBodyDto",
              "tagName": {
                "pos": 7041,
                "end": 7046,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request body</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 7096,
                "end": 7103,
                "flags": 0,
                "escapedText": "options"
              },
              "type": "UpsertOptions",
              "optional": true,
              "tagName": {
                "pos": 7090,
                "end": 7095,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 7133,
                "end": 7140,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated Variable</p>\n"
            }
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "VariableUpdateBodyDto",
      "id": "class-VariableUpdateBodyDto-de160ac4d2d4c9354b833251d064f1fd",
      "file": "generated/rest-dtos/dtos/variable/variable-update-body.dto.ts",
      "type": "class",
      "sourceCode": "import {  \n  IsOptional,\n  IsString,\n  IsUUID, \n} from 'class-validator';\n\n \nexport class VariableUpdateBodyDto {\n  @IsString() \n  @IsOptional()\n  value?: string;\n\n  @IsString() \n  @IsUUID(\"all\", ) \n  @IsOptional()\n  openQuestion?: string;\n\n  @IsString() \n  @IsUUID(\"all\", ) \n  @IsOptional()\n  answer?: string;\n\n}\n",
      "properties": [
        {
          "name": "answer",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 22,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": "'all'"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "openQuestion",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 17,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": "'all'"
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "value",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 12,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsOptional",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "VariableUpdateParamsDto",
      "id": "class-VariableUpdateParamsDto-d7a5e0b00e653e713227f948753a24fc",
      "file": "generated/rest-dtos/dtos/variable/variable-update-params.dto.ts",
      "type": "class",
      "sourceCode": "import {\n  IsString,\n  IsUUID,\n} from 'class-validator';\n\nexport class VariableUpdateParamsDto {\n  @IsString()\n  @IsUUID()\n  id!: string;\n}\n",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "VariableUpsertBodyDto",
      "id": "class-VariableUpsertBodyDto-fefd3e22e4c4a74adc1b8640cb2b75e4",
      "file": "generated/rest-dtos/dtos/variable/variable-upsert-body.dto.ts",
      "type": "class",
      "sourceCode": "import {  \n  IsString,\n  IsUUID, \n} from 'class-validator';\n\n \nexport class VariableUpsertBodyDto {\n  @IsString() \n  value!: string;\n\n  @IsString() \n  @IsUUID(\"all\", ) \n  openQuestion!: string;\n\n  @IsString() \n  @IsUUID(\"all\", ) \n  answer!: string;\n\n}\n",
      "properties": [
        {
          "name": "answer",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 18,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": "'all'"
            }
          ]
        },
        {
          "name": "openQuestion",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 14,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": "'all'"
            }
          ]
        },
        {
          "name": "value",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "VariableUpsertParamsDto",
      "id": "class-VariableUpsertParamsDto-7ffe68fc161d0ee8fdf91b5def354798",
      "file": "generated/rest-dtos/dtos/variable/variable-upsert-params.dto.ts",
      "type": "class",
      "sourceCode": "import {\n  IsString,\n  IsUUID,\n} from 'class-validator';\n\nexport class VariableUpsertParamsDto {\n  @IsString()\n  @IsUUID()\n  id!: string;\n}\n",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9,
          "decorators": [
            {
              "name": "IsString",
              "stringifiedArguments": ""
            },
            {
              "name": "IsUUID",
              "stringifiedArguments": ""
            }
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    }
  ],
  "directives": [],
  "components": [
    {
      "name": "AppComponent",
      "id": "component-AppComponent-0b46cc5ddf4234ebd52ddcd93b2e3156",
      "file": "src/app/app.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-root",
      "styleUrls": ["./app.component.less"],
      "styles": [],
      "templateUrl": ["./app.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "title",
          "defaultValue": "'angular-pwa'",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 14
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.less'],\n})\nexport class AppComponent implements OnInit {\n  title = 'angular-pwa';\n\n  constructor(private translate: TranslateService) {}\n\n  ngOnInit() {\n    this.translate.setDefaultLang('fr');\n    this.translate.use('fr');\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./app.component.less"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "translate",
            "type": "TranslateService"
          }
        ],
        "line": 10,
        "jsdoctags": [
          {
            "name": "translate",
            "type": "TranslateService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "templateData": "<div class=\"app-container\">\n  <p>{{ 'pwa-title' | translate }}</p>\n  <router-outlet></router-outlet>\n</div>\n"
    },
    {
      "name": "MoleculeHomeComponent",
      "id": "component-MoleculeHomeComponent-ebcd3c5461bdd99028ec4f53429061de",
      "file": "src/app/molecules/molecule-home/molecule-home.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-molecule-home",
      "styleUrls": ["./molecule-home.component.less"],
      "styles": [],
      "templateUrl": ["./molecule-home.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-molecule-home',\n  templateUrl: './molecule-home.component.html',\n  styleUrls: ['./molecule-home.component.less'],\n})\nexport class MoleculeHomeComponent {}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./molecule-home.component.less"
        }
      ],
      "stylesData": "",
      "templateData": "<p class=\"text-green-500\">{{ 'welcome' | translate }}</p>\n"
    }
  ],
  "modules": [
    {
      "name": "AngularRextModule",
      "children": [
        {
          "type": "providers",
          "elements": [
            {
              "name": "AnswerService"
            },
            {
              "name": "MessageService"
            },
            {
              "name": "OpenQuestionService"
            },
            {
              "name": "QuestionService"
            },
            {
              "name": "TagService"
            },
            {
              "name": "UserService"
            },
            {
              "name": "VariableService"
            }
          ]
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "AntCustomModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "AppModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "AppComponent"
            },
            {
              "name": "MoleculeHomeComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "AngularRextModule"
            },
            {
              "name": "AntCustomModule"
            },
            {
              "name": "AppRoutingModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": [
            {
              "name": "AppComponent"
            }
          ]
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "AppRoutingModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    }
  ],
  "miscellaneous": {
    "variables": [
      {
        "name": "AnswerInclude",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "generated/models/enums/answer.enum.ts",
        "type": "",
        "defaultValue": "[\n    'user',\n    'question',\n    'tags',\n        'variableAsAnswer',\n] as const"
      },
      {
        "name": "context",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/test.ts",
        "type": "",
        "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
      },
      {
        "name": "environment",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/environments/environment.prod.ts",
        "type": "object",
        "defaultValue": "{\n  production: true,\n  api: {\n    uri: 'https://api.staging.bootstrapr.net/v1',\n  },\n}"
      },
      {
        "name": "environment",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/environments/environment.ts",
        "type": "object",
        "defaultValue": "{\n  production: false,\n  api: {\n    uri: 'http://api.dev.bootstrapr.net/v1',\n  },\n}"
      },
      {
        "name": "MessageInclude",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "generated/models/enums/message.enum.ts",
        "type": "",
        "defaultValue": "[\n    'tags',\n    'questions',\n] as const"
      },
      {
        "name": "OpenQuestionInclude",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "generated/models/enums/open-question.enum.ts",
        "type": "",
        "defaultValue": "[\n    'question',\n        'variableAsOpenQuestion',\n] as const"
      },
      {
        "name": "QuestionInclude",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "generated/models/enums/question.enum.ts",
        "type": "",
        "defaultValue": "[\n    'parentQuestion',\n    'tags',\n        'answerAsQuestion',\n        'messageAsQuestions',\n        'openQuestionAsQuestion',\n        'questionAsParentQuestion',\n] as const"
      },
      {
        "name": "require",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/test.ts",
        "type": "literal type"
      },
      {
        "name": "SortOrder",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "generated/models/enums/sort-order.ts",
        "type": "object",
        "defaultValue": "{\n  asc: 'asc',\n  desc: 'desc'\n}"
      },
      {
        "name": "TagInclude",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "generated/models/enums/tag.enum.ts",
        "type": "",
        "defaultValue": "[\n        'answerAsTags',\n        'messageAsTags',\n        'questionAsTags',\n] as const"
      },
      {
        "name": "UserGender",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "generated/models/enums/user.enum.ts",
        "type": "",
        "defaultValue": "{\n male: 'male',\n female: 'female',\n} as const"
      },
      {
        "name": "UserInclude",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "generated/models/enums/user.enum.ts",
        "type": "",
        "defaultValue": "[\n        'answerAsUser',\n] as const"
      },
      {
        "name": "VariableInclude",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "generated/models/enums/variable.enum.ts",
        "type": "",
        "defaultValue": "[\n    'openQuestion',\n    'answer',\n] as const"
      }
    ],
    "functions": [
      {
        "name": "ajax",
        "file": "generated/rext-client/helpers/rest-ajax.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "options"
          }
        ],
        "returnType": "Observable<AjaxResponse>",
        "jsdoctags": [
          {
            "name": "options",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "count",
        "file": "generated/rext-client/helpers/rest-ajax.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "<p>Count the number of Model entities that matches the filter</p>\n",
        "args": [
          {
            "name": "apiUrl"
          },
          {
            "name": "countQuery"
          },
          {
            "name": "options"
          }
        ],
        "returnType": "Observable<>",
        "jsdoctags": [
          {
            "name": {
              "pos": 1452,
              "end": 1458,
              "flags": 0,
              "escapedText": "apiUrl"
            },
            "tagName": {
              "pos": 1446,
              "end": 1451,
              "flags": 0,
              "escapedText": "param"
            },
            "comment": "<ul>\n<li>The URL endpoint to that model</li>\n</ul>\n"
          },
          {
            "name": {
              "pos": 1502,
              "end": 1512,
              "flags": 0,
              "escapedText": "countQuery"
            },
            "tagName": {
              "pos": 1496,
              "end": 1501,
              "flags": 0,
              "escapedText": "param"
            },
            "comment": "<ul>\n<li>Dto of the request query</li>\n</ul>\n"
          },
          {
            "name": {
              "pos": 1550,
              "end": 1557,
              "flags": 0,
              "escapedText": "options"
            },
            "tagName": {
              "pos": 1544,
              "end": 1549,
              "flags": 0,
              "escapedText": "param"
            },
            "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
          },
          {
            "tagName": {
              "pos": 1585,
              "end": 1592,
              "flags": 0,
              "escapedText": "returns"
            },
            "comment": "<p>the number of Model</p>\n"
          }
        ]
      },
      {
        "name": "create",
        "file": "generated/rext-client/helpers/rest-ajax.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "<p>Create a new Model</p>\n",
        "args": [
          {
            "name": "apiUrl"
          },
          {
            "name": "createBody"
          },
          {
            "name": "options"
          }
        ],
        "returnType": "Observable<>",
        "jsdoctags": [
          {
            "name": {
              "pos": 773,
              "end": 779,
              "flags": 0,
              "escapedText": "apiUrl"
            },
            "tagName": {
              "pos": 767,
              "end": 772,
              "flags": 0,
              "escapedText": "param"
            },
            "comment": "<ul>\n<li>The URL endpoint to that model</li>\n</ul>\n"
          },
          {
            "name": {
              "pos": 823,
              "end": 833,
              "flags": 0,
              "escapedText": "createBody"
            },
            "tagName": {
              "pos": 817,
              "end": 822,
              "flags": 0,
              "escapedText": "param"
            },
            "comment": "<ul>\n<li>Dto of the request body</li>\n</ul>\n"
          },
          {
            "name": {
              "pos": 870,
              "end": 877,
              "flags": 0,
              "escapedText": "options"
            },
            "tagName": {
              "pos": 864,
              "end": 869,
              "flags": 0,
              "escapedText": "param"
            },
            "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
          },
          {
            "tagName": {
              "pos": 905,
              "end": 912,
              "flags": 0,
              "escapedText": "returns"
            },
            "comment": "<p>a new Model</p>\n"
          }
        ]
      },
      {
        "name": "defaultsPropertiesMap",
        "file": "generated/rext-client/helpers/transform-and-validate.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "classValidator"
          },
          {
            "name": "options"
          }
        ],
        "jsdoctags": [
          {
            "name": "classValidator",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "options",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "extractAjaxResponseData",
        "file": "generated/rext-client/helpers/rest-ajax.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [],
        "returnType": "OperatorFunction<T, >"
      },
      {
        "name": "findMany",
        "file": "generated/rext-client/helpers/rest-ajax.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "<p>Find zero or more Model entities that matches the filter</p>\n",
        "args": [
          {
            "name": "apiUrl"
          },
          {
            "name": "findManyQuery"
          },
          {
            "name": "options"
          }
        ],
        "returnType": "Observable<>",
        "jsdoctags": [
          {
            "name": {
              "pos": 3060,
              "end": 3066,
              "flags": 0,
              "escapedText": "apiUrl"
            },
            "tagName": {
              "pos": 3054,
              "end": 3059,
              "flags": 0,
              "escapedText": "param"
            },
            "comment": "<ul>\n<li>The URL endpoint to that model</li>\n</ul>\n"
          },
          {
            "name": {
              "pos": 3110,
              "end": 3123,
              "flags": 0,
              "escapedText": "findManyQuery"
            },
            "tagName": {
              "pos": 3104,
              "end": 3109,
              "flags": 0,
              "escapedText": "param"
            },
            "comment": "<ul>\n<li>Dto of the request query</li>\n</ul>\n"
          },
          {
            "name": {
              "pos": 3161,
              "end": 3168,
              "flags": 0,
              "escapedText": "options"
            },
            "tagName": {
              "pos": 3155,
              "end": 3160,
              "flags": 0,
              "escapedText": "param"
            },
            "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
          },
          {
            "tagName": {
              "pos": 3196,
              "end": 3203,
              "flags": 0,
              "escapedText": "returns"
            },
            "comment": "<p>an array of Model entities</p>\n"
          }
        ]
      },
      {
        "name": "findUnique",
        "file": "generated/rext-client/helpers/rest-ajax.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "<p>Find zero or one Model that matches the filter</p>\n",
        "args": [
          {
            "name": "apiUrl"
          },
          {
            "name": "findUniqueParams"
          },
          {
            "name": "findUniqueQuery"
          },
          {
            "name": "options"
          }
        ],
        "returnType": "Observable<>",
        "jsdoctags": [
          {
            "name": {
              "pos": 2156,
              "end": 2162,
              "flags": 0,
              "escapedText": "apiUrl"
            },
            "tagName": {
              "pos": 2150,
              "end": 2155,
              "flags": 0,
              "escapedText": "param"
            },
            "comment": "<ul>\n<li>The URL endpoint to that model</li>\n</ul>\n"
          },
          {
            "name": {
              "pos": 2206,
              "end": 2222,
              "flags": 0,
              "escapedText": "findUniqueParams"
            },
            "tagName": {
              "pos": 2200,
              "end": 2205,
              "flags": 0,
              "escapedText": "param"
            },
            "comment": "<ul>\n<li>Dto of the request param</li>\n</ul>\n"
          },
          {
            "name": {
              "pos": 2260,
              "end": 2275,
              "flags": 0,
              "escapedText": "findUniqueQuery"
            },
            "tagName": {
              "pos": 2254,
              "end": 2259,
              "flags": 0,
              "escapedText": "param"
            },
            "comment": "<ul>\n<li>Dto of the request query</li>\n</ul>\n"
          },
          {
            "name": {
              "pos": 2313,
              "end": 2320,
              "flags": 0,
              "escapedText": "options"
            },
            "tagName": {
              "pos": 2307,
              "end": 2312,
              "flags": 0,
              "escapedText": "param"
            },
            "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
          },
          {
            "tagName": {
              "pos": 2348,
              "end": 2355,
              "flags": 0,
              "escapedText": "returns"
            },
            "comment": "<p>a Model or null</p>\n"
          }
        ]
      },
      {
        "name": "fromDto",
        "file": "generated/rext-client/helpers/transform-and-validate.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "params"
          },
          {
            "name": "classValidator"
          },
          {
            "name": "options"
          }
        ],
        "jsdoctags": [
          {
            "name": "params",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "classValidator",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "options",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "getDefaults",
        "file": "generated/rext-client/helpers/transform-and-validate.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "classValidator"
          },
          {
            "name": "options"
          }
        ],
        "returnType": "Required<T>",
        "jsdoctags": [
          {
            "name": "classValidator",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "options",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "getUrl",
        "file": "generated/rext-client/helpers/url.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "apiUrl"
          },
          {
            "name": "appendUrl",
            "type": "string"
          },
          {
            "name": "params"
          }
        ],
        "returnType": "URL",
        "jsdoctags": [
          {
            "name": "apiUrl",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "appendUrl",
            "type": "string",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "params",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "getUrlSearchParams",
        "file": "generated/rext-client/helpers/url.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "init"
          }
        ],
        "jsdoctags": [
          {
            "name": "init",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "isAlike",
        "file": "generated/rext-client/helpers/transform-and-validate.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "object",
            "type": "any"
          },
          {
            "name": "classValidator"
          },
          {
            "name": "options"
          }
        ],
        "returnType": "T",
        "jsdoctags": [
          {
            "name": "object",
            "type": "any",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "classValidator",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "options",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockAnswerCountQueryDtoFactory",
        "file": "generated/rest-dtos/mock/answer/answer-count-query.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "Required<AnswerCountQueryDto>",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockAnswerCreateBodyDtoFactory",
        "file": "generated/rest-dtos/mock/answer/answer-create-body.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "Required<AnswerCreateBodyDto>",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockAnswerDeleteParamsDtoFactory",
        "file": "generated/rest-dtos/mock/answer/answer-delete-params.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "AnswerDeleteParamsDto",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockAnswerFactory",
        "file": "generated/models/mock/answer.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "Answer",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockAnswerFindManyQueryDtoFactory",
        "file": "generated/rest-dtos/mock/answer/answer-find-many-query.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "Required<AnswerFindManyQueryDto>",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockAnswerFindUniqueParamsDtoFactory",
        "file": "generated/rest-dtos/mock/answer/answer-find-unique-params.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "AnswerFindUniqueParamsDto",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockAnswerFindUniqueQueryDtoFactory",
        "file": "generated/rest-dtos/mock/answer/answer-find-unique-query.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "AnswerFindUniqueQueryDto",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockAnswerIdFactory",
        "file": "generated/models/mock/answer.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": []
      },
      {
        "name": "mockAnswerQuestionIdFactory",
        "file": "generated/models/mock/answer.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": []
      },
      {
        "name": "mockAnswerTagsIdsFactory",
        "file": "generated/models/mock/answer.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [],
        "returnType": "string[]"
      },
      {
        "name": "mockAnswerUpdateBodyDtoFactory",
        "file": "generated/rest-dtos/mock/answer/answer-update-body.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "Required<AnswerUpdateBodyDto>",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockAnswerUpdateParamsDtoFactory",
        "file": "generated/rest-dtos/mock/answer/answer-update-params.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "AnswerUpdateParamsDto",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockAnswerUpsertBodyDtoFactory",
        "file": "generated/rest-dtos/mock/answer/answer-upsert-body.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "Required<AnswerUpsertBodyDto>",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockAnswerUpsertParamsDtoFactory",
        "file": "generated/rest-dtos/mock/answer/answer-upsert-params.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "AnswerUpsertParamsDto",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockAnswerUserIdFactory",
        "file": "generated/models/mock/answer.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": []
      },
      {
        "name": "mockMessageCountQueryDtoFactory",
        "file": "generated/rest-dtos/mock/message/message-count-query.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "Required<MessageCountQueryDto>",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockMessageCreateBodyDtoFactory",
        "file": "generated/rest-dtos/mock/message/message-create-body.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "Required<MessageCreateBodyDto>",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockMessageDeleteParamsDtoFactory",
        "file": "generated/rest-dtos/mock/message/message-delete-params.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "MessageDeleteParamsDto",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockMessageFactory",
        "file": "generated/models/mock/message.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "Message",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockMessageFindManyQueryDtoFactory",
        "file": "generated/rest-dtos/mock/message/message-find-many-query.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "Required<MessageFindManyQueryDto>",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockMessageFindUniqueParamsDtoFactory",
        "file": "generated/rest-dtos/mock/message/message-find-unique-params.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "MessageFindUniqueParamsDto",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockMessageFindUniqueQueryDtoFactory",
        "file": "generated/rest-dtos/mock/message/message-find-unique-query.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "MessageFindUniqueQueryDto",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockMessageHourFactory",
        "file": "generated/models/mock/message.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [],
        "returnType": "NonNullable<>"
      },
      {
        "name": "mockMessageIdFactory",
        "file": "generated/models/mock/message.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": []
      },
      {
        "name": "mockMessageQuestionsIdsFactory",
        "file": "generated/models/mock/message.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [],
        "returnType": "string[]"
      },
      {
        "name": "mockMessageTagsIdsFactory",
        "file": "generated/models/mock/message.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [],
        "returnType": "string[]"
      },
      {
        "name": "mockMessageTextFactory",
        "file": "generated/models/mock/message.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": []
      },
      {
        "name": "mockMessageUpdateBodyDtoFactory",
        "file": "generated/rest-dtos/mock/message/message-update-body.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "Required<MessageUpdateBodyDto>",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockMessageUpdateParamsDtoFactory",
        "file": "generated/rest-dtos/mock/message/message-update-params.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "MessageUpdateParamsDto",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockMessageUpsertBodyDtoFactory",
        "file": "generated/rest-dtos/mock/message/message-upsert-body.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "Required<MessageUpsertBodyDto>",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockMessageUpsertParamsDtoFactory",
        "file": "generated/rest-dtos/mock/message/message-upsert-params.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "MessageUpsertParamsDto",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockOpenQuestionCountQueryDtoFactory",
        "file": "generated/rest-dtos/mock/open-question/open-question-count-query.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "Required<OpenQuestionCountQueryDto>",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockOpenQuestionCreateBodyDtoFactory",
        "file": "generated/rest-dtos/mock/open-question/open-question-create-body.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "Required<OpenQuestionCreateBodyDto>",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockOpenQuestionDeleteParamsDtoFactory",
        "file": "generated/rest-dtos/mock/open-question/open-question-delete-params.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "OpenQuestionDeleteParamsDto",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockOpenQuestionFactory",
        "file": "generated/models/mock/open-question.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "OpenQuestion",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockOpenQuestionFindManyQueryDtoFactory",
        "file": "generated/rest-dtos/mock/open-question/open-question-find-many-query.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "Required<OpenQuestionFindManyQueryDto>",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockOpenQuestionFindUniqueParamsDtoFactory",
        "file": "generated/rest-dtos/mock/open-question/open-question-find-unique-params.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "OpenQuestionFindUniqueParamsDto",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockOpenQuestionFindUniqueQueryDtoFactory",
        "file": "generated/rest-dtos/mock/open-question/open-question-find-unique-query.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "OpenQuestionFindUniqueQueryDto",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockOpenQuestionIdFactory",
        "file": "generated/models/mock/open-question.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": []
      },
      {
        "name": "mockOpenQuestionKeyFactory",
        "file": "generated/models/mock/open-question.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": []
      },
      {
        "name": "mockOpenQuestionQuestionIdFactory",
        "file": "generated/models/mock/open-question.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": []
      },
      {
        "name": "mockOpenQuestionTextFactory",
        "file": "generated/models/mock/open-question.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": []
      },
      {
        "name": "mockOpenQuestionUpdateBodyDtoFactory",
        "file": "generated/rest-dtos/mock/open-question/open-question-update-body.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "Required<OpenQuestionUpdateBodyDto>",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockOpenQuestionUpdateParamsDtoFactory",
        "file": "generated/rest-dtos/mock/open-question/open-question-update-params.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "OpenQuestionUpdateParamsDto",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockOpenQuestionUpsertBodyDtoFactory",
        "file": "generated/rest-dtos/mock/open-question/open-question-upsert-body.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "Required<OpenQuestionUpsertBodyDto>",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockOpenQuestionUpsertParamsDtoFactory",
        "file": "generated/rest-dtos/mock/open-question/open-question-upsert-params.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "OpenQuestionUpsertParamsDto",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockQuestionCountQueryDtoFactory",
        "file": "generated/rest-dtos/mock/question/question-count-query.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "Required<QuestionCountQueryDto>",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockQuestionCreateBodyDtoFactory",
        "file": "generated/rest-dtos/mock/question/question-create-body.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "Required<QuestionCreateBodyDto>",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockQuestionDeleteParamsDtoFactory",
        "file": "generated/rest-dtos/mock/question/question-delete-params.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "QuestionDeleteParamsDto",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockQuestionFactory",
        "file": "generated/models/mock/question.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "Question",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockQuestionFindManyQueryDtoFactory",
        "file": "generated/rest-dtos/mock/question/question-find-many-query.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "Required<QuestionFindManyQueryDto>",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockQuestionFindUniqueParamsDtoFactory",
        "file": "generated/rest-dtos/mock/question/question-find-unique-params.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "QuestionFindUniqueParamsDto",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockQuestionFindUniqueQueryDtoFactory",
        "file": "generated/rest-dtos/mock/question/question-find-unique-query.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "QuestionFindUniqueQueryDto",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockQuestionIdFactory",
        "file": "generated/models/mock/question.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": []
      },
      {
        "name": "mockQuestionParentQuestionIdFactory",
        "file": "generated/models/mock/question.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [],
        "returnType": "NonNullable<>"
      },
      {
        "name": "mockQuestionTagsIdsFactory",
        "file": "generated/models/mock/question.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [],
        "returnType": "string[]"
      },
      {
        "name": "mockQuestionTextFactory",
        "file": "generated/models/mock/question.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": []
      },
      {
        "name": "mockQuestionTitleFactory",
        "file": "generated/models/mock/question.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": []
      },
      {
        "name": "mockQuestionUpdateBodyDtoFactory",
        "file": "generated/rest-dtos/mock/question/question-update-body.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "Required<QuestionUpdateBodyDto>",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockQuestionUpdateParamsDtoFactory",
        "file": "generated/rest-dtos/mock/question/question-update-params.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "QuestionUpdateParamsDto",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockQuestionUpsertBodyDtoFactory",
        "file": "generated/rest-dtos/mock/question/question-upsert-body.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "Required<QuestionUpsertBodyDto>",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockQuestionUpsertParamsDtoFactory",
        "file": "generated/rest-dtos/mock/question/question-upsert-params.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "QuestionUpsertParamsDto",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockTagCountQueryDtoFactory",
        "file": "generated/rest-dtos/mock/tag/tag-count-query.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "Required<TagCountQueryDto>",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockTagCreateBodyDtoFactory",
        "file": "generated/rest-dtos/mock/tag/tag-create-body.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "Required<TagCreateBodyDto>",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockTagDeleteParamsDtoFactory",
        "file": "generated/rest-dtos/mock/tag/tag-delete-params.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "TagDeleteParamsDto",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockTagFactory",
        "file": "generated/models/mock/tag.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "Tag",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockTagFindManyQueryDtoFactory",
        "file": "generated/rest-dtos/mock/tag/tag-find-many-query.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "Required<TagFindManyQueryDto>",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockTagFindUniqueParamsDtoFactory",
        "file": "generated/rest-dtos/mock/tag/tag-find-unique-params.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "TagFindUniqueParamsDto",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockTagFindUniqueQueryDtoFactory",
        "file": "generated/rest-dtos/mock/tag/tag-find-unique-query.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "TagFindUniqueQueryDto",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockTagIdFactory",
        "file": "generated/models/mock/tag.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": []
      },
      {
        "name": "mockTagLabelFactory",
        "file": "generated/models/mock/tag.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": []
      },
      {
        "name": "mockTagUpdateBodyDtoFactory",
        "file": "generated/rest-dtos/mock/tag/tag-update-body.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "Required<TagUpdateBodyDto>",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockTagUpdateParamsDtoFactory",
        "file": "generated/rest-dtos/mock/tag/tag-update-params.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "TagUpdateParamsDto",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockTagUpsertBodyDtoFactory",
        "file": "generated/rest-dtos/mock/tag/tag-upsert-body.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "Required<TagUpsertBodyDto>",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockTagUpsertParamsDtoFactory",
        "file": "generated/rest-dtos/mock/tag/tag-upsert-params.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "TagUpsertParamsDto",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockUserBannedFactory",
        "file": "generated/models/mock/user.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": []
      },
      {
        "name": "mockUserCountQueryDtoFactory",
        "file": "generated/rest-dtos/mock/user/user-count-query.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "Required<UserCountQueryDto>",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockUserCreateBodyDtoFactory",
        "file": "generated/rest-dtos/mock/user/user-create-body.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "Required<UserCreateBodyDto>",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockUserDeleteParamsDtoFactory",
        "file": "generated/rest-dtos/mock/user/user-delete-params.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "UserDeleteParamsDto",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockUserEmailFactory",
        "file": "generated/models/mock/user.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": []
      },
      {
        "name": "mockUserFactory",
        "file": "generated/models/mock/user.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "User",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockUserFindManyQueryDtoFactory",
        "file": "generated/rest-dtos/mock/user/user-find-many-query.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "Required<UserFindManyQueryDto>",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockUserFindUniqueParamsDtoFactory",
        "file": "generated/rest-dtos/mock/user/user-find-unique-params.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "UserFindUniqueParamsDto",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockUserFindUniqueQueryDtoFactory",
        "file": "generated/rest-dtos/mock/user/user-find-unique-query.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "UserFindUniqueQueryDto",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockUserGenderFactory",
        "file": "generated/models/mock/user.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": []
      },
      {
        "name": "mockUserIdFactory",
        "file": "generated/models/mock/user.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": []
      },
      {
        "name": "mockUserLastConnectedAtFactory",
        "file": "generated/models/mock/user.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [],
        "returnType": "NonNullable<>"
      },
      {
        "name": "mockUserNameFactory",
        "file": "generated/models/mock/user.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": []
      },
      {
        "name": "mockUserPasswordFactory",
        "file": "generated/models/mock/user.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": []
      },
      {
        "name": "mockUserRoleFactory",
        "file": "generated/models/mock/user.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": []
      },
      {
        "name": "mockUserUpdateBodyDtoFactory",
        "file": "generated/rest-dtos/mock/user/user-update-body.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "Required<UserUpdateBodyDto>",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockUserUpdateParamsDtoFactory",
        "file": "generated/rest-dtos/mock/user/user-update-params.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "UserUpdateParamsDto",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockUserUpsertBodyDtoFactory",
        "file": "generated/rest-dtos/mock/user/user-upsert-body.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "Required<UserUpsertBodyDto>",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockUserUpsertParamsDtoFactory",
        "file": "generated/rest-dtos/mock/user/user-upsert-params.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "UserUpsertParamsDto",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockVariableAnswerIdFactory",
        "file": "generated/models/mock/variable.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": []
      },
      {
        "name": "mockVariableCountQueryDtoFactory",
        "file": "generated/rest-dtos/mock/variable/variable-count-query.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "Required<VariableCountQueryDto>",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockVariableCreateBodyDtoFactory",
        "file": "generated/rest-dtos/mock/variable/variable-create-body.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "Required<VariableCreateBodyDto>",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockVariableDeleteParamsDtoFactory",
        "file": "generated/rest-dtos/mock/variable/variable-delete-params.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "VariableDeleteParamsDto",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockVariableFactory",
        "file": "generated/models/mock/variable.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "Variable",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockVariableFindManyQueryDtoFactory",
        "file": "generated/rest-dtos/mock/variable/variable-find-many-query.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "Required<VariableFindManyQueryDto>",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockVariableFindUniqueParamsDtoFactory",
        "file": "generated/rest-dtos/mock/variable/variable-find-unique-params.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "VariableFindUniqueParamsDto",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockVariableFindUniqueQueryDtoFactory",
        "file": "generated/rest-dtos/mock/variable/variable-find-unique-query.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "VariableFindUniqueQueryDto",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockVariableIdFactory",
        "file": "generated/models/mock/variable.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": []
      },
      {
        "name": "mockVariableOpenQuestionIdFactory",
        "file": "generated/models/mock/variable.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": []
      },
      {
        "name": "mockVariableUpdateBodyDtoFactory",
        "file": "generated/rest-dtos/mock/variable/variable-update-body.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "Required<VariableUpdateBodyDto>",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockVariableUpdateParamsDtoFactory",
        "file": "generated/rest-dtos/mock/variable/variable-update-params.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "VariableUpdateParamsDto",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockVariableUpsertBodyDtoFactory",
        "file": "generated/rest-dtos/mock/variable/variable-upsert-body.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "Required<VariableUpsertBodyDto>",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockVariableUpsertParamsDtoFactory",
        "file": "generated/rest-dtos/mock/variable/variable-upsert-params.dto.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "override"
          }
        ],
        "returnType": "VariableUpsertParamsDto",
        "jsdoctags": [
          {
            "name": "override",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "mockVariableValueFactory",
        "file": "generated/models/mock/variable.mock.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": []
      },
      {
        "name": "patch",
        "file": "generated/rext-client/helpers/rest-ajax.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "<p>Update one Model</p>\n",
        "args": [
          {
            "name": "apiUrl"
          },
          {
            "name": "updateParams"
          },
          {
            "name": "updateBody"
          },
          {
            "name": "options"
          }
        ],
        "returnType": "Observable<>",
        "jsdoctags": [
          {
            "name": {
              "pos": 3822,
              "end": 3828,
              "flags": 0,
              "escapedText": "apiUrl"
            },
            "tagName": {
              "pos": 3816,
              "end": 3821,
              "flags": 0,
              "escapedText": "param"
            },
            "comment": "<ul>\n<li>The URL endpoint to that model</li>\n</ul>\n"
          },
          {
            "name": {
              "pos": 3872,
              "end": 3884,
              "flags": 0,
              "escapedText": "updateParams"
            },
            "tagName": {
              "pos": 3866,
              "end": 3871,
              "flags": 0,
              "escapedText": "param"
            },
            "comment": "<ul>\n<li>Dto of the request param</li>\n</ul>\n"
          },
          {
            "name": {
              "pos": 3922,
              "end": 3932,
              "flags": 0,
              "escapedText": "updateBody"
            },
            "tagName": {
              "pos": 3916,
              "end": 3921,
              "flags": 0,
              "escapedText": "param"
            },
            "comment": "<ul>\n<li>Dto of the request body</li>\n</ul>\n"
          },
          {
            "name": {
              "pos": 3969,
              "end": 3976,
              "flags": 0,
              "escapedText": "options"
            },
            "tagName": {
              "pos": 3963,
              "end": 3968,
              "flags": 0,
              "escapedText": "param"
            },
            "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
          },
          {
            "tagName": {
              "pos": 4004,
              "end": 4011,
              "flags": 0,
              "escapedText": "returns"
            },
            "comment": "<p>the updated Model</p>\n"
          }
        ]
      },
      {
        "name": "remove",
        "file": "generated/rext-client/helpers/rest-ajax.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "<p>Delete one Model</p>\n",
        "args": [
          {
            "name": "apiUrl"
          },
          {
            "name": "deleteParams"
          },
          {
            "name": "options"
          }
        ],
        "returnType": "Observable<>",
        "jsdoctags": [
          {
            "name": {
              "pos": 5531,
              "end": 5537,
              "flags": 0,
              "escapedText": "apiUrl"
            },
            "tagName": {
              "pos": 5525,
              "end": 5530,
              "flags": 0,
              "escapedText": "param"
            },
            "comment": "<ul>\n<li>Url of the api endpoint</li>\n</ul>\n"
          },
          {
            "name": {
              "pos": 5574,
              "end": 5586,
              "flags": 0,
              "escapedText": "deleteParams"
            },
            "tagName": {
              "pos": 5568,
              "end": 5573,
              "flags": 0,
              "escapedText": "param"
            },
            "comment": "<ul>\n<li>Dto of the request param</li>\n</ul>\n"
          },
          {
            "name": {
              "pos": 5624,
              "end": 5631,
              "flags": 0,
              "escapedText": "options"
            },
            "tagName": {
              "pos": 5618,
              "end": 5623,
              "flags": 0,
              "escapedText": "param"
            },
            "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
          },
          {
            "tagName": {
              "pos": 5659,
              "end": 5666,
              "flags": 0,
              "escapedText": "returns"
            },
            "comment": "<p>the updated Model</p>\n"
          }
        ]
      },
      {
        "name": "transformAndValidate",
        "file": "generated/rext-client/helpers/transform-and-validate.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "classValidator"
          },
          {
            "name": "options",
            "optional": true
          }
        ],
        "jsdoctags": [
          {
            "name": "classValidator",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "options",
            "optional": true,
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "transformAndValidateMap",
        "file": "generated/rext-client/helpers/transform-and-validate.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "classValidator"
          },
          {
            "name": "options"
          }
        ],
        "jsdoctags": [
          {
            "name": "classValidator",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "options",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "upsert",
        "file": "generated/rext-client/helpers/rest-ajax.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "<p>Update or create one Model</p>\n",
        "args": [
          {
            "name": "apiUrl"
          },
          {
            "name": "upsertParams"
          },
          {
            "name": "upsertBody"
          },
          {
            "name": "options"
          }
        ],
        "returnType": "Observable<>",
        "jsdoctags": [
          {
            "name": {
              "pos": 4746,
              "end": 4752,
              "flags": 0,
              "escapedText": "apiUrl"
            },
            "tagName": {
              "pos": 4740,
              "end": 4745,
              "flags": 0,
              "escapedText": "param"
            },
            "comment": "<ul>\n<li>Url of the api endpoint</li>\n</ul>\n"
          },
          {
            "name": {
              "pos": 4789,
              "end": 4801,
              "flags": 0,
              "escapedText": "upsertParams"
            },
            "tagName": {
              "pos": 4783,
              "end": 4788,
              "flags": 0,
              "escapedText": "param"
            },
            "comment": "<ul>\n<li>Dto of the request param</li>\n</ul>\n"
          },
          {
            "name": "upsertBody",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": {
              "pos": 4886,
              "end": 4893,
              "flags": 0,
              "escapedText": "options"
            },
            "tagName": {
              "pos": 4880,
              "end": 4885,
              "flags": 0,
              "escapedText": "param"
            },
            "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
          },
          {
            "tagName": {
              "pos": 4921,
              "end": 4928,
              "flags": 0,
              "escapedText": "returns"
            },
            "comment": "<p>the updated Model</p>\n"
          }
        ]
      }
    ],
    "typealiases": [
      {
        "name": "AnswerInclude",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "",
        "file": "generated/models/enums/answer.enum.ts",
        "description": "",
        "kind": 175
      },
      {
        "name": "CountAjaxOptions",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "Omit<AjaxRequest | \"url\" | \"method\">",
        "file": "generated/rext-client/helpers/rest-ajax.ts",
        "description": "",
        "kind": 161
      },
      {
        "name": "CreateAjaxOptions",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "Omit<AjaxRequest | \"url\" | \"method\" | \"body\">",
        "file": "generated/rext-client/helpers/rest-ajax.ts",
        "description": "",
        "kind": 161
      },
      {
        "name": "FindManyOptions",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "Omit<AjaxRequest | \"url\" | \"method\">",
        "file": "generated/rext-client/helpers/rest-ajax.ts",
        "description": "",
        "kind": 161
      },
      {
        "name": "FindUniqueOptions",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "Omit<AjaxRequest | \"url\" | \"method\">",
        "file": "generated/rext-client/helpers/rest-ajax.ts",
        "description": "",
        "kind": 161
      },
      {
        "name": "MessageInclude",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "",
        "file": "generated/models/enums/message.enum.ts",
        "description": "",
        "kind": 175
      },
      {
        "name": "OpenQuestionInclude",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "",
        "file": "generated/models/enums/open-question.enum.ts",
        "description": "",
        "kind": 175
      },
      {
        "name": "PatchOptions",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "Omit<AjaxRequest | \"url\" | \"method\" | \"body\">",
        "file": "generated/rext-client/helpers/rest-ajax.ts",
        "description": "",
        "kind": 161
      },
      {
        "name": "QuestionInclude",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "",
        "file": "generated/models/enums/question.enum.ts",
        "description": "",
        "kind": 175
      },
      {
        "name": "RemoveOptions",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "Omit<AjaxRequest | \"url\" | \"method\">",
        "file": "generated/rext-client/helpers/rest-ajax.ts",
        "description": "",
        "kind": 161
      },
      {
        "name": "SortOrder",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "",
        "file": "generated/models/enums/sort-order.ts",
        "description": "",
        "kind": 175
      },
      {
        "name": "TagInclude",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "",
        "file": "generated/models/enums/tag.enum.ts",
        "description": "",
        "kind": 175
      },
      {
        "name": "UpsertOptions",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "Omit<AjaxRequest | \"url\" | \"method\" | \"body\">",
        "file": "generated/rext-client/helpers/rest-ajax.ts",
        "description": "",
        "kind": 161
      },
      {
        "name": "URLSearchParamsType",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "string | string[][] | Record<string | string> | URLSearchParams | Record<string | string | number | boolean | [] | [] | Date | undefined>",
        "file": "generated/rext-client/helpers/url.ts",
        "description": "",
        "kind": 168
      },
      {
        "name": "UserGender",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "",
        "file": "generated/models/enums/user.enum.ts",
        "description": "",
        "kind": 175
      },
      {
        "name": "UserInclude",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "",
        "file": "generated/models/enums/user.enum.ts",
        "description": "",
        "kind": 175
      },
      {
        "name": "VariableInclude",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "",
        "file": "generated/models/enums/variable.enum.ts",
        "description": "",
        "kind": 175
      }
    ],
    "enumerations": [],
    "groupedVariables": {
      "generated/models/enums/answer.enum.ts": [
        {
          "name": "AnswerInclude",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "generated/models/enums/answer.enum.ts",
          "type": "",
          "defaultValue": "[\n    'user',\n    'question',\n    'tags',\n        'variableAsAnswer',\n] as const"
        }
      ],
      "src/test.ts": [
        {
          "name": "context",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/test.ts",
          "type": "",
          "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
        },
        {
          "name": "require",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/test.ts",
          "type": "literal type"
        }
      ],
      "src/environments/environment.prod.ts": [
        {
          "name": "environment",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/environments/environment.prod.ts",
          "type": "object",
          "defaultValue": "{\n  production: true,\n  api: {\n    uri: 'https://api.staging.bootstrapr.net/v1',\n  },\n}"
        }
      ],
      "src/environments/environment.ts": [
        {
          "name": "environment",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/environments/environment.ts",
          "type": "object",
          "defaultValue": "{\n  production: false,\n  api: {\n    uri: 'http://api.dev.bootstrapr.net/v1',\n  },\n}"
        }
      ],
      "generated/models/enums/message.enum.ts": [
        {
          "name": "MessageInclude",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "generated/models/enums/message.enum.ts",
          "type": "",
          "defaultValue": "[\n    'tags',\n    'questions',\n] as const"
        }
      ],
      "generated/models/enums/open-question.enum.ts": [
        {
          "name": "OpenQuestionInclude",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "generated/models/enums/open-question.enum.ts",
          "type": "",
          "defaultValue": "[\n    'question',\n        'variableAsOpenQuestion',\n] as const"
        }
      ],
      "generated/models/enums/question.enum.ts": [
        {
          "name": "QuestionInclude",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "generated/models/enums/question.enum.ts",
          "type": "",
          "defaultValue": "[\n    'parentQuestion',\n    'tags',\n        'answerAsQuestion',\n        'messageAsQuestions',\n        'openQuestionAsQuestion',\n        'questionAsParentQuestion',\n] as const"
        }
      ],
      "generated/models/enums/sort-order.ts": [
        {
          "name": "SortOrder",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "generated/models/enums/sort-order.ts",
          "type": "object",
          "defaultValue": "{\n  asc: 'asc',\n  desc: 'desc'\n}"
        }
      ],
      "generated/models/enums/tag.enum.ts": [
        {
          "name": "TagInclude",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "generated/models/enums/tag.enum.ts",
          "type": "",
          "defaultValue": "[\n        'answerAsTags',\n        'messageAsTags',\n        'questionAsTags',\n] as const"
        }
      ],
      "generated/models/enums/user.enum.ts": [
        {
          "name": "UserGender",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "generated/models/enums/user.enum.ts",
          "type": "",
          "defaultValue": "{\n male: 'male',\n female: 'female',\n} as const"
        },
        {
          "name": "UserInclude",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "generated/models/enums/user.enum.ts",
          "type": "",
          "defaultValue": "[\n        'answerAsUser',\n] as const"
        }
      ],
      "generated/models/enums/variable.enum.ts": [
        {
          "name": "VariableInclude",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "generated/models/enums/variable.enum.ts",
          "type": "",
          "defaultValue": "[\n    'openQuestion',\n    'answer',\n] as const"
        }
      ]
    },
    "groupedFunctions": {
      "generated/rext-client/helpers/rest-ajax.ts": [
        {
          "name": "ajax",
          "file": "generated/rext-client/helpers/rest-ajax.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "options"
            }
          ],
          "returnType": "Observable<AjaxResponse>",
          "jsdoctags": [
            {
              "name": "options",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "count",
          "file": "generated/rext-client/helpers/rest-ajax.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "<p>Count the number of Model entities that matches the filter</p>\n",
          "args": [
            {
              "name": "apiUrl"
            },
            {
              "name": "countQuery"
            },
            {
              "name": "options"
            }
          ],
          "returnType": "Observable<>",
          "jsdoctags": [
            {
              "name": {
                "pos": 1452,
                "end": 1458,
                "flags": 0,
                "escapedText": "apiUrl"
              },
              "tagName": {
                "pos": 1446,
                "end": 1451,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>The URL endpoint to that model</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 1502,
                "end": 1512,
                "flags": 0,
                "escapedText": "countQuery"
              },
              "tagName": {
                "pos": 1496,
                "end": 1501,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request query</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 1550,
                "end": 1557,
                "flags": 0,
                "escapedText": "options"
              },
              "tagName": {
                "pos": 1544,
                "end": 1549,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 1585,
                "end": 1592,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the number of Model</p>\n"
            }
          ]
        },
        {
          "name": "create",
          "file": "generated/rext-client/helpers/rest-ajax.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "<p>Create a new Model</p>\n",
          "args": [
            {
              "name": "apiUrl"
            },
            {
              "name": "createBody"
            },
            {
              "name": "options"
            }
          ],
          "returnType": "Observable<>",
          "jsdoctags": [
            {
              "name": {
                "pos": 773,
                "end": 779,
                "flags": 0,
                "escapedText": "apiUrl"
              },
              "tagName": {
                "pos": 767,
                "end": 772,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>The URL endpoint to that model</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 823,
                "end": 833,
                "flags": 0,
                "escapedText": "createBody"
              },
              "tagName": {
                "pos": 817,
                "end": 822,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request body</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 870,
                "end": 877,
                "flags": 0,
                "escapedText": "options"
              },
              "tagName": {
                "pos": 864,
                "end": 869,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 905,
                "end": 912,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>a new Model</p>\n"
            }
          ]
        },
        {
          "name": "extractAjaxResponseData",
          "file": "generated/rext-client/helpers/rest-ajax.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [],
          "returnType": "OperatorFunction<T, >"
        },
        {
          "name": "findMany",
          "file": "generated/rext-client/helpers/rest-ajax.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "<p>Find zero or more Model entities that matches the filter</p>\n",
          "args": [
            {
              "name": "apiUrl"
            },
            {
              "name": "findManyQuery"
            },
            {
              "name": "options"
            }
          ],
          "returnType": "Observable<>",
          "jsdoctags": [
            {
              "name": {
                "pos": 3060,
                "end": 3066,
                "flags": 0,
                "escapedText": "apiUrl"
              },
              "tagName": {
                "pos": 3054,
                "end": 3059,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>The URL endpoint to that model</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 3110,
                "end": 3123,
                "flags": 0,
                "escapedText": "findManyQuery"
              },
              "tagName": {
                "pos": 3104,
                "end": 3109,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request query</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 3161,
                "end": 3168,
                "flags": 0,
                "escapedText": "options"
              },
              "tagName": {
                "pos": 3155,
                "end": 3160,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 3196,
                "end": 3203,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>an array of Model entities</p>\n"
            }
          ]
        },
        {
          "name": "findUnique",
          "file": "generated/rext-client/helpers/rest-ajax.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "<p>Find zero or one Model that matches the filter</p>\n",
          "args": [
            {
              "name": "apiUrl"
            },
            {
              "name": "findUniqueParams"
            },
            {
              "name": "findUniqueQuery"
            },
            {
              "name": "options"
            }
          ],
          "returnType": "Observable<>",
          "jsdoctags": [
            {
              "name": {
                "pos": 2156,
                "end": 2162,
                "flags": 0,
                "escapedText": "apiUrl"
              },
              "tagName": {
                "pos": 2150,
                "end": 2155,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>The URL endpoint to that model</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 2206,
                "end": 2222,
                "flags": 0,
                "escapedText": "findUniqueParams"
              },
              "tagName": {
                "pos": 2200,
                "end": 2205,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request param</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 2260,
                "end": 2275,
                "flags": 0,
                "escapedText": "findUniqueQuery"
              },
              "tagName": {
                "pos": 2254,
                "end": 2259,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request query</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 2313,
                "end": 2320,
                "flags": 0,
                "escapedText": "options"
              },
              "tagName": {
                "pos": 2307,
                "end": 2312,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 2348,
                "end": 2355,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>a Model or null</p>\n"
            }
          ]
        },
        {
          "name": "patch",
          "file": "generated/rext-client/helpers/rest-ajax.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "<p>Update one Model</p>\n",
          "args": [
            {
              "name": "apiUrl"
            },
            {
              "name": "updateParams"
            },
            {
              "name": "updateBody"
            },
            {
              "name": "options"
            }
          ],
          "returnType": "Observable<>",
          "jsdoctags": [
            {
              "name": {
                "pos": 3822,
                "end": 3828,
                "flags": 0,
                "escapedText": "apiUrl"
              },
              "tagName": {
                "pos": 3816,
                "end": 3821,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>The URL endpoint to that model</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 3872,
                "end": 3884,
                "flags": 0,
                "escapedText": "updateParams"
              },
              "tagName": {
                "pos": 3866,
                "end": 3871,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request param</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 3922,
                "end": 3932,
                "flags": 0,
                "escapedText": "updateBody"
              },
              "tagName": {
                "pos": 3916,
                "end": 3921,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request body</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 3969,
                "end": 3976,
                "flags": 0,
                "escapedText": "options"
              },
              "tagName": {
                "pos": 3963,
                "end": 3968,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 4004,
                "end": 4011,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated Model</p>\n"
            }
          ]
        },
        {
          "name": "remove",
          "file": "generated/rext-client/helpers/rest-ajax.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "<p>Delete one Model</p>\n",
          "args": [
            {
              "name": "apiUrl"
            },
            {
              "name": "deleteParams"
            },
            {
              "name": "options"
            }
          ],
          "returnType": "Observable<>",
          "jsdoctags": [
            {
              "name": {
                "pos": 5531,
                "end": 5537,
                "flags": 0,
                "escapedText": "apiUrl"
              },
              "tagName": {
                "pos": 5525,
                "end": 5530,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Url of the api endpoint</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 5574,
                "end": 5586,
                "flags": 0,
                "escapedText": "deleteParams"
              },
              "tagName": {
                "pos": 5568,
                "end": 5573,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request param</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 5624,
                "end": 5631,
                "flags": 0,
                "escapedText": "options"
              },
              "tagName": {
                "pos": 5618,
                "end": 5623,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 5659,
                "end": 5666,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated Model</p>\n"
            }
          ]
        },
        {
          "name": "upsert",
          "file": "generated/rext-client/helpers/rest-ajax.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "<p>Update or create one Model</p>\n",
          "args": [
            {
              "name": "apiUrl"
            },
            {
              "name": "upsertParams"
            },
            {
              "name": "upsertBody"
            },
            {
              "name": "options"
            }
          ],
          "returnType": "Observable<>",
          "jsdoctags": [
            {
              "name": {
                "pos": 4746,
                "end": 4752,
                "flags": 0,
                "escapedText": "apiUrl"
              },
              "tagName": {
                "pos": 4740,
                "end": 4745,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Url of the api endpoint</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 4789,
                "end": 4801,
                "flags": 0,
                "escapedText": "upsertParams"
              },
              "tagName": {
                "pos": 4783,
                "end": 4788,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Dto of the request param</li>\n</ul>\n"
            },
            {
              "name": "upsertBody",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": {
                "pos": 4886,
                "end": 4893,
                "flags": 0,
                "escapedText": "options"
              },
              "tagName": {
                "pos": 4880,
                "end": 4885,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Ajax request options</li>\n</ul>\n"
            },
            {
              "tagName": {
                "pos": 4921,
                "end": 4928,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>the updated Model</p>\n"
            }
          ]
        }
      ],
      "generated/rext-client/helpers/transform-and-validate.ts": [
        {
          "name": "defaultsPropertiesMap",
          "file": "generated/rext-client/helpers/transform-and-validate.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "classValidator"
            },
            {
              "name": "options"
            }
          ],
          "jsdoctags": [
            {
              "name": "classValidator",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "options",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "fromDto",
          "file": "generated/rext-client/helpers/transform-and-validate.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "params"
            },
            {
              "name": "classValidator"
            },
            {
              "name": "options"
            }
          ],
          "jsdoctags": [
            {
              "name": "params",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "classValidator",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "options",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getDefaults",
          "file": "generated/rext-client/helpers/transform-and-validate.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "classValidator"
            },
            {
              "name": "options"
            }
          ],
          "returnType": "Required<T>",
          "jsdoctags": [
            {
              "name": "classValidator",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "options",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "isAlike",
          "file": "generated/rext-client/helpers/transform-and-validate.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "object",
              "type": "any"
            },
            {
              "name": "classValidator"
            },
            {
              "name": "options"
            }
          ],
          "returnType": "T",
          "jsdoctags": [
            {
              "name": "object",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "classValidator",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "options",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "transformAndValidate",
          "file": "generated/rext-client/helpers/transform-and-validate.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "classValidator"
            },
            {
              "name": "options",
              "optional": true
            }
          ],
          "jsdoctags": [
            {
              "name": "classValidator",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "options",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "transformAndValidateMap",
          "file": "generated/rext-client/helpers/transform-and-validate.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "classValidator"
            },
            {
              "name": "options"
            }
          ],
          "jsdoctags": [
            {
              "name": "classValidator",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "options",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rext-client/helpers/url.ts": [
        {
          "name": "getUrl",
          "file": "generated/rext-client/helpers/url.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "apiUrl"
            },
            {
              "name": "appendUrl",
              "type": "string"
            },
            {
              "name": "params"
            }
          ],
          "returnType": "URL",
          "jsdoctags": [
            {
              "name": "apiUrl",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "appendUrl",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "params",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getUrlSearchParams",
          "file": "generated/rext-client/helpers/url.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "init"
            }
          ],
          "jsdoctags": [
            {
              "name": "init",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/answer/answer-count-query.dto.mock.ts": [
        {
          "name": "mockAnswerCountQueryDtoFactory",
          "file": "generated/rest-dtos/mock/answer/answer-count-query.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "Required<AnswerCountQueryDto>",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/answer/answer-create-body.dto.mock.ts": [
        {
          "name": "mockAnswerCreateBodyDtoFactory",
          "file": "generated/rest-dtos/mock/answer/answer-create-body.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "Required<AnswerCreateBodyDto>",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/answer/answer-delete-params.dto.mock.ts": [
        {
          "name": "mockAnswerDeleteParamsDtoFactory",
          "file": "generated/rest-dtos/mock/answer/answer-delete-params.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "AnswerDeleteParamsDto",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/models/mock/answer.mock.ts": [
        {
          "name": "mockAnswerFactory",
          "file": "generated/models/mock/answer.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "Answer",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "mockAnswerIdFactory",
          "file": "generated/models/mock/answer.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": []
        },
        {
          "name": "mockAnswerQuestionIdFactory",
          "file": "generated/models/mock/answer.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": []
        },
        {
          "name": "mockAnswerTagsIdsFactory",
          "file": "generated/models/mock/answer.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [],
          "returnType": "string[]"
        },
        {
          "name": "mockAnswerUserIdFactory",
          "file": "generated/models/mock/answer.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": []
        }
      ],
      "generated/rest-dtos/mock/answer/answer-find-many-query.dto.mock.ts": [
        {
          "name": "mockAnswerFindManyQueryDtoFactory",
          "file": "generated/rest-dtos/mock/answer/answer-find-many-query.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "Required<AnswerFindManyQueryDto>",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/answer/answer-find-unique-params.dto.mock.ts": [
        {
          "name": "mockAnswerFindUniqueParamsDtoFactory",
          "file": "generated/rest-dtos/mock/answer/answer-find-unique-params.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "AnswerFindUniqueParamsDto",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/answer/answer-find-unique-query.dto.mock.ts": [
        {
          "name": "mockAnswerFindUniqueQueryDtoFactory",
          "file": "generated/rest-dtos/mock/answer/answer-find-unique-query.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "AnswerFindUniqueQueryDto",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/answer/answer-update-body.dto.mock.ts": [
        {
          "name": "mockAnswerUpdateBodyDtoFactory",
          "file": "generated/rest-dtos/mock/answer/answer-update-body.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "Required<AnswerUpdateBodyDto>",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/answer/answer-update-params.dto.mock.ts": [
        {
          "name": "mockAnswerUpdateParamsDtoFactory",
          "file": "generated/rest-dtos/mock/answer/answer-update-params.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "AnswerUpdateParamsDto",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/answer/answer-upsert-body.dto.mock.ts": [
        {
          "name": "mockAnswerUpsertBodyDtoFactory",
          "file": "generated/rest-dtos/mock/answer/answer-upsert-body.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "Required<AnswerUpsertBodyDto>",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/answer/answer-upsert-params.dto.mock.ts": [
        {
          "name": "mockAnswerUpsertParamsDtoFactory",
          "file": "generated/rest-dtos/mock/answer/answer-upsert-params.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "AnswerUpsertParamsDto",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/message/message-count-query.dto.mock.ts": [
        {
          "name": "mockMessageCountQueryDtoFactory",
          "file": "generated/rest-dtos/mock/message/message-count-query.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "Required<MessageCountQueryDto>",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/message/message-create-body.dto.mock.ts": [
        {
          "name": "mockMessageCreateBodyDtoFactory",
          "file": "generated/rest-dtos/mock/message/message-create-body.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "Required<MessageCreateBodyDto>",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/message/message-delete-params.dto.mock.ts": [
        {
          "name": "mockMessageDeleteParamsDtoFactory",
          "file": "generated/rest-dtos/mock/message/message-delete-params.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "MessageDeleteParamsDto",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/models/mock/message.mock.ts": [
        {
          "name": "mockMessageFactory",
          "file": "generated/models/mock/message.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "Message",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "mockMessageHourFactory",
          "file": "generated/models/mock/message.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [],
          "returnType": "NonNullable<>"
        },
        {
          "name": "mockMessageIdFactory",
          "file": "generated/models/mock/message.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": []
        },
        {
          "name": "mockMessageQuestionsIdsFactory",
          "file": "generated/models/mock/message.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [],
          "returnType": "string[]"
        },
        {
          "name": "mockMessageTagsIdsFactory",
          "file": "generated/models/mock/message.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [],
          "returnType": "string[]"
        },
        {
          "name": "mockMessageTextFactory",
          "file": "generated/models/mock/message.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": []
        }
      ],
      "generated/rest-dtos/mock/message/message-find-many-query.dto.mock.ts": [
        {
          "name": "mockMessageFindManyQueryDtoFactory",
          "file": "generated/rest-dtos/mock/message/message-find-many-query.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "Required<MessageFindManyQueryDto>",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/message/message-find-unique-params.dto.mock.ts": [
        {
          "name": "mockMessageFindUniqueParamsDtoFactory",
          "file": "generated/rest-dtos/mock/message/message-find-unique-params.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "MessageFindUniqueParamsDto",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/message/message-find-unique-query.dto.mock.ts": [
        {
          "name": "mockMessageFindUniqueQueryDtoFactory",
          "file": "generated/rest-dtos/mock/message/message-find-unique-query.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "MessageFindUniqueQueryDto",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/message/message-update-body.dto.mock.ts": [
        {
          "name": "mockMessageUpdateBodyDtoFactory",
          "file": "generated/rest-dtos/mock/message/message-update-body.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "Required<MessageUpdateBodyDto>",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/message/message-update-params.dto.mock.ts": [
        {
          "name": "mockMessageUpdateParamsDtoFactory",
          "file": "generated/rest-dtos/mock/message/message-update-params.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "MessageUpdateParamsDto",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/message/message-upsert-body.dto.mock.ts": [
        {
          "name": "mockMessageUpsertBodyDtoFactory",
          "file": "generated/rest-dtos/mock/message/message-upsert-body.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "Required<MessageUpsertBodyDto>",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/message/message-upsert-params.dto.mock.ts": [
        {
          "name": "mockMessageUpsertParamsDtoFactory",
          "file": "generated/rest-dtos/mock/message/message-upsert-params.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "MessageUpsertParamsDto",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/open-question/open-question-count-query.dto.mock.ts": [
        {
          "name": "mockOpenQuestionCountQueryDtoFactory",
          "file": "generated/rest-dtos/mock/open-question/open-question-count-query.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "Required<OpenQuestionCountQueryDto>",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/open-question/open-question-create-body.dto.mock.ts": [
        {
          "name": "mockOpenQuestionCreateBodyDtoFactory",
          "file": "generated/rest-dtos/mock/open-question/open-question-create-body.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "Required<OpenQuestionCreateBodyDto>",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/open-question/open-question-delete-params.dto.mock.ts": [
        {
          "name": "mockOpenQuestionDeleteParamsDtoFactory",
          "file": "generated/rest-dtos/mock/open-question/open-question-delete-params.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "OpenQuestionDeleteParamsDto",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/models/mock/open-question.mock.ts": [
        {
          "name": "mockOpenQuestionFactory",
          "file": "generated/models/mock/open-question.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "OpenQuestion",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "mockOpenQuestionIdFactory",
          "file": "generated/models/mock/open-question.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": []
        },
        {
          "name": "mockOpenQuestionKeyFactory",
          "file": "generated/models/mock/open-question.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": []
        },
        {
          "name": "mockOpenQuestionQuestionIdFactory",
          "file": "generated/models/mock/open-question.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": []
        },
        {
          "name": "mockOpenQuestionTextFactory",
          "file": "generated/models/mock/open-question.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": []
        }
      ],
      "generated/rest-dtos/mock/open-question/open-question-find-many-query.dto.mock.ts": [
        {
          "name": "mockOpenQuestionFindManyQueryDtoFactory",
          "file": "generated/rest-dtos/mock/open-question/open-question-find-many-query.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "Required<OpenQuestionFindManyQueryDto>",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/open-question/open-question-find-unique-params.dto.mock.ts": [
        {
          "name": "mockOpenQuestionFindUniqueParamsDtoFactory",
          "file": "generated/rest-dtos/mock/open-question/open-question-find-unique-params.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "OpenQuestionFindUniqueParamsDto",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/open-question/open-question-find-unique-query.dto.mock.ts": [
        {
          "name": "mockOpenQuestionFindUniqueQueryDtoFactory",
          "file": "generated/rest-dtos/mock/open-question/open-question-find-unique-query.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "OpenQuestionFindUniqueQueryDto",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/open-question/open-question-update-body.dto.mock.ts": [
        {
          "name": "mockOpenQuestionUpdateBodyDtoFactory",
          "file": "generated/rest-dtos/mock/open-question/open-question-update-body.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "Required<OpenQuestionUpdateBodyDto>",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/open-question/open-question-update-params.dto.mock.ts": [
        {
          "name": "mockOpenQuestionUpdateParamsDtoFactory",
          "file": "generated/rest-dtos/mock/open-question/open-question-update-params.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "OpenQuestionUpdateParamsDto",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/open-question/open-question-upsert-body.dto.mock.ts": [
        {
          "name": "mockOpenQuestionUpsertBodyDtoFactory",
          "file": "generated/rest-dtos/mock/open-question/open-question-upsert-body.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "Required<OpenQuestionUpsertBodyDto>",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/open-question/open-question-upsert-params.dto.mock.ts": [
        {
          "name": "mockOpenQuestionUpsertParamsDtoFactory",
          "file": "generated/rest-dtos/mock/open-question/open-question-upsert-params.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "OpenQuestionUpsertParamsDto",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/question/question-count-query.dto.mock.ts": [
        {
          "name": "mockQuestionCountQueryDtoFactory",
          "file": "generated/rest-dtos/mock/question/question-count-query.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "Required<QuestionCountQueryDto>",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/question/question-create-body.dto.mock.ts": [
        {
          "name": "mockQuestionCreateBodyDtoFactory",
          "file": "generated/rest-dtos/mock/question/question-create-body.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "Required<QuestionCreateBodyDto>",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/question/question-delete-params.dto.mock.ts": [
        {
          "name": "mockQuestionDeleteParamsDtoFactory",
          "file": "generated/rest-dtos/mock/question/question-delete-params.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "QuestionDeleteParamsDto",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/models/mock/question.mock.ts": [
        {
          "name": "mockQuestionFactory",
          "file": "generated/models/mock/question.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "Question",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "mockQuestionIdFactory",
          "file": "generated/models/mock/question.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": []
        },
        {
          "name": "mockQuestionParentQuestionIdFactory",
          "file": "generated/models/mock/question.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [],
          "returnType": "NonNullable<>"
        },
        {
          "name": "mockQuestionTagsIdsFactory",
          "file": "generated/models/mock/question.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [],
          "returnType": "string[]"
        },
        {
          "name": "mockQuestionTextFactory",
          "file": "generated/models/mock/question.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": []
        },
        {
          "name": "mockQuestionTitleFactory",
          "file": "generated/models/mock/question.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": []
        }
      ],
      "generated/rest-dtos/mock/question/question-find-many-query.dto.mock.ts": [
        {
          "name": "mockQuestionFindManyQueryDtoFactory",
          "file": "generated/rest-dtos/mock/question/question-find-many-query.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "Required<QuestionFindManyQueryDto>",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/question/question-find-unique-params.dto.mock.ts": [
        {
          "name": "mockQuestionFindUniqueParamsDtoFactory",
          "file": "generated/rest-dtos/mock/question/question-find-unique-params.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "QuestionFindUniqueParamsDto",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/question/question-find-unique-query.dto.mock.ts": [
        {
          "name": "mockQuestionFindUniqueQueryDtoFactory",
          "file": "generated/rest-dtos/mock/question/question-find-unique-query.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "QuestionFindUniqueQueryDto",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/question/question-update-body.dto.mock.ts": [
        {
          "name": "mockQuestionUpdateBodyDtoFactory",
          "file": "generated/rest-dtos/mock/question/question-update-body.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "Required<QuestionUpdateBodyDto>",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/question/question-update-params.dto.mock.ts": [
        {
          "name": "mockQuestionUpdateParamsDtoFactory",
          "file": "generated/rest-dtos/mock/question/question-update-params.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "QuestionUpdateParamsDto",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/question/question-upsert-body.dto.mock.ts": [
        {
          "name": "mockQuestionUpsertBodyDtoFactory",
          "file": "generated/rest-dtos/mock/question/question-upsert-body.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "Required<QuestionUpsertBodyDto>",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/question/question-upsert-params.dto.mock.ts": [
        {
          "name": "mockQuestionUpsertParamsDtoFactory",
          "file": "generated/rest-dtos/mock/question/question-upsert-params.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "QuestionUpsertParamsDto",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/tag/tag-count-query.dto.mock.ts": [
        {
          "name": "mockTagCountQueryDtoFactory",
          "file": "generated/rest-dtos/mock/tag/tag-count-query.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "Required<TagCountQueryDto>",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/tag/tag-create-body.dto.mock.ts": [
        {
          "name": "mockTagCreateBodyDtoFactory",
          "file": "generated/rest-dtos/mock/tag/tag-create-body.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "Required<TagCreateBodyDto>",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/tag/tag-delete-params.dto.mock.ts": [
        {
          "name": "mockTagDeleteParamsDtoFactory",
          "file": "generated/rest-dtos/mock/tag/tag-delete-params.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "TagDeleteParamsDto",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/models/mock/tag.mock.ts": [
        {
          "name": "mockTagFactory",
          "file": "generated/models/mock/tag.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "Tag",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "mockTagIdFactory",
          "file": "generated/models/mock/tag.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": []
        },
        {
          "name": "mockTagLabelFactory",
          "file": "generated/models/mock/tag.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": []
        }
      ],
      "generated/rest-dtos/mock/tag/tag-find-many-query.dto.mock.ts": [
        {
          "name": "mockTagFindManyQueryDtoFactory",
          "file": "generated/rest-dtos/mock/tag/tag-find-many-query.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "Required<TagFindManyQueryDto>",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/tag/tag-find-unique-params.dto.mock.ts": [
        {
          "name": "mockTagFindUniqueParamsDtoFactory",
          "file": "generated/rest-dtos/mock/tag/tag-find-unique-params.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "TagFindUniqueParamsDto",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/tag/tag-find-unique-query.dto.mock.ts": [
        {
          "name": "mockTagFindUniqueQueryDtoFactory",
          "file": "generated/rest-dtos/mock/tag/tag-find-unique-query.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "TagFindUniqueQueryDto",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/tag/tag-update-body.dto.mock.ts": [
        {
          "name": "mockTagUpdateBodyDtoFactory",
          "file": "generated/rest-dtos/mock/tag/tag-update-body.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "Required<TagUpdateBodyDto>",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/tag/tag-update-params.dto.mock.ts": [
        {
          "name": "mockTagUpdateParamsDtoFactory",
          "file": "generated/rest-dtos/mock/tag/tag-update-params.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "TagUpdateParamsDto",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/tag/tag-upsert-body.dto.mock.ts": [
        {
          "name": "mockTagUpsertBodyDtoFactory",
          "file": "generated/rest-dtos/mock/tag/tag-upsert-body.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "Required<TagUpsertBodyDto>",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/tag/tag-upsert-params.dto.mock.ts": [
        {
          "name": "mockTagUpsertParamsDtoFactory",
          "file": "generated/rest-dtos/mock/tag/tag-upsert-params.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "TagUpsertParamsDto",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/models/mock/user.mock.ts": [
        {
          "name": "mockUserBannedFactory",
          "file": "generated/models/mock/user.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": []
        },
        {
          "name": "mockUserEmailFactory",
          "file": "generated/models/mock/user.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": []
        },
        {
          "name": "mockUserFactory",
          "file": "generated/models/mock/user.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "User",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "mockUserGenderFactory",
          "file": "generated/models/mock/user.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": []
        },
        {
          "name": "mockUserIdFactory",
          "file": "generated/models/mock/user.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": []
        },
        {
          "name": "mockUserLastConnectedAtFactory",
          "file": "generated/models/mock/user.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [],
          "returnType": "NonNullable<>"
        },
        {
          "name": "mockUserNameFactory",
          "file": "generated/models/mock/user.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": []
        },
        {
          "name": "mockUserPasswordFactory",
          "file": "generated/models/mock/user.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": []
        },
        {
          "name": "mockUserRoleFactory",
          "file": "generated/models/mock/user.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": []
        }
      ],
      "generated/rest-dtos/mock/user/user-count-query.dto.mock.ts": [
        {
          "name": "mockUserCountQueryDtoFactory",
          "file": "generated/rest-dtos/mock/user/user-count-query.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "Required<UserCountQueryDto>",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/user/user-create-body.dto.mock.ts": [
        {
          "name": "mockUserCreateBodyDtoFactory",
          "file": "generated/rest-dtos/mock/user/user-create-body.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "Required<UserCreateBodyDto>",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/user/user-delete-params.dto.mock.ts": [
        {
          "name": "mockUserDeleteParamsDtoFactory",
          "file": "generated/rest-dtos/mock/user/user-delete-params.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "UserDeleteParamsDto",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/user/user-find-many-query.dto.mock.ts": [
        {
          "name": "mockUserFindManyQueryDtoFactory",
          "file": "generated/rest-dtos/mock/user/user-find-many-query.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "Required<UserFindManyQueryDto>",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/user/user-find-unique-params.dto.mock.ts": [
        {
          "name": "mockUserFindUniqueParamsDtoFactory",
          "file": "generated/rest-dtos/mock/user/user-find-unique-params.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "UserFindUniqueParamsDto",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/user/user-find-unique-query.dto.mock.ts": [
        {
          "name": "mockUserFindUniqueQueryDtoFactory",
          "file": "generated/rest-dtos/mock/user/user-find-unique-query.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "UserFindUniqueQueryDto",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/user/user-update-body.dto.mock.ts": [
        {
          "name": "mockUserUpdateBodyDtoFactory",
          "file": "generated/rest-dtos/mock/user/user-update-body.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "Required<UserUpdateBodyDto>",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/user/user-update-params.dto.mock.ts": [
        {
          "name": "mockUserUpdateParamsDtoFactory",
          "file": "generated/rest-dtos/mock/user/user-update-params.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "UserUpdateParamsDto",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/user/user-upsert-body.dto.mock.ts": [
        {
          "name": "mockUserUpsertBodyDtoFactory",
          "file": "generated/rest-dtos/mock/user/user-upsert-body.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "Required<UserUpsertBodyDto>",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/user/user-upsert-params.dto.mock.ts": [
        {
          "name": "mockUserUpsertParamsDtoFactory",
          "file": "generated/rest-dtos/mock/user/user-upsert-params.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "UserUpsertParamsDto",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/models/mock/variable.mock.ts": [
        {
          "name": "mockVariableAnswerIdFactory",
          "file": "generated/models/mock/variable.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": []
        },
        {
          "name": "mockVariableFactory",
          "file": "generated/models/mock/variable.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "Variable",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "mockVariableIdFactory",
          "file": "generated/models/mock/variable.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": []
        },
        {
          "name": "mockVariableOpenQuestionIdFactory",
          "file": "generated/models/mock/variable.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": []
        },
        {
          "name": "mockVariableValueFactory",
          "file": "generated/models/mock/variable.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": []
        }
      ],
      "generated/rest-dtos/mock/variable/variable-count-query.dto.mock.ts": [
        {
          "name": "mockVariableCountQueryDtoFactory",
          "file": "generated/rest-dtos/mock/variable/variable-count-query.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "Required<VariableCountQueryDto>",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/variable/variable-create-body.dto.mock.ts": [
        {
          "name": "mockVariableCreateBodyDtoFactory",
          "file": "generated/rest-dtos/mock/variable/variable-create-body.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "Required<VariableCreateBodyDto>",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/variable/variable-delete-params.dto.mock.ts": [
        {
          "name": "mockVariableDeleteParamsDtoFactory",
          "file": "generated/rest-dtos/mock/variable/variable-delete-params.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "VariableDeleteParamsDto",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/variable/variable-find-many-query.dto.mock.ts": [
        {
          "name": "mockVariableFindManyQueryDtoFactory",
          "file": "generated/rest-dtos/mock/variable/variable-find-many-query.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "Required<VariableFindManyQueryDto>",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/variable/variable-find-unique-params.dto.mock.ts": [
        {
          "name": "mockVariableFindUniqueParamsDtoFactory",
          "file": "generated/rest-dtos/mock/variable/variable-find-unique-params.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "VariableFindUniqueParamsDto",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/variable/variable-find-unique-query.dto.mock.ts": [
        {
          "name": "mockVariableFindUniqueQueryDtoFactory",
          "file": "generated/rest-dtos/mock/variable/variable-find-unique-query.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "VariableFindUniqueQueryDto",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/variable/variable-update-body.dto.mock.ts": [
        {
          "name": "mockVariableUpdateBodyDtoFactory",
          "file": "generated/rest-dtos/mock/variable/variable-update-body.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "Required<VariableUpdateBodyDto>",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/variable/variable-update-params.dto.mock.ts": [
        {
          "name": "mockVariableUpdateParamsDtoFactory",
          "file": "generated/rest-dtos/mock/variable/variable-update-params.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "VariableUpdateParamsDto",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/variable/variable-upsert-body.dto.mock.ts": [
        {
          "name": "mockVariableUpsertBodyDtoFactory",
          "file": "generated/rest-dtos/mock/variable/variable-upsert-body.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "Required<VariableUpsertBodyDto>",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "generated/rest-dtos/mock/variable/variable-upsert-params.dto.mock.ts": [
        {
          "name": "mockVariableUpsertParamsDtoFactory",
          "file": "generated/rest-dtos/mock/variable/variable-upsert-params.dto.mock.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "override"
            }
          ],
          "returnType": "VariableUpsertParamsDto",
          "jsdoctags": [
            {
              "name": "override",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ]
    },
    "groupedEnumerations": {},
    "groupedTypeAliases": {
      "generated/models/enums/answer.enum.ts": [
        {
          "name": "AnswerInclude",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "",
          "file": "generated/models/enums/answer.enum.ts",
          "description": "",
          "kind": 175
        }
      ],
      "generated/rext-client/helpers/rest-ajax.ts": [
        {
          "name": "CountAjaxOptions",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "Omit<AjaxRequest | \"url\" | \"method\">",
          "file": "generated/rext-client/helpers/rest-ajax.ts",
          "description": "",
          "kind": 161
        },
        {
          "name": "CreateAjaxOptions",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "Omit<AjaxRequest | \"url\" | \"method\" | \"body\">",
          "file": "generated/rext-client/helpers/rest-ajax.ts",
          "description": "",
          "kind": 161
        },
        {
          "name": "FindManyOptions",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "Omit<AjaxRequest | \"url\" | \"method\">",
          "file": "generated/rext-client/helpers/rest-ajax.ts",
          "description": "",
          "kind": 161
        },
        {
          "name": "FindUniqueOptions",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "Omit<AjaxRequest | \"url\" | \"method\">",
          "file": "generated/rext-client/helpers/rest-ajax.ts",
          "description": "",
          "kind": 161
        },
        {
          "name": "PatchOptions",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "Omit<AjaxRequest | \"url\" | \"method\" | \"body\">",
          "file": "generated/rext-client/helpers/rest-ajax.ts",
          "description": "",
          "kind": 161
        },
        {
          "name": "RemoveOptions",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "Omit<AjaxRequest | \"url\" | \"method\">",
          "file": "generated/rext-client/helpers/rest-ajax.ts",
          "description": "",
          "kind": 161
        },
        {
          "name": "UpsertOptions",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "Omit<AjaxRequest | \"url\" | \"method\" | \"body\">",
          "file": "generated/rext-client/helpers/rest-ajax.ts",
          "description": "",
          "kind": 161
        }
      ],
      "generated/models/enums/message.enum.ts": [
        {
          "name": "MessageInclude",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "",
          "file": "generated/models/enums/message.enum.ts",
          "description": "",
          "kind": 175
        }
      ],
      "generated/models/enums/open-question.enum.ts": [
        {
          "name": "OpenQuestionInclude",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "",
          "file": "generated/models/enums/open-question.enum.ts",
          "description": "",
          "kind": 175
        }
      ],
      "generated/models/enums/question.enum.ts": [
        {
          "name": "QuestionInclude",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "",
          "file": "generated/models/enums/question.enum.ts",
          "description": "",
          "kind": 175
        }
      ],
      "generated/models/enums/sort-order.ts": [
        {
          "name": "SortOrder",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "",
          "file": "generated/models/enums/sort-order.ts",
          "description": "",
          "kind": 175
        }
      ],
      "generated/models/enums/tag.enum.ts": [
        {
          "name": "TagInclude",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "",
          "file": "generated/models/enums/tag.enum.ts",
          "description": "",
          "kind": 175
        }
      ],
      "generated/rext-client/helpers/url.ts": [
        {
          "name": "URLSearchParamsType",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "string | string[][] | Record<string | string> | URLSearchParams | Record<string | string | number | boolean | [] | [] | Date | undefined>",
          "file": "generated/rext-client/helpers/url.ts",
          "description": "",
          "kind": 168
        }
      ],
      "generated/models/enums/user.enum.ts": [
        {
          "name": "UserGender",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "",
          "file": "generated/models/enums/user.enum.ts",
          "description": "",
          "kind": 175
        },
        {
          "name": "UserInclude",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "",
          "file": "generated/models/enums/user.enum.ts",
          "description": "",
          "kind": 175
        }
      ],
      "generated/models/enums/variable.enum.ts": [
        {
          "name": "VariableInclude",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "",
          "file": "generated/models/enums/variable.enum.ts",
          "description": "",
          "kind": 175
        }
      ]
    }
  },
  "routes": {
    "name": "<root>",
    "kind": "module",
    "className": "AppModule",
    "children": [
      {
        "name": "routes",
        "filename": "src/app/app-routing.module.ts",
        "module": "AppRoutingModule",
        "children": [
          {
            "path": "",
            "component": "MoleculeHomeComponent"
          },
          {
            "path": "**",
            "redirectTo": "/",
            "pathMatch": "full"
          }
        ],
        "kind": "module"
      }
    ]
  },
  "coverage": {
    "count": 5,
    "status": "low",
    "files": [
      {
        "filePath": "e2e/src/app.po.ts",
        "type": "class",
        "linktype": "classe",
        "name": "AppPage",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "generated/angular-rext-client/services/answer.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "AnswerService",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/angular-rext-client/services/message.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "MessageService",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/angular-rext-client/services/open-question.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "OpenQuestionService",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/angular-rext-client/services/question.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "QuestionService",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/angular-rext-client/services/tag.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "TagService",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/angular-rext-client/services/user.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "UserService",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/angular-rext-client/services/variable.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "VariableService",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/models/enums/answer.enum.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "AnswerInclude",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/enums/message.enum.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "MessageInclude",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/enums/open-question.enum.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "OpenQuestionInclude",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/enums/question.enum.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "QuestionInclude",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/enums/sort-order.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "SortOrder",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/enums/tag.enum.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "TagInclude",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/enums/user.enum.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "UserGender",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/enums/user.enum.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "UserInclude",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/enums/variable.enum.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "VariableInclude",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/mock/answer.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockAnswerFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/mock/answer.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockAnswerIdFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/mock/answer.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockAnswerQuestionIdFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/mock/answer.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockAnswerTagsIdsFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/mock/answer.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockAnswerUserIdFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/mock/message.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockMessageFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/mock/message.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockMessageHourFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/mock/message.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockMessageIdFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/mock/message.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockMessageQuestionsIdsFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/mock/message.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockMessageTagsIdsFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/mock/message.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockMessageTextFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/mock/open-question.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockOpenQuestionFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/mock/open-question.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockOpenQuestionIdFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/mock/open-question.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockOpenQuestionKeyFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/mock/open-question.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockOpenQuestionQuestionIdFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/mock/open-question.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockOpenQuestionTextFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/mock/question.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockQuestionFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/mock/question.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockQuestionIdFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/mock/question.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockQuestionParentQuestionIdFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/mock/question.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockQuestionTagsIdsFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/mock/question.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockQuestionTextFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/mock/question.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockQuestionTitleFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/mock/tag.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockTagFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/mock/tag.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockTagIdFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/mock/tag.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockTagLabelFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/mock/user.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockUserBannedFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/mock/user.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockUserEmailFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/mock/user.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockUserFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/mock/user.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockUserGenderFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/mock/user.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockUserIdFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/mock/user.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockUserLastConnectedAtFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/mock/user.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockUserNameFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/mock/user.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockUserPasswordFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/mock/user.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockUserRoleFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/mock/variable.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockVariableAnswerIdFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/mock/variable.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockVariableFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/mock/variable.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockVariableIdFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/mock/variable.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockVariableOpenQuestionIdFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/mock/variable.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockVariableValueFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/models/models/answer.ts",
        "type": "class",
        "linktype": "classe",
        "name": "Answer",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "generated/models/models/message.ts",
        "type": "class",
        "linktype": "classe",
        "name": "Message",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "generated/models/models/open-question.ts",
        "type": "class",
        "linktype": "classe",
        "name": "OpenQuestion",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "generated/models/models/question.ts",
        "type": "class",
        "linktype": "classe",
        "name": "Question",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "generated/models/models/tag.ts",
        "type": "class",
        "linktype": "classe",
        "name": "Tag",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "generated/models/models/user.ts",
        "type": "class",
        "linktype": "classe",
        "name": "User",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "generated/models/models/variable.ts",
        "type": "class",
        "linktype": "classe",
        "name": "Variable",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/answer/answer-count-query.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "AnswerCountQueryDto",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/answer/answer-create-body.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "AnswerCreateBodyDto",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/answer/answer-delete-params.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "AnswerDeleteParamsDto",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/answer/answer-find-many-query.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "AnswerFindManyQueryDto",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/answer/answer-find-unique-params.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "AnswerFindUniqueParamsDto",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/answer/answer-find-unique-query.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "AnswerFindUniqueQueryDto",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/answer/answer-update-body.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "AnswerUpdateBodyDto",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/answer/answer-update-params.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "AnswerUpdateParamsDto",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/answer/answer-upsert-body.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "AnswerUpsertBodyDto",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/answer/answer-upsert-params.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "AnswerUpsertParamsDto",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/message/message-count-query.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "MessageCountQueryDto",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/message/message-create-body.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "MessageCreateBodyDto",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/message/message-delete-params.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "MessageDeleteParamsDto",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/message/message-find-many-query.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "MessageFindManyQueryDto",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/message/message-find-unique-params.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "MessageFindUniqueParamsDto",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/message/message-find-unique-query.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "MessageFindUniqueQueryDto",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/message/message-update-body.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "MessageUpdateBodyDto",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/message/message-update-params.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "MessageUpdateParamsDto",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/message/message-upsert-body.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "MessageUpsertBodyDto",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/message/message-upsert-params.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "MessageUpsertParamsDto",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/open-question/open-question-count-query.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "OpenQuestionCountQueryDto",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/open-question/open-question-create-body.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "OpenQuestionCreateBodyDto",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/open-question/open-question-delete-params.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "OpenQuestionDeleteParamsDto",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/open-question/open-question-find-many-query.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "OpenQuestionFindManyQueryDto",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/open-question/open-question-find-unique-params.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "OpenQuestionFindUniqueParamsDto",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/open-question/open-question-find-unique-query.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "OpenQuestionFindUniqueQueryDto",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/open-question/open-question-update-body.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "OpenQuestionUpdateBodyDto",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/open-question/open-question-update-params.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "OpenQuestionUpdateParamsDto",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/open-question/open-question-upsert-body.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "OpenQuestionUpsertBodyDto",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/open-question/open-question-upsert-params.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "OpenQuestionUpsertParamsDto",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/question/question-count-query.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "QuestionCountQueryDto",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/question/question-create-body.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "QuestionCreateBodyDto",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/question/question-delete-params.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "QuestionDeleteParamsDto",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/question/question-find-many-query.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "QuestionFindManyQueryDto",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/question/question-find-unique-params.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "QuestionFindUniqueParamsDto",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/question/question-find-unique-query.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "QuestionFindUniqueQueryDto",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/question/question-update-body.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "QuestionUpdateBodyDto",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/question/question-update-params.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "QuestionUpdateParamsDto",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/question/question-upsert-body.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "QuestionUpsertBodyDto",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/question/question-upsert-params.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "QuestionUpsertParamsDto",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/tag/tag-count-query.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "TagCountQueryDto",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/tag/tag-create-body.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "TagCreateBodyDto",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/tag/tag-delete-params.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "TagDeleteParamsDto",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/tag/tag-find-many-query.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "TagFindManyQueryDto",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/tag/tag-find-unique-params.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "TagFindUniqueParamsDto",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/tag/tag-find-unique-query.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "TagFindUniqueQueryDto",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/tag/tag-update-body.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "TagUpdateBodyDto",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/tag/tag-update-params.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "TagUpdateParamsDto",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/tag/tag-upsert-body.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "TagUpsertBodyDto",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/tag/tag-upsert-params.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "TagUpsertParamsDto",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/user/user-count-query.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "UserCountQueryDto",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/user/user-create-body.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "UserCreateBodyDto",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/user/user-delete-params.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "UserDeleteParamsDto",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/user/user-find-many-query.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "UserFindManyQueryDto",
        "coveragePercent": 0,
        "coverageCount": "0/13",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/user/user-find-unique-params.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "UserFindUniqueParamsDto",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/user/user-find-unique-query.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "UserFindUniqueQueryDto",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/user/user-update-body.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "UserUpdateBodyDto",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/user/user-update-params.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "UserUpdateParamsDto",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/user/user-upsert-body.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "UserUpsertBodyDto",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/user/user-upsert-params.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "UserUpsertParamsDto",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/variable/variable-count-query.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "VariableCountQueryDto",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/variable/variable-create-body.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "VariableCreateBodyDto",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/variable/variable-delete-params.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "VariableDeleteParamsDto",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/variable/variable-find-many-query.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "VariableFindManyQueryDto",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/variable/variable-find-unique-params.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "VariableFindUniqueParamsDto",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/variable/variable-find-unique-query.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "VariableFindUniqueQueryDto",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/variable/variable-update-body.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "VariableUpdateBodyDto",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/variable/variable-update-params.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "VariableUpdateParamsDto",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/variable/variable-upsert-body.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "VariableUpsertBodyDto",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/dtos/variable/variable-upsert-params.dto.ts",
        "type": "class",
        "linktype": "classe",
        "name": "VariableUpsertParamsDto",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/answer/answer-count-query.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockAnswerCountQueryDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/answer/answer-create-body.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockAnswerCreateBodyDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/answer/answer-delete-params.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockAnswerDeleteParamsDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/answer/answer-find-many-query.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockAnswerFindManyQueryDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/answer/answer-find-unique-params.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockAnswerFindUniqueParamsDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/answer/answer-find-unique-query.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockAnswerFindUniqueQueryDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/answer/answer-update-body.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockAnswerUpdateBodyDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/answer/answer-update-params.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockAnswerUpdateParamsDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/answer/answer-upsert-body.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockAnswerUpsertBodyDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/answer/answer-upsert-params.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockAnswerUpsertParamsDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/message/message-count-query.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockMessageCountQueryDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/message/message-create-body.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockMessageCreateBodyDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/message/message-delete-params.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockMessageDeleteParamsDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/message/message-find-many-query.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockMessageFindManyQueryDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/message/message-find-unique-params.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockMessageFindUniqueParamsDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/message/message-find-unique-query.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockMessageFindUniqueQueryDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/message/message-update-body.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockMessageUpdateBodyDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/message/message-update-params.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockMessageUpdateParamsDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/message/message-upsert-body.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockMessageUpsertBodyDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/message/message-upsert-params.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockMessageUpsertParamsDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/open-question/open-question-count-query.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockOpenQuestionCountQueryDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/open-question/open-question-create-body.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockOpenQuestionCreateBodyDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/open-question/open-question-delete-params.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockOpenQuestionDeleteParamsDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/open-question/open-question-find-many-query.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockOpenQuestionFindManyQueryDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/open-question/open-question-find-unique-params.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockOpenQuestionFindUniqueParamsDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/open-question/open-question-find-unique-query.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockOpenQuestionFindUniqueQueryDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/open-question/open-question-update-body.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockOpenQuestionUpdateBodyDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/open-question/open-question-update-params.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockOpenQuestionUpdateParamsDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/open-question/open-question-upsert-body.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockOpenQuestionUpsertBodyDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/open-question/open-question-upsert-params.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockOpenQuestionUpsertParamsDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/question/question-count-query.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockQuestionCountQueryDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/question/question-create-body.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockQuestionCreateBodyDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/question/question-delete-params.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockQuestionDeleteParamsDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/question/question-find-many-query.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockQuestionFindManyQueryDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/question/question-find-unique-params.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockQuestionFindUniqueParamsDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/question/question-find-unique-query.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockQuestionFindUniqueQueryDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/question/question-update-body.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockQuestionUpdateBodyDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/question/question-update-params.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockQuestionUpdateParamsDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/question/question-upsert-body.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockQuestionUpsertBodyDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/question/question-upsert-params.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockQuestionUpsertParamsDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/tag/tag-count-query.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockTagCountQueryDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/tag/tag-create-body.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockTagCreateBodyDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/tag/tag-delete-params.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockTagDeleteParamsDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/tag/tag-find-many-query.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockTagFindManyQueryDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/tag/tag-find-unique-params.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockTagFindUniqueParamsDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/tag/tag-find-unique-query.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockTagFindUniqueQueryDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/tag/tag-update-body.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockTagUpdateBodyDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/tag/tag-update-params.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockTagUpdateParamsDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/tag/tag-upsert-body.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockTagUpsertBodyDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/tag/tag-upsert-params.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockTagUpsertParamsDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/user/user-count-query.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockUserCountQueryDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/user/user-create-body.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockUserCreateBodyDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/user/user-delete-params.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockUserDeleteParamsDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/user/user-find-many-query.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockUserFindManyQueryDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/user/user-find-unique-params.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockUserFindUniqueParamsDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/user/user-find-unique-query.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockUserFindUniqueQueryDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/user/user-update-body.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockUserUpdateBodyDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/user/user-update-params.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockUserUpdateParamsDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/user/user-upsert-body.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockUserUpsertBodyDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/user/user-upsert-params.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockUserUpsertParamsDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/variable/variable-count-query.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockVariableCountQueryDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/variable/variable-create-body.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockVariableCreateBodyDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/variable/variable-delete-params.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockVariableDeleteParamsDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/variable/variable-find-many-query.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockVariableFindManyQueryDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/variable/variable-find-unique-params.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockVariableFindUniqueParamsDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/variable/variable-find-unique-query.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockVariableFindUniqueQueryDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/variable/variable-update-body.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockVariableUpdateBodyDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/variable/variable-update-params.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockVariableUpdateParamsDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/variable/variable-upsert-body.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockVariableUpsertBodyDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rest-dtos/mock/variable/variable-upsert-params.dto.mock.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "mockVariableUpsertParamsDtoFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rext-client/helpers/rest-ajax.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "ajax",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rext-client/helpers/rest-ajax.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "count",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "generated/rext-client/helpers/rest-ajax.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "create",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "generated/rext-client/helpers/rest-ajax.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "extractAjaxResponseData",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rext-client/helpers/rest-ajax.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "findMany",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "generated/rext-client/helpers/rest-ajax.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "findUnique",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "generated/rext-client/helpers/rest-ajax.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "patch",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "generated/rext-client/helpers/rest-ajax.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "remove",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "generated/rext-client/helpers/rest-ajax.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "upsert",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "generated/rext-client/helpers/transform-and-validate.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "TransformAndValidateOptions",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "generated/rext-client/helpers/transform-and-validate.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "defaultsPropertiesMap",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rext-client/helpers/transform-and-validate.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "fromDto",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rext-client/helpers/transform-and-validate.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "getDefaults",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rext-client/helpers/transform-and-validate.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "isAlike",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rext-client/helpers/transform-and-validate.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "transformAndValidate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rext-client/helpers/transform-and-validate.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "transformAndValidateMap",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rext-client/helpers/url.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "getUrl",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rext-client/helpers/url.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "getUrlSearchParams",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "generated/rext-client/rext-client.ts",
        "type": "class",
        "linktype": "classe",
        "name": "RextClient",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "generated/rext-client/services/answer.service.ts",
        "type": "class",
        "linktype": "classe",
        "name": "AnswerService",
        "coveragePercent": 85,
        "coverageCount": "18/21",
        "status": "very-good"
      },
      {
        "filePath": "generated/rext-client/services/message.service.ts",
        "type": "class",
        "linktype": "classe",
        "name": "MessageService",
        "coveragePercent": 85,
        "coverageCount": "18/21",
        "status": "very-good"
      },
      {
        "filePath": "generated/rext-client/services/open-question.service.ts",
        "type": "class",
        "linktype": "classe",
        "name": "OpenQuestionService",
        "coveragePercent": 85,
        "coverageCount": "18/21",
        "status": "very-good"
      },
      {
        "filePath": "generated/rext-client/services/question.service.ts",
        "type": "class",
        "linktype": "classe",
        "name": "QuestionService",
        "coveragePercent": 85,
        "coverageCount": "18/21",
        "status": "very-good"
      },
      {
        "filePath": "generated/rext-client/services/tag.service.ts",
        "type": "class",
        "linktype": "classe",
        "name": "TagService",
        "coveragePercent": 85,
        "coverageCount": "18/21",
        "status": "very-good"
      },
      {
        "filePath": "generated/rext-client/services/user.service.ts",
        "type": "class",
        "linktype": "classe",
        "name": "UserService",
        "coveragePercent": 85,
        "coverageCount": "18/21",
        "status": "very-good"
      },
      {
        "filePath": "generated/rext-client/services/variable.service.ts",
        "type": "class",
        "linktype": "classe",
        "name": "VariableService",
        "coveragePercent": 85,
        "coverageCount": "18/21",
        "status": "very-good"
      },
      {
        "filePath": "src/app/app.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "AppComponent",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/molecules/molecule-home/molecule-home.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MoleculeHomeComponent",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/environments/environment.prod.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "environment",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/environments/environment.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "environment",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/test.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "context",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/test.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "require",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      }
    ]
  }
}
