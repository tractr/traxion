import ecsFormat from '@elastic/ecs-winston-format';
import { ValidationPipe } from '@nestjs/common';
import { NestFactory } from '@nestjs/core';
import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';
import cookieParser from 'cookie-parser';
import morgan from 'morgan';
import * as winston from 'winston';

import { AppModule } from './app/app.module';

import { PrismaExceptionInterceptor } from '@tractr/nestjs-core';
import {
  createWinstonLogger,
  nestLikeConsoleFormat,
} from '@tractr/nestjs-winston';

// Bootstrap the main application
async function bootstrap() {
  const development = process.env.NODE_ENV === 'development';
  const level = process.env.LOG_LEVEL || 'info';
  const port = process.env.PORT || 3000;
  const globalPrefix = 'api';

  const logger = createWinstonLogger({
    // options (same as WinstonModule.forRoot() options)
    level,
    format: development
      ? nestLikeConsoleFormat({ appName: 'Stack', prettyPrint: true })
      : ecsFormat(),
    transports: [new winston.transports.Console()],
  });

  // Instantiate nest app
  const app = await NestFactory.create(AppModule, {
    logger,
  });

  // eslint-disable-next-line @typescript-eslint/unbound-method
  app.use(
    morgan('combined', {
      stream: { write: (str: string) => logger.debug(str) },
    }),
  );

  const { COOKIE_SECRET: cookieSecret } = process.env;

  if (cookieSecret === undefined || cookieSecret === '')
    throw new Error('COOKIE_SECRET is missing in the environment variables');

  app.use(cookieParser(cookieSecret));

  // Set global validation pipe
  app.useGlobalPipes(
    new ValidationPipe({
      transform: true,
      transformOptions: {
        enableImplicitConversion: false,
        exposeDefaultValues: true,
      },
    }),
  );

  app.useGlobalInterceptors(new PrismaExceptionInterceptor());

  // Set swagger documentation
  const swaggerOptions = new DocumentBuilder()
    .setTitle('Hapify boilerplate')
    .setDescription('This is the REST API documentation generated by Swagger')
    .setVersion('1.0')
    .addBearerAuth()
    .addTag('swagger')
    .build();

  const swaggerDocument = SwaggerModule.createDocument(app, swaggerOptions);
  SwaggerModule.setup('api', app, swaggerDocument);

  // Start app and define port
  await app.listen(port, () => {
    logger.log(`Listening at http://localhost:${port}/${globalPrefix}`);
  });
}

bootstrap().catch((e) => {
  console.error('Failed to start the server. See the error below.');
  console.error(e);
});
