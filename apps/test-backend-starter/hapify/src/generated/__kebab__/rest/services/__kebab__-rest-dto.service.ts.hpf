import { Injectable } from '@nestjs/common';
import { Prisma } from '@prisma/client';
import {
  <<Model pascal>>CountQueryDto,
  <<Model pascal>>CreateBodyDto,
  <<Model pascal>>FindManyQueryDto,
  <<Model pascal>>FindUniqueParamsDto,
  <<if Fields entity>>
  <<Model pascal>>FindUniqueQueryDto,
  <<endif>>
  <<Model pascal>>UpdateBodyDto,
  <<Model pascal>>UpdateParamsDto,
  <<Model pascal>>UpsertBodyDto,
  <<Model pascal>>UpsertParamsDto,
  <<Model pascal>>DeleteParamsDto,
} from '../dtos';
  
@Injectable()
export class <<Model pascal>>RestDtoService {
  public formatCreateDto(bodyDto: <<Model pascal>>CreateBodyDto): Prisma.<<Model pascal>>CreateArgs {
    return { data: { ...bodyDto } };
  }
    
  public formatCountDto(queryDto: <<Model pascal>>CountQueryDto): Prisma.<<Model pascal>>CountArgs {
    const {
    <<for Fields searchable field>>
      <<field camel>>,
    <<endfor>>
    } = queryDto;
    const where: Prisma.UserWhereInput = {
    <<for Fields searchable field>>
      <<if field multiple>>
      <<field camel>>: <<field camel>> ? { hasSome: <<field camel>> } : undefined,
      <<else>>
      <<field camel>>,
      <<endif>>
    <<endfor>>
    }
    return { where };
  }
 
  public formatFindUniqueDtos(
    paramsDto: <<Model pascal>>FindUniqueParamsDto,
    <<if Fields entity>>
    queryDto?: <<Model pascal>>FindUniqueQueryDto
    <<endif>>
  ): Prisma.<<Model pascal>>FindUniqueArgs {
    const prisma<<Model pascal>>FindUniqueArgs: Prisma.<<Model pascal>>FindUniqueArgs = {
      where: { ...paramsDto },
    };
    <<if Fields entity>>
    if (queryDto) prisma<<Model pascal>>FindUniqueArgs.include = { ...queryDto };
    <<endif>>
    return prisma<<Model pascal>>FindUniqueArgs;
  }
    
  public formatFindManyDto(
    queryDto: <<Model pascal>>FindManyQueryDto
  ): Prisma.<<Model pascal>>FindManyArgs {
    const {
    <<for Fields searchable field>>
      <<field camel>>,
    <<endfor>>
    } = queryDto;
    const where: Prisma.UserWhereInput = {
    <<for Fields searchable field>>
      <<if field multiple>>
      <<field camel>>: <<field camel>> ? { hasSome: <<field camel>> } : undefined,
      <<else>>
      <<field camel>>,
      <<endif>>
    <<endfor>>
    }
    return { where };
  }
    
  public formatUpdateDtos(
    paramsDto: <<Model pascal>>UpdateParamsDto,
    bodyDto: <<Model pascal>>UpdateBodyDto
  ): Prisma.<<Model pascal>>UpdateArgs {
    return { data: { ...bodyDto }, where: { ...paramsDto } };
  }
    
  public formatUpsertDtos(
    paramsDto: <<Model pascal>>UpsertParamsDto,
    bodyDto: <<Model pascal>>UpsertBodyDto
  ): Prisma.<<Model pascal>>UpsertArgs {
    return { 
      create: { ...bodyDto },
      update: { ...bodyDto },
      where: { ...paramsDto } 
    };
  }
  
  public formatDeleteDto(
    paramsDto: <<Model pascal>>DeleteParamsDto
  ): Prisma.<<Model pascal>>DeleteArgs {
    return { where: { ...paramsDto } };
  }
}
