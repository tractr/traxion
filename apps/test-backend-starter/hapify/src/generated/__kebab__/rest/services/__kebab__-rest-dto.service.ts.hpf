import { Injectable } from '@nestjs/common';
import { Prisma } from '@prisma/client';
import {
  <<Model pascal>>CountQueryDto,
  <<Model pascal>>CreateBodyDto,
  <<Model pascal>>FindManyQueryDto,
  <<Model pascal>>FindUniqueParamsDto,
  // TODO: add condition to templates (mode must have relations)
  // <if Fields entity>>
  <<Model pascal>>FindUniqueQueryDto,
  // <endif>>
  <<Model pascal>>UpdateBodyDto,
  <<Model pascal>>UpdateParamsDto,
  <<Model pascal>>UpsertBodyDto,
  <<Model pascal>>UpsertParamsDto,
  <<Model pascal>>DeleteParamsDto,
} from '../dtos';

// TODO: add condition to templates (mode must have relations)
// <if Fields entity>>
import { formatPopulate } from '../../../helpers';
// <endif>>

@Injectable()
export class <<Model pascal>>RestDtoService {
  public formatCreateDto(
    {
    <<for Fields not internal field>>
      <<field camel>>,
    <<endfor>>
    }: <<Model pascal>>CreateBodyDto
  ): Prisma.<<Model pascal>>CreateArgs {
    const data = {
    <<for Fields not internal field>>
      <<if field entity>>
    <<field camel>>: { connect: { id: <<field camel>> } },
      <<else>>
    <<field camel>>,
      <<endif>>
    <<endfor>>
    }
    return { data };
  }
    
  public formatCountDto(
    {
    <<for Fields searchable field>>
      <<field camel>>,
    <<endfor>>
    }: <<Model pascal>>CountQueryDto): Prisma.<<Model pascal>>CountArgs {
    const where = {
    <<for Fields searchable field>>
      <<if field multiple>>
        <<field camel>>: <<field camel>> ? { hasSome: <<field camel>> } : undefined,
      <<elseif field entity>>
        <<field camel>>: { id: <<field camel>> },
      <<else>>
        <<field camel>>,
      <<endif>>
    <<endfor>>
    }
    return { where };
  }
 
  public formatFindUniqueDtos(
    paramsDto: <<Model pascal>>FindUniqueParamsDto,
    { populate }: <<Model pascal>>FindUniqueQueryDto
  ): Prisma.<<Model pascal>>FindUniqueArgs {
    // TODO: add condition to templates (mode must have relations)
    const include = formatPopulate<Prisma.<<Model pascal>>Include>(populate);
    return { 
      where: { ...paramsDto },
      include,
    };
  }
    
  public formatFindManyDto(
    {
    <<for Fields searchable field>>
      <<field camel>>,
    <<endfor>>
      populate,
      sort,
      order,
      take,
      skip,
    }: <<Model pascal>>FindManyQueryDto
  ): Prisma.<<Model pascal>>FindManyArgs {
    const where: Prisma.<<Model pascal>>WhereInput = {
    <<for Fields searchable field>>
      <<if field multiple>>
      <<field camel>>: <<field camel>> ? { hasSome: <<field camel>> } : undefined,
      <<elseif field entity>>
      <<field camel>>: { id: <<field camel>> },
      <<else>>
      <<field camel>>,
      <<endif>>
    <<endfor>>
    }
    const orderBy = {[sort]: order}
    const include = formatPopulate<Prisma.<<Model pascal>>Include>(populate);
    return { where, take, skip, orderBy, include, };
  }
    
  public formatUpdateDtos(
    paramsDto: <<Model pascal>>UpdateParamsDto,
    {
    <<for Fields not internal field>>
      <<field camel>>,
    <<endfor>>
    }: <<Model pascal>>UpdateBodyDto
  ): Prisma.<<Model pascal>>UpdateArgs {
    const data = {
    <<for Fields not internal field>>
      <<if field entity>>
    <<field camel>>: { connect: { id: <<field camel>> } },
      <<else>>
    <<field camel>>,
      <<endif>>
    <<endfor>>
    }
    return { data, where: { ...paramsDto } };
  }
    
  public formatUpsertDtos(
    paramsDto: <<Model pascal>>UpsertParamsDto,
    {
    <<for Fields not internal field>>
      <<field camel>>,
    <<endfor>>
    }: <<Model pascal>>UpsertBodyDto
  ): Prisma.<<Model pascal>>UpsertArgs {
    const create = {
    <<for Fields not internal field>>
      <<if field entity>>
    <<field camel>>: { connect: { id: <<field camel>> } },
      <<else>>
    <<field camel>>,
      <<endif>>
    <<endfor>>
    };
    const update = {
    <<for Fields not internal field>>
      <<if field entity>>
    <<field camel>>: { connect: { id: <<field camel>> } },
      <<else>>
    <<field camel>>,
      <<endif>>
    <<endfor>>
    };
    return { 
      create,
      update,
      where: { ...paramsDto } 
    };
  }
  
  public formatDeleteDto(
    paramsDto: <<Model pascal>>DeleteParamsDto
  ): Prisma.<<Model pascal>>DeleteArgs {
    return { where: { ...paramsDto } };
  }
}
