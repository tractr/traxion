import { InputType } from '@nestjs/graphql';
<<if Fields enum>>
import {
  <<for Fields enum enumField>>
  <<Model pascal>><<enumField pascal>>
  <<endfor>>
} from '@prisma/client';
<<endif>>

<<if Fields not internal>>
import {  
  <<if Fields boolean and not internal>>
  IsBoolean, 
  <<endif>>

  <<if Fields string or entity or enum and not internal>>
  IsString,
  <<endif>>

  <<if Fields enum and not internal>>
  IsIn,
  <<endif>>

  <<if Fields email and not internal>>
  IsEmail, 
  <<endif>>

  <<if Fields number or datetime and not internal>>
  IsNumber,
  <<endif>>

  <<if Fields nullable and not internal>>
  IsOptional,
  <<endif>>

} from 'class-validator';
<<endif>>
 
@InputType()
export class <<Model pascal>>CreateBodyDto {
<<for Fields not internal field>>
  <<if field boolean>>
  @IsBoolean(<<=listModifier(field)>>) 
  <<endif>>

  <<if field string or enum or entity>>
  @IsString(<<=listModifier(field)>>) 
  <<endif>>

  <<if field enum>>
  @IsIn([Object.values(<<Model pascal>><<field pascal>>)],<<=listModifier(field)>>) 
  <<endif>>

  <<if field email>>
  @IsEmail({}, <<=listModifier(field)>>) 
  <<endif>>

  <<if field number or datetime>>
  @IsNumber({}, <<=listModifier(field)>>)
  <<endif>>

  <<if field nullable>>
  @IsOptional()
  <<endif>>

  <<=typedProperty(field)>>
   
<<endfor>>
}

<<<
function typedProperty(f) {
  let out = f.names.camel;
  out += f.nullable ? "?" : "!";
  out += ": "
  if (f.type === "boolean") out += "boolean";
  else if (f.type === "string") out += "string";
  else if (f.type === "enum") out += `${root.names.pascal}${f.names.pascal}`;
  else if (f.type === "number") out += "number";
  else if (f.type === "datetime") out += "number | Date";
  else if (f.type === "entity") {
    out +=  "string";
  }
  if (f.multiple) out += "[]";
  out += ";";
  return out;
}
>>>

<<<
function listModifier(f) {
  if (f.multiple) return "{ each: true}";
  else return "";
}
>>>

