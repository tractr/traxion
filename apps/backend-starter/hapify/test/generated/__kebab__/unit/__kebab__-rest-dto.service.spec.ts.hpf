import { Test, TestingModule } from '@nestjs/testing';
import { Prisma } from '@prisma/client';
import { <<Model pascal>>CreateBodyDto, <<Model pascal>>RestDtoService } from '../../../../src/generated/<<Model kebab>>';
import {
  mock<<Model pascal>>CreateBodyDtoFactory,
} from '../mocks';
  
describe('<<Model pascal>>DatabaseService', () => {
  let <<Model camel>>RestDtoService: <<Model pascal>>RestDtoService;
  
  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [<<Model pascal>>RestDtoService],
    }).compile();
  
    <<Model camel>>RestDtoService = module.get<<<Model pascal>>RestDtoService>(<<Model pascal>>RestDtoService);
  });
  
  it('should be defined', () => {
    expect(<<Model camel>>RestDtoService).toBeDefined();
  });
  
  describe('formatCreateDto', () => {
    it('should properly format create dto', async () => {
      const bodyDto: <<Model pascal>>CreateBodyDto = mock<<Model pascal>>CreateBodyDtoFactory();
      const {
      <<for Fields entity and not internal field>>
        <<field camel>>,
      <<endfor>>
      ...values,
      } = bodyDto;
      const data = {
        ...values,
      <<for Fields entity and not internal field>>
        <<if field oneOne or oneMany>>
      <<field camel>>: { connect: { id: <<field camel>> } },
        <<else>>
      <<field camel>>: { set: <<field camel>>.map(id => { id }) },
        <<endif>>
      <<endfor>>
      }
      const prismaArgs: Prisma.<<Model pascal>>CreateArgs = { data };
      const result = <<Model camel>>RestDtoService.formatCreateDto(bodyDto);
      expect(result).toEqual(prismaArgs)
    });
  });
});

