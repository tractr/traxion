import { 
<<if Fields entity>>
  mock<<Model pascal>>FindUniqueQueryDtoFactory,
<<endif>>
  mock<<Model pascal>>FindUniqueParamsDtoFactory,
} from '@generated-mock/<<Model kebab>>/rest';
import { <<Model pascal>>RestModule, } from '@generated/<<Model kebab>>/rest';
import { Module, ValidationPipe } from '@nestjs/common';
import { CoreModule } from '@tractr/nestjs-core';
import { DatabaseModule } from '@tractr/nestjs-database';
import { createTestContext } from '@tractr/nestjs-testing';
import request from 'supertest';
import {
  <<Model pascal>>,
} from '@prisma/client';
import { APP_PIPE } from '@nestjs/core';
 
@Module({
  imports: [
    <<Model pascal>>RestModule.register(),
    DatabaseModule,
    CoreModule,
  ],
  providers: [
    {
      provide: APP_PIPE,
      useValue: new ValidationPipe({
        whitelist: true,
        forbidNonWhitelisted: true,
        transform: true,
        transformOptions: {
          enableImplicitConversion: true,
        },
      }),
    },
  ],
})
class TestModule {};
  
const context = createTestContext(TestModule);

let <<Model camel>>: <<Model pascal>>
  
beforeEach(async () => {
  const { prisma } = context;
  <<Model camel>> = (await prisma!.<<Model camel>>.findFirst()) as <<Model pascal>>;
});
 
describe('Find a unique <<Model lower>> (e2e)', () => {

  it('should accept a valid payload', () => {
    const { app } = context;
    const paramsDto = mock<<Model pascal>>FindUniqueParamsDtoFactory({ id: <<Model camel>>.id });
    <<if Fields entity>>
    const queryDto = mock<<Model pascal>>FindUniqueQueryDtoFactory();
    <<endif>>
   return request(app.getHttpServer()).get(`/<<Model kebab>>/${paramsDto.id}`)
   <<if Fields entity>>
     .query(queryDto)
   <<endif>>
     .then(({status, body}) => {
      expect(status).toEqual(200);
      // Validate response body
      <<for Fields field>>
        <<if field entity>>
      expect(body.<<field camel>>).toBeDefined();
          <<if field not manyMany>>
      expect(body.<<field camel>>Id).toBeDefined();
          <<endif>>
        <<elseif field datetime>>
      expect(new Date(body.<<field camel>>)).toEqual(new Date(<<Model camel>>.<<field camel>> as Date));
        <<else>>
      expect(body.<<field camel>>).toEqual(<<Model camel>>.<<field camel>>);
        <<endif>>
      <<endfor>>
   });
  });
});
