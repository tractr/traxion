import { 
  PrismaClient,
  <<Model pascal>>,
  <<for Fields entity field>>
    <<<if (field.model.names.pascal !== root.names.pascal) {>>>
  <<field.model pascal>>,
    <<<}>>>
  <<endfor>>
} from '@prisma/client';
<<if Fields entity>>
import { random } from 'faker';
<<endif>>
  
import { mock<<Model pascal>>Factory } from './<<Model kebab>>.mock';
  
<<if Fields manyMany>>
export interface <<Model pascal>>Seed extends <<Model pascal>> {
  <<for Fields manyMany field>>
  <<field camel>>: string[];
  <<endfor>>
}
<<endif>>
  
<<if Fields manyMany>>
export async function insert<<Model pascal>>s(prisma: PrismaClient, <<Model camel>>s: <<Model pascal>>Seed[]): Promise< <<Model pascal>>[]> {
  return Promise.all(
    <<Model camel>>s.map((<<Model camel>>) => {
      const {
      <<for Fields entity field>>
        <<if field oneOne or oneMany>>
        <<field camel>>Id, 
        <<else>>
        <<field camel>>, 
        <<endif>>
      <<endfor>>
        ...values
      } = <<Model camel>>;
      return prisma.<<Model camel>>.create({
        data: {
          ...values,
          <<for Fields entity field>>
            <<if field oneOne or oneMany>>
          <<field camel>>: {
            connect: { id: <<field camel>>Id as string},
          },
            <<else>>
          <<field camel>>: {
            connect: <<field camel>>.map((id) => ({ id })),
          },
            <<endif>>
          <<endfor>>
        },
      });
    }),
  );
}
<<else>>
export async function insert<<Model pascal>>s(prisma: PrismaClient, <<Model camel>>s: <<Model pascal>>[]): Promise< <<Model pascal>>[]> {
  await prisma.<<Model camel>>.createMany({ data: <<Model camel>>s, skipDuplicates: true });
  return <<Model camel>>s;
}
<<endif>>
  
export function generate<<Model pascal>>Seeds(
  quantity: number,
  <<for Fields entity field>>
    <<if field oneOne or oneMany>>
  <<field camel>>s: <<field.model pascal>>[],
    <<else>>
  <<field camel>>: <<field.model pascal>>[],
    <<endif>>
  <<endfor>>
): <<Model pascal>><<if Fields manyMany>>Seed<<endif>>[] {
  return [...Array(quantity)].map(() =>
  <<if Fields manyMany>>
  {
    const <<Model camel>>: <<Model pascal>> = mock<<Model pascal>>Factory(
    <<if Fields oneOne or oneMany>>
    {
      <<for Fields oneOne or oneMany field>>
        <<field camel>>Id: random.arrayElement(<<field camel>>s).id,
      <<endfor>>
    }
    <<endif>>
    );
    const seed: <<Model pascal>>Seed = {
      ...<<Model camel>>,
    <<for Fields manyMany field>>
      <<field camel>>: random.arrayElements(<<field camel>>, 3).map(({id}) => id),
    <<endfor>>
    };
    return seed;
  }
  <<else>>
    mock<<Model pascal>>Factory(
    <<if Fields oneOne or oneMany>>
    {
      <<for Fields oneOne or oneMany field>>
        <<field camel>>Id: random.arrayElement(<<field camel>>s).id,
      <<endfor>>
    }
    <<endif>>
    )
  <<endif>>
  );
}
  
export async function seed<<Model pascal>>s(
  prisma: PrismaClient,
  quantity: number,
  <<for Fields entity field>>
    <<if field oneOne or oneMany>>
  <<field camel>>s: <<field.model pascal>>[],
    <<else>>
  <<field camel>>: <<field.model pascal>>[],
    <<endif>>
  <<endfor>>
): Promise< <<Model pascal>>[]> {
  const seeds = generate<<Model pascal>>Seeds(
    quantity,
    <<for Fields entity field>>
      <<if field oneOne or oneMany>>
    <<field camel>>s,
      <<else>>
    <<field camel>>,
      <<endif>>
    <<endfor>>
  );
  await insert<<Model pascal>>s(prisma, seeds);
  return seeds;
}
