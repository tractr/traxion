//******** AUTO GENERATED FILE, DO NOT EDIT.  *********

// Base schema (written by developpers)
// ------------------------------------------------

datasource db {
  provider = "postgresql"
  url      = env("TRACTR_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../../../../node_modules/.prisma/client"
}

// Generated schema (generated by hapify)
// ------------------------------------------------
model Answer {
  id               String     @id @default(uuid())
  // Relation: user
  user             User       @relation("Answer.UserToUser.AnswerAsUser", fields: [userId], references: [id])
  userId           String
  // Relation: question
  question         Question   @relation("Answer.QuestionToQuestion.AnswerAsQuestion", fields: [questionId], references: [id])
  questionId       String
  // Relation: tags
  // tags TagsOnAnswer[]
  tags             Tag[]      @relation("Answer.TagsToTag.AnswerAsTags")
  // referencedIn: variable
  variableAsAnswer Variable[] @relation("Variable.AnswerToAnswer.VariableAsAnswer")
}

model Message {
  id        String     @id @default(uuid())
  text      String
  hour      DateTime?
  // Relation: tags
  // tags TagsOnMessage[]
  tags      Tag[]      @relation("Message.TagsToTag.MessageAsTags")
  // Relation: questions
  // questions QuestionsOnMessage[]
  questions Question[] @relation("Message.QuestionsToQuestion.MessageAsQuestions")
}

model OpenQuestion {
  id                     String     @id @default(uuid())
  text                   String
  key                    String     @unique
  // Relation: question
  question               Question   @relation("OpenQuestion.QuestionToQuestion.OpenQuestionAsQuestion", fields: [questionId], references: [id])
  questionId             String
  // referencedIn: variable
  variableAsOpenQuestion Variable[] @relation("Variable.OpenQuestionToOpenQuestion.VariableAsOpenQuestion")
}

model Question {
  id                       String         @id @default(uuid())
  title                    String
  text                     String
  // Relation: parent question
  parentQuestion           Question?      @relation("Question.ParentQuestionToQuestion.QuestionAsParentQuestion", fields: [parentQuestionId], references: [id])
  parentQuestionId         String?
  // Relation: tags
  // tags TagsOnQuestion[]
  tags                     Tag[]          @relation("Question.TagsToTag.QuestionAsTags")
  // referencedIn: answer
  answerAsQuestion         Answer[]       @relation("Answer.QuestionToQuestion.AnswerAsQuestion")
  // referencedIn: message
  messageAsQuestions       Message[]      @relation("Message.QuestionsToQuestion.MessageAsQuestions")
  //messageAsQuestions QuestionsOnMessage[]
  // referencedIn: open question
  openQuestionAsQuestion   OpenQuestion[] @relation("OpenQuestion.QuestionToQuestion.OpenQuestionAsQuestion")
  // referencedIn: question
  questionAsParentQuestion Question[]     @relation("Question.ParentQuestionToQuestion.QuestionAsParentQuestion")
}

model Tag {
  id             String     @id @default(uuid())
  label          String
  // referencedIn: answer
  answerAsTags   Answer[]   @relation("Answer.TagsToTag.AnswerAsTags")
  //answerAsTags TagsOnAnswer[]
  // referencedIn: message
  messageAsTags  Message[]  @relation("Message.TagsToTag.MessageAsTags")
  //messageAsTags TagsOnMessage[]
  // referencedIn: question
  questionAsTags Question[] @relation("Question.TagsToTag.QuestionAsTags")
  //questionAsTags TagsOnQuestion[]
}

model User {
  id              String     @id @default(uuid())
  name            String
  email           String     @unique
  password        String
  role            String
  banned          Boolean
  lastConnectedAt DateTime?
  gender          UserGender
  // referencedIn: answer
  answerAsUser    Answer[]   @relation("Answer.UserToUser.AnswerAsUser")
}

model Variable {
  id             String       @id @default(uuid())
  value          String
  // Relation: open question
  openQuestion   OpenQuestion @relation("Variable.OpenQuestionToOpenQuestion.VariableAsOpenQuestion", fields: [openQuestionId], references: [id])
  openQuestionId String
  // Relation: answer
  answer         Answer       @relation("Variable.AnswerToAnswer.VariableAsAnswer", fields: [answerId], references: [id])
  answerId       String
}

// Many-to-many relations of answer.tags
// model TagsOnAnswer {
//  answer Answer @relation(fields: [answerId], references: [id])
//  answerId String
//  tag Tag @relation(fields: [tagId], references: [id])
//  tagId String
//  createdAt   DateTime @default(now())
//  @@id([answerId, tagId])
//}
// Many-to-many relations of message.tags
// model TagsOnMessage {
//  message Message @relation(fields: [messageId], references: [id])
//  messageId String
//  tag Tag @relation(fields: [tagId], references: [id])
//  tagId String
//  createdAt   DateTime @default(now())
//  @@id([messageId, tagId])
//}
// Many-to-many relations of message.questions
// model QuestionsOnMessage {
//  message Message @relation(fields: [messageId], references: [id])
//  messageId String
//  question Question @relation(fields: [questionId], references: [id])
//  questionId String
//  createdAt   DateTime @default(now())
//  @@id([messageId, questionId])
//}
// Many-to-many relations of question.tags
// model TagsOnQuestion {
//  question Question @relation(fields: [questionId], references: [id])
//  questionId String
//  tag Tag @relation(fields: [tagId], references: [id])
//  tagId String
//  createdAt   DateTime @default(now())
//  @@id([questionId, tagId])
//}

enum UserGender {
  male
  female
}
