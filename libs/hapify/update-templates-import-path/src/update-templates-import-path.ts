import * as fs from 'fs/promises';

// eslint-disable-next-line import/no-extraneous-dependencies
import * as glob from 'glob';

import { getHapifyConfig } from '@tractr/hapify-common';

const GENERATED_FOLDER_PATH = 'src/lib/generated';

/**
 * Replace all imports specified in importReplacements in the file content
 *
 * @param {Record<string, string>} importReplacements - List of the imports to replace
 * @param {string} content - File content where the imports should be replaced
 * @returns {string} updated file content
 */
function replaceImportsInString(
  importReplacements: Record<string, string>,
  content: string,
): string {
  return Object.entries(importReplacements).reduce(
    (acc, [oldImport, newImport]) =>
      acc.replace(
        new RegExp(`from '(?:(?:\\.\\.\\/)*${oldImport}).*`, 'g'),
        `from '${newImport}';`,
      ),
    content,
  );
}

async function processGlob(
  path: string,
  importReplacements: Record<string, string>,
): Promise<void> {
  return new Promise<void>((resolve) => {
    glob(`${path}/**/*.ts`, (error, files) => {
      // eslint-disable-next-line @typescript-eslint/no-floating-promises
      Promise.all(
        files.map(async (filePath: string) => {
          const fileContent = (await fs.readFile(filePath)).toString();
          const updatedFileContent = replaceImportsInString(
            importReplacements,
            fileContent,
          );

          await fs.writeFile(filePath, updatedFileContent);
        }),
      ).then(() => resolve());
    });
  });
}

/**
 * Replace imports in all files generated by hapify
 */
export async function hapifyUpdateTemplatesImportPath(
  path: string = GENERATED_FOLDER_PATH,
  currentDirectory: string = process.cwd(),
): Promise<void> {
  const hapifyConfig = await getHapifyConfig(currentDirectory);
  if (!hapifyConfig)
    throw new Error(`No hapify config found in ${process.cwd()} folder`);

  // Load the importReplacement rules from hapifyrc
  const { importReplacements } = hapifyConfig;

  if (importReplacements) {
    await processGlob(path, importReplacements);
  } else {
    throw new Error(`No importReplacements key found in hapify config`);
  }
}
