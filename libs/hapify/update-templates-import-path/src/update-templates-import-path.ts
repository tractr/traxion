#!/usr/bin/node

import * as fs from 'fs/promises';

// eslint-disable-next-line import/no-extraneous-dependencies
import * as glob from 'glob';

import { getHapifyConfig } from '@tractr/hapify-common';

const GENERATED_FOLDER_PATH = 'src/lib/generated';

/**
 * Replace all imports specified in importReplacements in the file content
 *
 * @param {Record<string, string>} importReplacements - List of the imports to replace
 * @param {string} content - File content where the imports should be replaced
 * @returns {string} updated file content
 */
function replaceImportsInString(
  importReplacements: Record<string, string>,
  content: string,
): string {
  return Object.entries(importReplacements).reduce(
    (acc, [oldImport, newImport]) =>
      acc.replace(
        new RegExp(`from '(?:(?:\\.\\.\\/)*${oldImport}).*`, 'g'),
        `from '${newImport}';`,
      ),
    content,
  );
}

/**
 * Replace imports in all files generated by hapify
 */
export async function hapifyUpdateTemplatesImportPath(
  path: string = GENERATED_FOLDER_PATH,
  currentDirectory: string = process.cwd(),
): Promise<void> {
  const hapifyConfig = await getHapifyConfig(currentDirectory);

  if (!hapifyConfig)
    throw new Error(`No hapify config found in ${process.cwd()} folder`);

  // Load the importReplacement rules from hapifyrc
  const { importReplacements } = hapifyConfig;

  if (importReplacements) {
    // List all paths of the ts files in the generated folder
    const files = glob.sync(`${path}/**/*.ts`);

    await Promise.all(
      files.map(async (filePath: string) => {
        const fileContent = (await fs.readFile(filePath)).toString();
        const updatedFileContent = replaceImportsInString(
          importReplacements,
          fileContent,
        );
        await fs.writeFile(filePath, updatedFileContent);
      }),
    );
  }
}
