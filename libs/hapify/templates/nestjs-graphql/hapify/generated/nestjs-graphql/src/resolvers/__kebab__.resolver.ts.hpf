<<<
  // We need to extract all the fields who refered our model
  // And remove the duplicate
  const uniqRefs = root.referencedIn
    .concat(root.fields.filter((field) => field.model).map((field) => field.model))
    .filter((value, index, self) => {
      return self.findIndex(f => f.name === value.name) === index && value.name !== root.name;
    });
  const uniqFieldRefs = root.referencedIn
    .flatMap((ref) => ref.fields)
    .filter((value, index, self) => {
      return self.findIndex(f => f.name === value.name) === index && value.name !== root.name;
    });
>>>

import { subject } from '@casl/ability';
import { accessibleBy } from '@casl/prisma';
import {
  Inject,
} from '@nestjs/common';
import {
  CurrentAbilities,
  CurrentUser,
  Policies,
  <<if Model not noGuest>>Public,<<endif>>
} from '@tractr/nestjs-core';
import {
  DatabaseService,
} from '@tractr/nestjs-database';
import {
  Args,
  Info,
  Int,
  Mutation,
  Parent,
  Query,
  ResolveField,
  Resolver,
} from '@nestjs/graphql';
import { GraphQLResolveInfo } from 'graphql';
import { ForbiddenError } from 'apollo-server-core';
import { PrismaSelect } from '@paljs/plugins';
import { User as PrismaUser } from '@prisma/client';

import {
  <<Model pascal>>Service,
  <<Model constant>>_SERVICE,
<<for uniqRefs ref>>
  <<ref constant>>_SERVICE,
  <<ref pascal>>Service,
<<endfor>>
} from '../../../../nestjs-models-common';
import { Actions, AppAbility, Permission } from '../../../../casl';

import {
  <<Model pascal>>,
  <<Model pascal>>CreateInput,
<<for uniqRefs ref>>
  <<ref pascal>>,
<<endfor>>
  FindUnique<<Model pascal>>Args,
  FindMany<<Model pascal>>Args,
  CreateOne<<Model pascal>>Args,
  UpdateOne<<Model pascal>>Args,
  DeleteOne<<Model pascal>>Args,
<<for uniqRefs ref>>
  FindMany<<ref pascal>>Args,
<<endfor>>
} from '../../../prisma-nestjs-graphql';

import {
  FindMany<<Model pascal>>Output,
} from '../dtos';
import { OWNERS_DEFAULT_FIELDS } from '../nestjs-graphql.constants';
 
@Resolver(() => <<Model pascal>>)
export class <<Model pascal>>Resolver {
 
  constructor(
    @Inject(<<Model constant>>_SERVICE)
    protected <<Model camel>>Service: <<Model pascal>>Service,
<<for uniqRefs ref>>
    @Inject(<<ref constant>>_SERVICE)
    protected <<ref camel>>Service: <<ref pascal>>Service,
<<endfor>>
  protected databaseService: DatabaseService,
  ) {}
 
  /**
   * Query for a unique <<Model camel>>.
   */
  <<if ReadAccess guest>>@Public()<<endif>>
  @Policies(Permission.READ_<<Model constant>>)
  @Query(() => <<Model pascal>>, { nullable: true })
  async findUnique<<Model pascal>>(
    @Info() info: GraphQLResolveInfo,
    @Args({ nullable: true, defaultValue: {} }) { where }: FindUnique<<Model pascal>>Args,
    <<if Fields ownership >>
    @CurrentAbilities() abilities: AppAbility,
    <<endif>>
  ) {
    const select = new PrismaSelect(
      info, { defaultFields: OWNERS_DEFAULT_FIELDS }
    ).value;
    const <<Model camel>> = await this.<<Model camel>>Service.findUnique({ where, ...select });
    <<if Fields ownership >>
    if (<<Model camel>> && abilities?.cannot(
      Actions.READ,
      subject('<<Model pascal>>', <<Model camel>>),
    )) throw new ForbiddenError('cannot read this user');
    <<endif>>
    return <<Model camel>>;
  }
 
  /**
   * Query for multiple <<Model camel>>s.
   */
  <<if SearchAccess guest>>@Public()<<endif>>
  @Policies(Permission.SEARCH_<<Model constant>>)
  @Query(() => FindMany<<Model pascal>>Output)
  async findMany<<Model pascal>>(
    @Info() info: GraphQLResolveInfo,
    @Args({ nullable: true })
      {
        where: whereInput,
        cursor,
        distinct,
        orderBy = [{ id: 'asc' }],
        skip = 0,
        take = 100,
      }: FindMany<<Model pascal>>Args,
    <<if Fields ownership >>
    @CurrentAbilities() abilities: AppAbility,
    <<endif>>
  ) {
    const select = new PrismaSelect(
      info, { defaultFields: OWNERS_DEFAULT_FIELDS }
    ).valueOf('<<Model camel>>s', '<<Model pascal>>');

    const where = {
      AND: [<<if Fields ownership >>abilities ? accessibleBy(abilities).<<Model pascal>> : {}, <<endif>>whereInput ?? {}],
    };

    const <<Model camel>>s = await this.<<Model camel>>Service.findMany({
      ...select,
      where,
      cursor,
      distinct,
      orderBy,
      skip,
      take: take + 1,
    });

    const count = await this.<<Model camel>>Service.count({
      where,
    });

    return {
      <<Model camel>>s: <<Model camel>>s.slice(0, take),
      count,
      hasNextPage: typeof <<Model camel>>s[take] !== 'undefined',
    };
  }
 
  /**
   * Create a single <<Model camel>>.
   */
  <<if CreateAccess guest>>@Public()<<endif>>
  @Policies(Permission.CREATE_<<Model constant>>)
  @Mutation(() => <<Model pascal>>, { nullable: true })
  async create<<Model pascal>>(
    @Info() info: GraphQLResolveInfo,
    @Args() { data: rawData }: CreateOne<<Model pascal>>Args,
    <<if Fields ownership>>
    @CurrentUser() user: PrismaUser | undefined,
    @CurrentAbilities() abilities: AppAbility | undefined,
    <<endif>>
  ): Promise<any> {
    const select = new PrismaSelect(info, { defaultFields: OWNERS_DEFAULT_FIELDS }).value;
    const data = {
    <<if Fields ownership and not primary>>
      ...(user ? this.<<Model camel>>Service.getDefaultOwnerships(user) : {}),
    <<endif>>
    <<if Fields internal and not primary and (not entity or nullable)>>
      ...this.<<Model camel>>Service.getDefaultInternals(),
    <<endif>>
      ...rawData,
    };

    <<if Fields ownership>>
    return this.databaseService.$transaction(async (prisma) => {
      const <<Model camel>> = await this.<<Model camel>>Service.create(
        { data, ...select },
        prisma.<<Model camel>>
      );

      if(abilities?.cannot(
        Actions.CREATE,
        subject(
          '<<Model pascal>>',
          <<Model camel>>,
        ),
      )) throw new ForbiddenError('cannot create <<Model pascal>>');

      return <<Model camel>>;
    });
    <<else>>
      return this.<<Model camel>>Service.create({ data, ...select });
    <<endif>>
  }
 
  /**
   * Update a single <<Model camel>>.
   */
  <<if UpdateAccess guest>>@Public()<<endif>>
  @Policies(Permission.UPDATE_<<Model constant>>)
  @Mutation(() => <<Model pascal>>, { nullable: true })
  async update<<Model pascal>>(
    @Info() info: GraphQLResolveInfo,
    @Args() { where, data }: UpdateOne<<Model pascal>>Args,
    <<if Fields ownership>>
    @CurrentAbilities() abilities: AppAbility | undefined,
    <<endif>>
  ): Promise<any> {
    const select = new PrismaSelect(info, { defaultFields: OWNERS_DEFAULT_FIELDS }).value;

    <<if Fields ownership>>
    return this.databaseService.$transaction(async (prisma) => {
      const <<Model camel>> = await this.<<Model camel>>Service.update(
        { where, data, ...select },
        prisma.<<Model camel>>
      );

      if(abilities?.cannot(
        Actions.UPDATE,
        subject(
          '<<Model pascal>>',
          <<Model camel>>,
        ),
      )) throw new ForbiddenError('cannot update <<Model pascal>>');

      return <<Model camel>>;
    });
    <<else>>
      return this.<<Model camel>>Service.update({ where, data, ...select });
    <<endif>>
  }
 
  /**
   * Delete a single <<Model camel>>.
   */
  <<if RemoveAccess guest>>@Public()<<endif>>
  @Policies(Permission.REMOVE_<<Model constant>>)
  @Mutation(() => <<Model pascal>>, { nullable: true })
  async delete<<Model pascal>>(
    @Info() info: GraphQLResolveInfo,
    @Args() { where }: DeleteOne<<Model pascal>>Args,
    <<if Fields ownership>>
    @CurrentAbilities() abilities: AppAbility | undefined,
    <<endif>>
  ): Promise<any> {
    const select = new PrismaSelect(info, { defaultFields: OWNERS_DEFAULT_FIELDS }).value;

    <<if Fields ownership>>
    return this.databaseService.$transaction(async (prisma) => {
      const <<Model camel>> = await this.<<Model camel>>Service.delete(
        { where, ...select },
        prisma.<<Model camel>>
      );

      if(abilities?.cannot(
        Actions.REMOVE,
        subject(
          '<<Model pascal>>',
          <<Model camel>>,
        ),
      )) throw new ForbiddenError('cannot delete <<Model pascal>>');

      return <<Model camel>>;
    });
    <<else>>
    return this.<<Model camel>>Service.delete({ where, ...select });
    <<endif>>
  }
 
<<for Fields oneOne or oneMany or manyMany field>>
  /**
   * Associated <<=field.model.names.pascal>>
   */
  @ResolveField(() => <<=field.model.names.pascal>>)
  async <<field camel>>(
    @Info() info: GraphQLResolveInfo,
    @Parent() <<Model camel>>: <<Model pascal>>,
    @Args({ nullable: true })
    {
      where: whereInput = {},
      cursor,
      distinct,
      orderBy = [{ id: 'asc' }],
      skip = 0,
      take = 100,
    }: FindMany<<=field.model.names.pascal>>Args,
    @CurrentAbilities() abilities: AppAbility,
  ) {
    let <<field camel>> = <<Model camel>>.<<field camel>>;

    if (!<<field camel>>) {
      const { id } = <<Model camel>>;
      const where = {
        AND: [abilities ? accessibleBy(abilities).<<=field.model.names.pascal>> : {}, whereInput],
      };
      const select = new PrismaSelect(info, { defaultFields: OWNERS_DEFAULT_FIELDS }).valueOf('<<Model camel>>s.<<field camel>>', '<<=field.model.names.pascal>>');
  
      <<if field oneOne or oneMany>>
      <<field camel>> = await this.<<=field.model.names.camel>>Service.findUnique({
        ...select,
        where,
        cursor,
        distinct,
        orderBy,
        skip,
        take: take + 1,
      }) ?? undefined;
      <<else>>
      <<field camel>> = await this.<<=field.model.names.camel>>Service.findMany({
        ...select,
        where,
        cursor,
        distinct,
        orderBy,
        skip,
        take: take + 1,
      });
      <<endif>>
    }
 
    <<if field oneOne or oneMany>>
    if (<<field camel>> && abilities?.cannot(Actions.READ, subject('<<=field.model.names.pascal>>', <<field camel>>))) {
      return null;
    }
    return <<field camel>>;
    <<else>>
    return <<field camel>>.filter((item) => abilities?.can(Actions.READ, subject('<<=field.model.names.pascal>>', item)) ?? true);
    <<endif>>
  }
<<endfor>>

<<for root.referencedIn ref>>
  <<for ref.fields field>>
  /**
   * Associated <<-field backRelation pascal>>
   */
  @ResolveField(() => <<ref pascal>>)
  async <<-field backRelation camel>>(
    @Info() info: GraphQLResolveInfo,
    @Parent() <<Model camel>>: <<Model pascal>>,
    @Args({ nullable: true })
    {
      where: whereInput = {},
      cursor,
      distinct,
      orderBy = [{ id: 'asc' }],
      skip = 0,
      take = 100,
    }: FindMany<<ref pascal>>Args,
    @CurrentAbilities() abilities: AppAbility,
  ) {
    let <<-field backRelation camel>> = <<Model camel>>.<<-field backRelation camel>>;

    if (!<<-field backRelation camel>>) {
      const { id } = <<Model camel>>;
      const where = {
        AND: [abilities ? accessibleBy(abilities).<<ref pascal>> : {}, whereInput],
      };
      const select = new PrismaSelect(info, { defaultFields: OWNERS_DEFAULT_FIELDS }).valueOf('<<Model camel>>s.<<-field backRelation camel>>', '<<ref pascal>>');
  
      <<if field oneOne>>
      <<-field backRelation camel>> = await this.<<ref camel>>Service.findUnique({
        ...select,
        where,
        cursor,
        distinct,
        orderBy,
        skip,
        take: take + 1,
      });
      <<else>>
      <<-field backRelation camel>> = await this.<<ref camel>>Service.findMany({
        ...select,
        where,
        cursor,
        distinct,
        orderBy,
        skip,
        take: take + 1,
      });
      <<endif>>
    }
 
    <<if field oneOne>>
    if (<<-field backRelation camel>> && abilities?.cannot(Actions.READ, subject('<<ref pascal>>', <<-field backRelation camel>>))) {
      return null;
    }
    return <<-field backRelation camel>>;
    <<else>>
    return <<-field backRelation camel>>.filter((item) => abilities?.can(Actions.READ, subject('<<ref pascal>>', item)) ?? true);
    <<endif>>
  }
 
  <<endfor>>
<<endfor>>

 
}