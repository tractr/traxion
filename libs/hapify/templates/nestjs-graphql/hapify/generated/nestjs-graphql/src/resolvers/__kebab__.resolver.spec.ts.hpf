<<<
  // We need to extract all the fields who referenced our model
  // And remove the duplicate
  const uniqRefs = root.referencedIn
    .concat(root.fields.filter((field) => field.model).map((field) => field.model))
    .filter((value, index, self) => {
      return self.findIndex(f => f.name === value.name) === index && value.name !== root.name;
    });
  const uniqFieldRefs = root.referencedIn
    .flatMap((ref) => ref.fields)
    .filter((value, index, self) => {
      return self.findIndex(f => f.name === value.name) === index && value.name !== root.name;
    });
>>>
	
import { ApolloDriver, ApolloDriverConfig } from '@nestjs/apollo';
import { INestApplication } from '@nestjs/common';
import { GraphQLModule } from '@nestjs/graphql';
import { Test } from '@nestjs/testing';
import * as request from 'supertest';
import { DatabaseModule, DatabaseService } from '@tractr/nestjs-database';
import { Prisma } from '@prisma/client';
	
import {
  <<Model pascal>>,
<<for uniqRefs ref>>
  <<ref pascal>>,
<<endfor>>
} from '@prisma/client';
import { mockDeep, MockProxy } from 'jest-mock-extended';
	
import { <<Model pascal>>Resolver } from './<<Model kebab>>.resolver';
	
import {
  <<Model pascal>>Service,
  <<Model constant>>_SERVICE,
<<for uniqRefs ref>>
  <<ref constant>>_SERVICE,
  <<ref pascal>>Service,
<<endfor>>
} from '../../../../nestjs-models-common';
import {
  mock<<Model pascal>>Factory,
<<for Fields not nullable and (oneOne or oneMany or manyOne or manyMany) field>>
  mock<<=field.model.names.pascal>>Factory,
<<endfor>>
} from '../../../../models/mock';
 
describe('<<Model pascal>> Resolver', () => {
  let app: INestApplication;
  let mock<<Model pascal>>Service: MockProxy<<<Model pascal>>Service>;
<<for uniqRefs ref>>
  let mock<<ref pascal>>Service: MockProxy<<<ref pascal>>Service>
<<endfor>>
  let mock<<Model pascal>>: <<Model pascal>>;
 
  beforeAll(async () => {
    mock<<Model pascal>>Service = mockDeep<<<Model pascal>>Service>();
<<for uniqRefs ref>>
    mock<<ref pascal>>Service = mockDeep<<<ref pascal>>Service>();
<<endfor>>
	
    const module = await Test.createTestingModule({
      providers: [
        <<Model pascal>>Resolver,
        {
          provide: <<Model constant>>_SERVICE,
          useValue: mock<<Model pascal>>Service,
        },
<<for uniqRefs ref>>
        {
          provide: <<ref constant>>_SERVICE,
          useValue: mock<<ref pascal>>Service,
        },
<<endfor>>
      ],
      imports: [
        DatabaseModule,
        GraphQLModule.forRoot<ApolloDriverConfig>({
          driver: ApolloDriver,
          autoSchemaFile: true,
        }),
      ],
    })
      .overrideProvider(DatabaseService)
      .useFactory({
        factory: () => {
          const prismaAggregate = mockDeep<Prisma.TransactionClient>();
          return {
            $transaction: (fn: (...args: unknown[]) => Promise<unknown>) => {
              return fn(prismaAggregate);
            },
          };
        },
      })
      .compile();
    app = module.createNestApplication();
    await module.init();
  });
 
  afterAll(async () => {
    await app.close();
  });
 
  it('should be defined', () => {
    expect(app).toBeDefined();
  });
 
  it('should be able to find a <<Model camel>>', async () => {
    mock<<Model pascal>> = mock<<Model pascal>>Factory();
    mock<<Model pascal>>Service.findUnique.mockResolvedValueOnce(mock<<Model pascal>>);
    await request(app.getHttpServer())
      .post('/graphql')
      .send({
        query: `
          query findUnique<<Model pascal>>($where: <<Model pascal>>WhereUniqueInput!) {
            findUnique<<Model pascal>>(where: $where) {
              <<for Fields not hidden and not oneMany and not manyOne and not manyMany and not oneOne field>>
              <<field camel>>
              <<endfor>>
            }
          }
        `,
        variables: {
          where: {
            <<for Fields primary field>>
            <<field camel>>: mock<<Model pascal>>.<<field camel>>,
            <<endfor>>
          },
        },
      })
      .then((res) => {
        if (res.body.errors) {
          throw res.body.errors[0].message;
        }
        expect(res.body.data.findUnique<<Model pascal>>).toEqual({
          <<for Fields not hidden and not oneMany and not manyOne and not manyMany and not oneOne field>>
          <<if field datetime>>
          <<field camel>>: mock<<Model pascal>>.<<field camel>><<if field nullable>>?<<endif>>.toISOString(),
          <<else>>
          <<field camel>>: mock<<Model pascal>>.<<field camel>>,
          <<endif>>
          <<endfor>>
        });
      });
  });
	
<<if Fields hidden>>
 
  it('should throw if requiring hidden field during fetching unique <<Model camel>>', async () => {
    mock<<Model pascal>> = mock<<Model pascal>>Factory();
    mock<<Model pascal>>Service.findUnique.mockResolvedValueOnce(mock<<Model pascal>>);
    await request(app.getHttpServer())
      .post('/graphql')
      .send({
        query: `
          query findUnique<<Model pascal>>($where: <<Model pascal>>WhereUniqueInput!) {
            findUnique<<Model pascal>>(where: $where) {
              <<for Fields hidden field>>
              <<field camel>>
              <<endfor>>
            }
          }
        `,
        variables: {
          where: {
            <<for Fields primary field>>
            <<field camel>>: mock<<Model pascal>>.<<field camel>>,
            <<endfor>>
          },
        },
      })
      .then((res) => {
        expect(res.body.errors.length).toEqual(1);
      });
  });
<<endif>>
 
  it('should be able to find multiple <<Model camel>>', async () => {
    mock<<Model pascal>> = mock<<Model pascal>>Factory();
    const mock<<Model pascal>>s = [
      mock<<Model pascal>>,
      mock<<Model pascal>>Factory(),
      mock<<Model pascal>>Factory(),
    ];
    mock<<Model pascal>>Service.findMany.mockResolvedValueOnce(mock<<Model pascal>>s);
    mock<<Model pascal>>Service.count.mockResolvedValueOnce(mock<<Model pascal>>s.length);
    await request(app.getHttpServer())
      .post('/graphql')
      .send({
        query: `
          query findMany<<Model pascal>>($where: <<Model pascal>>WhereInput!) {
            findMany<<Model pascal>>(where: $where) {
              <<Model camel>>s {
              <<for Fields not hidden and not oneMany and not manyOne and not manyMany and not oneOne field>>
                <<field camel>>
              <<endfor>>
              }
              count
              hasNextPage
              cursor
            }
          }
        `,
        variables: {
          where: {
            <<for Fields primary field>>
            <<field camel>>: { equals: mock<<Model pascal>>.<<field camel>> },
            <<endfor>>
          },
        },
      })
      .then((res) => {
        if (res.body.errors) {
          throw res.body.errors[0].message;
        }
        expect(res.body.data.findMany<<Model pascal>>.hasNextPage).toEqual(false);
        expect(res.body.data.findMany<<Model pascal>>.count).toEqual(
          mock<<Model pascal>>s.length
        );
        expect(res.body.data.findMany<<Model pascal>>.<<Model camel>>s.length).toEqual(
          mock<<Model pascal>>s.length
        );
        expect(res.body.data.findMany<<Model pascal>>.<<Model camel>>s[0]).toEqual({
          <<for Fields not hidden and not oneMany and not manyOne and not manyMany and not oneOne field>>
          <<if field datetime>>
          <<field camel>>: mock<<Model pascal>>.<<field camel>><<if field nullable>>?<<endif>>.toISOString(),
          <<else>>
          <<field camel>>: mock<<Model pascal>>.<<field camel>>,
          <<endif>>
          <<endfor>>
        });
      });
  });
 
  it('should be able to create a <<Model camel>>', async () => {
    mock<<Model pascal>> = mock<<Model pascal>>Factory();
    mock<<Model pascal>>Service.create.mockResolvedValueOnce(mock<<Model pascal>>);
	
    await request(app.getHttpServer())
      .post('/graphql')
      .send({
        query: `
          mutation create<<Model pascal>>($data: <<Model pascal>>CreateInput!) {
            create<<Model pascal>>(data: $data) {
              <<for Fields not hidden and not oneMany and not manyOne and not manyMany and not oneOne field>>
                <<field camel>>
              <<endfor>>
            }
          }
        `,
        variables: {
          data: {
          <<for Fields not oneMany and not manyOne and not manyMany and not oneOne field>>
            <<field camel>>: mock<<Model pascal>>.<<field camel>>,
          <<endfor>>
          <<for Fields not nullable and (oneOne or oneMany or manyOne or manyMany) field>>
            <<field camel>>: { connect: { id: mock<<=field.model.names.pascal>>Factory().id } },
          <<endfor>>
          }
        },
      })
      .then((res) => {
        if (res.body.errors) {
          throw res.body.errors[0].message;
        }
        expect(res.body.data.create<<Model pascal>>).toEqual({
          <<for Fields not hidden and not oneMany and not manyOne and not manyMany and not oneOne field>>
          <<if field datetime>>
          <<field camel>>: mock<<Model pascal>>.<<field camel>><<if field nullable>>?<<endif>>.toISOString(),
          <<else>>
          <<field camel>>: mock<<Model pascal>>.<<field camel>>,
          <<endif>>
          <<endfor>>
        });
      });
  });
 
  it('should be able to update a <<Model camel>>', async () => {
    mock<<Model pascal>> = mock<<Model pascal>>Factory();
    const updated<<Model pascal>> = mock<<Model pascal>>Factory();
    mock<<Model pascal>>Service.update.mockResolvedValueOnce({
      ...mock<<Model pascal>>,
      <<for Fields primary field>>
      <<field camel>>: updated<<Model pascal>>.<<field camel>>,
      <<endfor>>
    });
	
    await request(app.getHttpServer())
      .post('/graphql')
      .send({
        query: `
          mutation update<<Model pascal>>($where: <<Model pascal>>WhereUniqueInput!, $data: <<Model pascal>>UpdateInput!) {
            update<<Model pascal>>(where: $where, data: $data) {
              <<for Fields not hidden and not oneMany and not manyOne and not manyMany and not oneOne field>>
                <<field camel>>
              <<endfor>>
            }
          }
        `,
        variables: {
          where: {
            <<for Fields primary field>>
            <<field camel>>: mock<<Model pascal>>.<<field camel>>,
            <<endfor>>
          },
          data: {
            <<for Fields primary field>>
            <<field camel>>: updated<<Model pascal>>.<<field camel>>,
            <<endfor>>
          }
        },
      })
      .then((res) => {
        if (res.body.errors) {
          throw res.body.errors[0].message;
        }
        expect(res.body.data.update<<Model pascal>>).toEqual({
          <<for Fields not hidden and not oneMany and not manyOne and not manyMany and not oneOne field>>
          <<if field primary>>
          <<field camel>>: updated<<Model pascal>>.<<field camel>>,
          <<elseif field datetime>>
          <<field camel>>: mock<<Model pascal>>.<<field camel>><<if field nullable>>?<<endif>>.toISOString(),
          <<else>>
          <<field camel>>: mock<<Model pascal>>.<<field camel>>,
          <<endif>>
          <<endfor>>
        });
      });
  });
 
  it('should be able to delete a <<Model camel>>', async () => {
    mock<<Model pascal>> = mock<<Model pascal>>Factory();
    mock<<Model pascal>>Service.delete.mockResolvedValueOnce(mock<<Model pascal>>);
 
    await request(app.getHttpServer())
      .post('/graphql')
      .send({
        query: `
          mutation delete<<Model pascal>>($where: <<Model pascal>>WhereUniqueInput!) {
            delete<<Model pascal>>(where: $where) {
              <<for Fields not hidden and not oneMany and not manyOne and not manyMany and not oneOne field>>
                <<field camel>>
              <<endfor>>
            }
          }
        `,
        variables: {
          where: {
            <<for Fields primary field>>
            <<field camel>>: mock<<Model pascal>>.<<field camel>>,
            <<endfor>>
          }
        },
      })
      .then((res) => {
        if (res.body.errors) {
          throw res.body.errors[0].message;
        }
        expect(res.body.data.delete<<Model pascal>>).toEqual({
          <<for Fields not hidden and not oneMany and not manyOne and not manyMany and not oneOne field>>
          <<if field datetime>>
          <<field camel>>: mock<<Model pascal>>.<<field camel>><<if field nullable>>?<<endif>>.toISOString(),
          <<else>>
          <<field camel>>: mock<<Model pascal>>.<<field camel>>,
          <<endif>>
          <<endfor>>
        });
      });
  });
	
});
