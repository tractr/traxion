/* eslint-disable @typescript-eslint/ban-types */
import { Inject, Injectable } from '@nestjs/common';
 
<<if Fields enum and internal and not ownership>>
import {
  <<for Fields enum and internal and not ownership field>>
    <<Model pascal>><<field pascal>>,
  <<endfor>>
} from '../../../../models';
<<endif>>
import { <<Model constant>>_DATABASE_SERVICE } from '../<<Model kebab>>-model.constant';
import { <<Model pascal>>DatabaseService } from './<<Model kebab>>-database.service';
 
import { <<if Fields ownership and not primary>>User, <<endif>>Prisma } from '@prisma/client';
 
@Injectable()
export class <<Model pascal>>Service {
  constructor(
    @Inject(<<Model constant>>_DATABASE_SERVICE)
    protected readonly <<Model camel>>DatabaseService: <<Model pascal>>DatabaseService,
  ) {}


  <<if Fields ownership and not primary>>
  /**
   * Get default ownership value for fields that have user.id into their ownerStringPath metadata
   **/
  public getDefaultOwnerships(
    user: User,
  ): {
    <<for Fields ownership and not primary field>>
      <<<if (field.meta.ownerStringPath.raw === 'user.id') {>>>
      <<field camel>>: { connect: Prisma.UserWhereUniqueInput },
      <<<}>>>
    <<endfor>>
    }
  {
    return {
    <<for Fields ownership and not primary field>>
      <<<if (field.meta.ownerStringPath.raw === 'user.id') {>>>
      <<field camel>>: { connect: user },
      <<<}>>>
    <<endfor>>
    };
  }
  <<endif>>

  <<if Fields internal and not primary and (not entity or nullable)>>

  /**
   *  Return default internal fields
   **/
  public getDefaultInternals() {
    return {
      <<for Fields internal and not primary and (not entity or nullable) field>>
      <<field camel>>: this.getDefault<<field pascal>>(),
      <<endfor>>
    }
  }
  <<endif>>

  <<for Fields internal and not primary and (not entity or nullable) field>>
  /**
   * Return default value for internal field '<<field camel>>'
   * */
  public getDefault<<field pascal>>() {
<<< if (field.meta.default) { >>>
    return <<-field default raw>>;
<<< } else { >>>
  <<if field nullable>>
    return null;
  <<elseif field string >>
    return '';
  <<elseif field number >>
    return 0;
  <<elseif field boolean >>
    return false;
  <<elseif field datetime >>
    return new Date();
  <<elseif field enum>>
    return <<Model pascal>><<field pascal>>["<<for1 field.enum e>><<e raw>><<endfor>>"];
  <<else>>
    throw new Error("Field '<<field camel>>' need 'default' metadata");
  <<endif>>
<<<}>>>
  }
<<endfor>>

  /**
   * Find zero or one <<Model pascal>> that matches the filter.
   * @param {<<Model pascal>>FindUniqueArgs} args - Arguments to find a <<Model pascal>>
   * @example
   * // Get one <<Model pascal>>
   * const <<Model camel>> = await this.<<Model camel>>Service.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * */
  public findUnique<T extends Prisma.<<Model pascal>>FindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.<<Model pascal>>FindUniqueArgs>,
    prisma: Prisma.<<Model pascal>>Delegate<any> = this.<<Model camel>>DatabaseService,
  ) {
    return prisma.findUnique<T>(args);
  }

  /**
   * Find the first <<Model pascal>> that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {<<Model pascal>>FindFirstArgs} args - Arguments to find a <<Model pascal>>
   * @example
   * // Get one <<Model pascal>>
   * const <<Model camel>> = await this.<<Model camel>>Service.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * */
  public findFirst<T extends Prisma.<<Model pascal>>FindFirstArgs>(
    args?: Prisma.SelectSubset<T, Prisma.<<Model pascal>>FindFirstArgs>,
    prisma: Prisma.<<Model pascal>>Delegate<any> = this.<<Model camel>>DatabaseService,
  ) {
    return prisma.findFirst<T>(args);
  }

  /**
   * Find zero or more <<Model pascal>>s that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {<<Model pascal>>FindManyArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all <<Model pascal>>s
   * const <<Model camel>>s = await this.<<Model camel>>Service.findMany()
   *
   * // Get first 10 <<Model pascal>>s
   * const <<Model camel>>s = await this.<<Model camel>>Service.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const <<Model camel>>WithIdOnly = await this.<<Model camel>>Service.findMany({ select: { id: true } })
   *
   * */
  public findMany<T extends Prisma.<<Model pascal>>FindManyArgs>(
    args?: Prisma.SelectSubset<T, Prisma.<<Model pascal>>FindManyArgs>,
    prisma: Prisma.<<Model pascal>>Delegate<any> = this.<<Model camel>>DatabaseService,
  ) {
    return prisma.findMany<T>(args);
  }

  /**
   * Create a <<Model pascal>>.
   * @param {<<Model pascal>>CreateArgs} args - Arguments to create a <<Model pascal>>.
   * @example
   * // Create one <<Model pascal>>
   * const <<Model pascal>> = await this.<<Model camel>>Service.create({
   *   data: {
   *     // ... data to create a <<Model pascal>>
   *   }
   * })
   *
   * */
  public create<T extends Prisma.<<Model pascal>>CreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.<<Model pascal>>CreateArgs>,
    prisma: Prisma.<<Model pascal>>Delegate<any> = this.<<Model camel>>DatabaseService,
  ) {
    return prisma.create<T>(args);
  }

  /**
   * Create many <<Model pascal>>s.
   * @param {<<Model pascal>>CreateManyArgs} args - Arguments to create many <<Model pascal>>s.
   * @example
   * // Create many <<Model pascal>>s
   * const <<Model camel>> = await this.<<Model camel>>Service.createMany({
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   * */
  public createMany<T extends Prisma.<<Model pascal>>CreateManyArgs>(
    args?: Prisma.SelectSubset<T, Prisma.<<Model pascal>>CreateManyArgs>,
    prisma: Prisma.<<Model pascal>>Delegate<any> = this.<<Model camel>>DatabaseService,
  ) {
    return prisma.createMany<T>(args);
  }

  /**
   * Delete a <<Model pascal>>.
   * @param {<<Model pascal>>DeleteArgs} args - Arguments to delete one <<Model pascal>>.
   * @example
   * // Delete one <<Model pascal>>
   * const <<Model pascal>> = await this.<<Model camel>>Service.delete({
   *   where: {
   *     // ... filter to delete one <<Model pascal>>
   *   }
   * })
   *
   * */
  public delete<T extends Prisma.<<Model pascal>>DeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.<<Model pascal>>DeleteArgs>,
    prisma: Prisma.<<Model pascal>>Delegate<any> = this.<<Model camel>>DatabaseService,
  ) {
    return prisma.delete<T>(args);
  }

  /**
   * Update one <<Model pascal>>.
   * @param {<<Model pascal>>UpdateArgs} args - Arguments to update one <<Model pascal>>.
   * @example
   * // Update one <<Model pascal>>
   * const <<Model camel>> = await this.<<Model camel>>Service.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   * */
  public update<T extends Prisma.<<Model pascal>>UpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.<<Model pascal>>UpdateArgs>,
    prisma: Prisma.<<Model pascal>>Delegate<any> = this.<<Model camel>>DatabaseService,
  ) {
    return prisma.update<T>(args);
  }

  /**
   * Delete zero or more <<Model pascal>>s.
   * @param {<<Model pascal>>DeleteManyArgs} args - Arguments to filter <<Model pascal>>s to delete.
   * @example
   * // Delete a few <<Model pascal>>s
   * const { count } = await this.<<Model camel>>Service.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   * */
  public deleteMany<T extends Prisma.<<Model pascal>>DeleteManyArgs>(
    args?: Prisma.SelectSubset<T, Prisma.<<Model pascal>>DeleteManyArgs>,
    prisma: Prisma.<<Model pascal>>Delegate<any> = this.<<Model camel>>DatabaseService,
  ) {
    return prisma.deleteMany<T>(args);
  }

  /**
   * Update zero or more <<Model pascal>>s.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {<<Model pascal>>UpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many <<Model pascal>>s
   * const <<Model camel>> = await this.<<Model camel>>Service.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   * */
  public updateMany<T extends Prisma.<<Model pascal>>UpdateManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.<<Model pascal>>UpdateManyArgs>,
    prisma: Prisma.<<Model pascal>>Delegate<any> = this.<<Model camel>>DatabaseService,
  ) {
    return prisma.updateMany<T>(args);
  }

  /**
   * Create or update one <<Model pascal>>.
   * @param {<<Model pascal>>UpsertArgs} args - Arguments to update or create a <<Model pascal>>.
   * @example
   * // Update or create a <<Model pascal>>
   * const <<Model camel>> = await this.<<Model camel>>Service.upsert({
   *   create: {
   *     // ... data to create a <<Model pascal>>
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the <<Model pascal>> we want to update
   *   }
   * })
   * */
  public upsert<T extends Prisma.<<Model pascal>>UpsertArgs>(
    args: Prisma.SelectSubset<T, Prisma.<<Model pascal>>UpsertArgs>,
    prisma: Prisma.<<Model pascal>>Delegate<any> = this.<<Model camel>>DatabaseService,
  ) {
    return prisma.upsert<T>(args);
  }

  /**
   * Count the number of <<Model pascal>>s.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {<<Model pascal>>CountArgs} args - Arguments to filter <<Model pascal>>s to count.
   * @example
   * // Count the number of <<Model pascal>>s
   * const count = await this.<<Model camel>>Service.count({
   *   where: {
   *     // ... the filter for the <<Model pascal>>s we want to count
   *   }
   * })
   * */
  public count<T extends Prisma.<<Model pascal>>CountArgs>(
    args?: Prisma.Subset<T, Prisma.<<Model pascal>>CountArgs>,
    prisma: Prisma.<<Model pascal>>Delegate<any> = this.<<Model camel>>DatabaseService,
  ) {
    return prisma.count<T>(args);
  }

  /**
   * Allows you to perform aggregations operations on a <<Model pascal>>.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {<<Model pascal>>AggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 <<Model camel>>s
   * const aggregations = await this.<<Model camel>>Service.aggregate({
   *   avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   * */
  public aggregate<T extends Prisma.<<Model pascal>>AggregateArgs>(
    args: Prisma.Subset<T, Prisma.<<Model pascal>>AggregateArgs>,
    prisma: Prisma.<<Model pascal>>Delegate<any> = this.<<Model camel>>DatabaseService,
  ) {
    return prisma.aggregate<T>(args);
  }
}