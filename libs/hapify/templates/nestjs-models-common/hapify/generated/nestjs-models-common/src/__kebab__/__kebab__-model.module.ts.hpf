import { Module, OnModuleInit } from '@nestjs/common';
import { ModuleOverride } from '@tractr/nestjs-core';
<<if Fields password>>
import { DatabaseService } from '@tractr/nestjs-database';
import * as bcrypt from 'bcrypt';
<<endif>>
 
import { <<Model constant>>_DATABASE_SERVICE, <<Model constant>>_SERVICE } from './<<Model kebab>>-model.constant';
import {
  <<Model camel>>DatabaseServiceFactory,
  <<Model camel>>DatabaseServiceInject,
  <<Model pascal>>Service,
} from './services';
 
const providers = [
  {
    provide: <<Model constant>>_SERVICE,
    useClass: <<Model pascal>>Service,
  },
  {
    provide: <<Model constant>>_DATABASE_SERVICE,
    useFactory: <<Model camel>>DatabaseServiceFactory,
    inject: <<Model camel>>DatabaseServiceInject,
  },
];
 
@Module({
  exports: providers,
  providers,
})
export class <<Model pascal>>ModelModule extends ModuleOverride implements OnModuleInit {
  <<if Fields password>>
  constructor(protected readonly databaseService: DatabaseService) {
    super();
  }
  <<endif>>

  onModuleInit() {<<if Fields password>>
    // Create a prisma middleware to handle before and after schema hooks
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    this.databaseService.$use(async (params: any, next: any) => {
      // If the model is not the current one we pass this middleware
      if (params.model !== '<<Model pascal>>') return next(params);

      switch (params.action) {
        case 'create':
        case 'createMany':
        case 'update':
        case 'updateMany':
        case 'upsert':
          // Ensure the params args is defined
          params.args = params.args ?? {};

          const isArray = Array.isArray(params.args.data);

          for (let row of isArray ? params.args.data : [params.args.data]) {
            <<for Fields password field>>
            if (row?.<<field camel>>)
              row.<<field camel>> = await bcrypt.hash(row.<<field camel>>, 10);
            <<endfor>>
          }
 
          break;
 
        default:
          break;
      }
 
      // We fetch the result from the database
      const result = await next(params);
 
      // if we got no result we juste return result
      if (!result) return result;
 
      // We remove the fields from the results if this field is not selected
      const isArray = Array.isArray(result);
      const data = isArray ? result : [result];
 
      for (let row of data) {
        <<for Fields hidden or password field>>
          if (params.args?.select?.<<field camel>> !== true)
            delete row.<<field camel>>;
        <<endfor>>
      }

      return isArray ? data : data[0];
    });
  <<endif>>
  }
}
