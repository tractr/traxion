/* eslint-disable @typescript-eslint/unbound-method */
import { 
  mock<<Model pascal>>DatabaseServiceFactory,
} from '../../mock';

import { 
  mock<<Model pascal>>Factory,
} from '../../../models/mock';
import {
  <<Model constant>>_DATABASE_SERVICE,
  <<Model pascal>>DatabaseService,
  <<Model camel>>DatabaseServiceFactory,
  <<Model camel>>DatabaseServiceInject,
} from '../../src';
import { Test, TestingModule } from '@nestjs/testing';
import { Prisma } from '@prisma/client';
import { DatabaseService } from '@tractr/nestjs-database';
 
describe('<<Model pascal>>DatabaseService', () => {
  let <<Model camel>>DatabaseService: <<Model pascal>>DatabaseService;
  let mockedDatabaseService: DatabaseService;
 
  beforeEach(async () => {
    mockedDatabaseService = ({ <<Model camel>>: mock<<Model pascal>>DatabaseServiceFactory() } as unknown) as DatabaseService;;
    const module: TestingModule = await Test.createTestingModule({
      providers: [
        {
          provide: <<Model constant>>_DATABASE_SERVICE,
          useFactory: <<Model camel>>DatabaseServiceFactory,
          inject: <<Model camel>>DatabaseServiceInject,
        },
        { provide: DatabaseService, useValue: mockedDatabaseService },
      ],
    }).compile();
 
    <<Model camel>>DatabaseService = module.get< <<Model pascal>>DatabaseService>(
      <<Model constant>>_DATABASE_SERVICE
    );
  });
 
  it('should be defined', () => {
    expect(<<Model camel>>DatabaseService).toBeDefined();
  });
 
  describe('findUnique', () => {
    it('should map to DatabaseService.findUnique', async () => {
      const args = ('args' as unknown) as Prisma.<<Model pascal>>FindUniqueArgs;
      const <<Model camel>> = mock<<Model pascal>>Factory();
      (mockedDatabaseService.<<Model camel>>.findUnique as jest.Mock).mockReturnValueOnce(
        <<Model camel>>
      );
      const result = await <<Model camel>>DatabaseService.findUnique(args);
      expect(result).toEqual(<<Model camel>>);
      expect(mockedDatabaseService.<<Model camel>>.findUnique).toHaveBeenCalledTimes(1);
      expect(mockedDatabaseService.<<Model camel>>.findUnique).toHaveBeenCalledWith(args);
    });
  });
 
  describe('findFirst', () => {
    it('should map to DatabaseService.findFirst', async () => {
      const args = ('args' as unknown) as Prisma.<<Model pascal>>FindFirstArgs;
      const <<Model camel>> = mock<<Model pascal>>Factory();
      (mockedDatabaseService.<<Model camel>>.findFirst as jest.Mock).mockReturnValueOnce(
        <<Model camel>>
      );
      const result = await <<Model camel>>DatabaseService.findFirst(args);
      expect(result).toEqual(<<Model camel>>);
      expect(mockedDatabaseService.<<Model camel>>.findFirst).toHaveBeenCalledTimes(1);
      expect(mockedDatabaseService.<<Model camel>>.findFirst).toHaveBeenCalledWith(args);
    });
  });
 
  describe('findMany', () => {
    it('should map to DatabaseService.findMany', async () => {
      const args = ('args' as unknown) as Prisma.<<Model pascal>>FindManyArgs;
      const <<Model camel>> = [...Array(3)].map(() => mock<<Model pascal>>Factory());
      (mockedDatabaseService.<<Model camel>>.findMany as jest.Mock).mockReturnValueOnce(
        <<Model camel>>
      );
      const result = await <<Model camel>>DatabaseService.findMany(args);
      expect(result).toEqual(<<Model camel>>);
      expect(mockedDatabaseService.<<Model camel>>.findMany).toHaveBeenCalledTimes(1);
      expect(mockedDatabaseService.<<Model camel>>.findMany).toHaveBeenCalledWith(args);
    });
  });
 
  describe('create', () => {
    it('should map to DatabaseService.create', async () => {
      const args = ('args' as unknown) as Prisma.<<Model pascal>>CreateArgs;
      const <<Model camel>> = mock<<Model pascal>>Factory();
      (mockedDatabaseService.<<Model camel>>.create as jest.Mock).mockReturnValueOnce(
        <<Model camel>>
      );
      const result = await <<Model camel>>DatabaseService.create(args);
      expect(result).toEqual(<<Model camel>>);
      expect(mockedDatabaseService.<<Model camel>>.create).toHaveBeenCalledTimes(1);
      expect(mockedDatabaseService.<<Model camel>>.create).toHaveBeenCalledWith(args);
    });
  });
 
  describe('update', () => {
    it('should map to DatabaseService.update', async () => {
      const args = ('args' as unknown) as Prisma.<<Model pascal>>UpdateArgs;
      const <<Model camel>> = mock<<Model pascal>>Factory();
      (mockedDatabaseService.<<Model camel>>.update as jest.Mock).mockReturnValueOnce(
        <<Model camel>>
      );
      const result = await <<Model camel>>DatabaseService.update(args);
      expect(result).toEqual(<<Model camel>>);
      expect(mockedDatabaseService.<<Model camel>>.update).toHaveBeenCalledTimes(1);
      expect(mockedDatabaseService.<<Model camel>>.update).toHaveBeenCalledWith(args);
    });
  });
 
  describe('updateMany', () => {
    it('should map to DatabaseService.updateMany', async () => {
      const args = ('args' as unknown) as Prisma.<<Model pascal>>UpdateManyArgs;
      const <<Model camel>> = mock<<Model pascal>>Factory();
      (mockedDatabaseService.<<Model camel>>.updateMany as jest.Mock).mockReturnValueOnce(
        <<Model camel>>
      );
      const result = await <<Model camel>>DatabaseService.updateMany(args);
      expect(result).toEqual(<<Model camel>>);
      expect(mockedDatabaseService.<<Model camel>>.updateMany).toHaveBeenCalledTimes(1);
      expect(mockedDatabaseService.<<Model camel>>.updateMany).toHaveBeenCalledWith(args);
    });
  });
 
  describe('upsert', () => {
    it('should map to DatabaseService.upsert', async () => {
      const args = ('args' as unknown) as Prisma.<<Model pascal>>UpsertArgs;
      const <<Model camel>> = mock<<Model pascal>>Factory();
      (mockedDatabaseService.<<Model camel>>.upsert as jest.Mock).mockReturnValueOnce(
        <<Model camel>>
      );
      const result = await <<Model camel>>DatabaseService.upsert(args);
      expect(result).toEqual(<<Model camel>>);
      expect(mockedDatabaseService.<<Model camel>>.upsert).toHaveBeenCalledTimes(1);
      expect(mockedDatabaseService.<<Model camel>>.upsert).toHaveBeenCalledWith(args);
    });
  });
 
  describe('delete', () => {
    it('should map to DatabaseService.delete', async () => {
      const args = ('args' as unknown) as Prisma.<<Model pascal>>DeleteArgs;
      const <<Model camel>> = mock<<Model pascal>>Factory();
      (mockedDatabaseService.<<Model camel>>.delete as jest.Mock).mockReturnValueOnce(
        <<Model camel>>
      );
      const result = await <<Model camel>>DatabaseService.delete(args);
      expect(result).toEqual(<<Model camel>>);
      expect(mockedDatabaseService.<<Model camel>>.delete).toHaveBeenCalledTimes(1);
      expect(mockedDatabaseService.<<Model camel>>.delete).toHaveBeenCalledWith(args);
    });
  });
 
  describe('deleteMany', () => {
    it('should map to DatabaseService.deleteMany', async () => {
      const args = ('args' as unknown) as Prisma.<<Model pascal>>DeleteManyArgs;
      const <<Model camel>> = mock<<Model pascal>>Factory();
      (mockedDatabaseService.<<Model camel>>.deleteMany as jest.Mock).mockReturnValueOnce(
        <<Model camel>>
      );
      const result = await <<Model camel>>DatabaseService.deleteMany(args);
      expect(result).toEqual(<<Model camel>>);
      expect(mockedDatabaseService.<<Model camel>>.deleteMany).toHaveBeenCalledTimes(1);
      expect(mockedDatabaseService.<<Model camel>>.deleteMany).toHaveBeenCalledWith(args);
    });
  });
 
  describe('count', () => {
    it('should map to DatabaseService.count', async () => {
      const args = ('args' as unknown) as Prisma.<<Model pascal>>CountArgs;
      const <<Model camel>> = mock<<Model pascal>>Factory();
      (mockedDatabaseService.<<Model camel>>.count as jest.Mock).mockReturnValueOnce(
        <<Model camel>>
      );
      const result = await <<Model camel>>DatabaseService.count(args);
      expect(result).toEqual(<<Model camel>>);
      expect(mockedDatabaseService.<<Model camel>>.count).toHaveBeenCalledTimes(1);
      expect(mockedDatabaseService.<<Model camel>>.count).toHaveBeenCalledWith(args);
    });
  });
 
  describe('aggregate', () => {
    it('should map to DatabaseService.aggregate', async () => {
      const args = ('args' as unknown) as Prisma.<<Model pascal>>AggregateArgs;
      const <<Model camel>> = mock<<Model pascal>>Factory();
      (mockedDatabaseService.<<Model camel>>.aggregate as jest.Mock).mockReturnValueOnce(
        <<Model camel>>
      );
      const result = await <<Model camel>>DatabaseService.aggregate(args);
      expect(result).toEqual(<<Model camel>>);
      expect(mockedDatabaseService.<<Model camel>>.aggregate).toHaveBeenCalledTimes(1);
      expect(mockedDatabaseService.<<Model camel>>.aggregate).toHaveBeenCalledWith(args);
    });
  });
});

