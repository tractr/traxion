/* eslint-disable @typescript-eslint/unbound-method */
import { 
  mock<<Model pascal>>DatabaseServiceFactory,
} from '../../mock';
import { 
  mock<<Model pascal>>Factory,
} from '../../../models/mock';
import {
  <<Model constant>>_DATABASE_SERVICE,
  <<Model constant>>_SERVICE,
  <<Model pascal>>DatabaseService,
  <<Model pascal>>Service,
} from '../../src';
import { Test, TestingModule } from '@nestjs/testing';
import { Prisma } from '@prisma/client';
   
describe('<<Model pascal>>Service', () => {
  let <<Model camel>>Service: <<Model pascal>>Service;
  let mocked<<Model pascal>>DatabaseService: <<Model pascal>>DatabaseService;
   
  beforeEach(async () => {
    mocked<<Model pascal>>DatabaseService = (mock<<Model pascal>>DatabaseServiceFactory() as unknown) as <<Model pascal>>DatabaseService;
    const module: TestingModule = await Test.createTestingModule({
      providers: [
        { provide: <<Model constant>>_DATABASE_SERVICE, useValue: mocked<<Model pascal>>DatabaseService },
        { provide: <<Model constant>>_SERVICE, useClass: <<Model pascal>>Service },
      ],
    }).compile();

    <<Model camel>>Service = module.get< <<Model pascal>>Service>(<<Model constant>>_SERVICE);
  });
   
  it('should be defined', () => {
    expect(<<Model camel>>Service).toBeDefined();
  });
 
  describe('create', () => {
    it('should map to <<Model pascal>>DatabaseService.create', async () => {
      const args = ('args' as unknown) as Prisma.<<Model pascal>>CreateArgs;
      const <<Model camel>> = mock<<Model pascal>>Factory();
      (mocked<<Model pascal>>DatabaseService.create as jest.Mock).mockReturnValueOnce(<<Model camel>>);
      const result = await <<Model camel>>Service.create(args);
      expect(result).toEqual(<<Model camel>>);
      expect(mocked<<Model pascal>>DatabaseService.create).toHaveBeenCalledTimes(1);
      expect(mocked<<Model pascal>>DatabaseService.create).toHaveBeenCalledWith(args);
    });
  });
 
  describe('findUnique', () => {
    it('should map to <<Model pascal>>DatabaseService.findUnique', async () => {
      const args = ('args' as unknown) as Prisma.<<Model pascal>>FindUniqueArgs;
      const <<Model camel>> = mock<<Model pascal>>Factory();
      (mocked<<Model pascal>>DatabaseService.findUnique as jest.Mock).mockReturnValueOnce(<<Model camel>>);
      const result = await <<Model camel>>Service.findUnique(args);
      expect(result).toEqual(<<Model camel>>);
      expect(mocked<<Model pascal>>DatabaseService.findUnique).toHaveBeenCalledTimes(1);
      expect(mocked<<Model pascal>>DatabaseService.findUnique).toHaveBeenCalledWith(args);
    });
  });
 
  describe('findMany', () => {
    it('should map to <<Model pascal>>DatabaseService.findMany', async () => {
      const args = ('args' as unknown) as Prisma.<<Model pascal>>FindManyArgs;
      const <<Model camel>> = [...Array(3)].map(() => mock<<Model pascal>>Factory());
      (mocked<<Model pascal>>DatabaseService.findMany as jest.Mock).mockReturnValueOnce(<<Model camel>>);
      const result = await <<Model camel>>Service.findMany(args);
      expect(result).toEqual(<<Model camel>>);
      expect(mocked<<Model pascal>>DatabaseService.findMany).toHaveBeenCalledTimes(1);
      expect(mocked<<Model pascal>>DatabaseService.findMany).toHaveBeenCalledWith(args);
    });
  });
 
  describe('count', () => {
    it('should map to <<Model pascal>>DatabaseService.count', async () => {
      const args = ('args' as unknown) as Prisma.<<Model pascal>>CountArgs;
      const <<Model camel>> = 10;
      (mocked<<Model pascal>>DatabaseService.count as jest.Mock).mockReturnValueOnce(<<Model camel>>);
      const result = await <<Model camel>>Service.count(args);
      expect(result).toEqual(<<Model camel>>);
      expect(mocked<<Model pascal>>DatabaseService.count).toHaveBeenCalledTimes(1);
      expect(mocked<<Model pascal>>DatabaseService.count).toHaveBeenCalledWith(args);
    });
  });
 
  describe('update', () => {
    it('should map to <<Model pascal>>DatabaseService.update', async () => {
      const args = ('args' as unknown) as Prisma.<<Model pascal>>UpdateArgs;
      const <<Model camel>> = mock<<Model pascal>>Factory();
      (mocked<<Model pascal>>DatabaseService.update as jest.Mock).mockReturnValueOnce(<<Model camel>>);
      const result = await <<Model camel>>Service.update(args);
      expect(result).toEqual(<<Model camel>>);
      expect(mocked<<Model pascal>>DatabaseService.update).toHaveBeenCalledTimes(1);
      expect(mocked<<Model pascal>>DatabaseService.update).toHaveBeenCalledWith(args);
    });
  });
 
  describe('upsert', () => {
    it('should map to <<Model pascal>>DatabaseService.upsert', async () => {
      const args = ('args' as unknown) as Prisma.<<Model pascal>>UpsertArgs;
      const <<Model camel>> = mock<<Model pascal>>Factory();
      (mocked<<Model pascal>>DatabaseService.upsert as jest.Mock).mockReturnValueOnce(<<Model camel>>);
      const result = await <<Model camel>>Service.upsert(args);
      expect(result).toEqual(<<Model camel>>);
      expect(mocked<<Model pascal>>DatabaseService.upsert).toHaveBeenCalledTimes(1);
      expect(mocked<<Model pascal>>DatabaseService.upsert).toHaveBeenCalledWith(args);
    });
  });
 
  describe('delete', () => {
    it('should map to <<Model pascal>>DatabaseService.delete', async () => {
      const args = ('args' as unknown) as Prisma.<<Model pascal>>DeleteArgs;
      const <<Model camel>> = mock<<Model pascal>>Factory();
      (mocked<<Model pascal>>DatabaseService.delete as jest.Mock).mockReturnValueOnce(<<Model camel>>);
      const result = await <<Model camel>>Service.delete(args);
      expect(result).toEqual(<<Model camel>>);
      expect(mocked<<Model pascal>>DatabaseService.delete).toHaveBeenCalledTimes(1);
      expect(mocked<<Model pascal>>DatabaseService.delete).toHaveBeenCalledWith(args);
    });
  });
});
