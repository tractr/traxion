import { User } from '@prisma/client';
import { getConcatValueByPath, RolePermissions } from '@tractr/common';
 
import { AppAbility, AppRoles } from '../interfaces';
import { UserWithIds } from './get-prisma-user-query';
 
export const rolePermissions: RolePermissions<
  AppRoles,
  UserWithIds,
  AppAbility
> = {
  guest({ can }) {
    <<for Models model>>
      <<for model.accesses.guest access>>
    can('<<=access.action>>', '<<model pascal>>');
      <<endfor>>
    <<endfor>>
  },
  user({ can }, user) {
    <<for Models model>>
    // Configure permissions for <<model pascal>> from hapify models
      <<for model.accesses.auth access>>
    can('<<=access.action>>', '<<model pascal>>');
      <<endfor>>
    <<endfor>>
    <<for Models model>>
      <<for model.accesses.owner access>>
        <<if model.properties.hasOwnership>>
    <<=getConditions(access.action, model)>>
        <<endif>>
      <<endfor>>
      <<for model.accesses.guest access>>
    can('<<=access.action>>', '<<model pascal>>');
      <<endfor>>
    <<endfor>>
  },
  admin({ can }) {
    can('manage', 'all');
  }
};
 
<<<
  function getConditions(action, model) {
    return model.fields.ownership
      .reduce(([ids, relation], field) => {
        if (isFieldAnArray(field)) {
          relation = { ...relation, ...getFieldArrayConditions(field) };
        } else {
          ids = { ...ids, ...getFieldConditionsOnId(field) };
          // Disabling relation has it not working the way it should
          // Lookup https://casl.js.org/v5/en/guide/conditions-in-depth
          // with property string
          // relation = { ...relation, ...getFieldConditionsOnRelation(field) };
          relation = { ...relation };
        }

        return [ids, relation];
      }, [{}, {}])
      .filter((conditions) => JSON.stringify(conditions) !== '{}')
      .map((condition) => `can('${action}', '${model.names.pascal}', ${
        JSON.stringify(condition).replaceAll('"', '')
      })`)
      .join('\n    ');
  }

  function isFieldAnArray(field) {
    return field.type === 'entity'
      && (
        field.subtype === 'manyMany' || field.subtype === 'manyOne'
      );
  }
  
  function getFieldArrayConditions(field) {
    const isArray = isFieldAnArray(field);

    return {
      [field.names.camel]: {
        every: {
          id: {
            in: `getConcatValueByPath('${field.meta.ownerStringPath.raw.replace('user.', '')}', user)`,
          }
        }
      }
    };
  }

  function getFieldConditionsOnId(field) {
    return {
      [field.names.camel === 'id' ? 'id' : `${field.names.camel}Id` ]: {
        in: `getConcatValueByPath('${field.meta.ownerStringPath.raw.replace('user.', '')}', user)`
      }
    };
  }

  function getFieldConditionsOnRelation(field) {
    return field.names.camel !== 'id' ? {
      [`'${field.names.camel}.id'`]: {
        in: `getConcatValueByPath('${field.meta.ownerStringPath.raw.replace('user.', '')}', user)`
      }
    }: {};
  }
>>>