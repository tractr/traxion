import { Prisma <<=getModelListToImport()>>} from '@prisma/client';
 
/**
  * User export type that the userService.findUnique method will return
  * by the getSelectPrismaUserQuery function 
*/
export type UserWithIds = <<=getUserFindUniqueReturnTypeFromHapify()>>;
 
 
/**
 * Get the select configuration for the prisma user query to be able
 * to construct the user with the correct ids
*/
export function getSelectPrismaUserQuery(user:Partial<Prisma.UserSelect> = {}): Prisma.UserSelect {

  const result = <<=getSelectPrismaUserQueryFromHapify()>>;

  return {
    ...result,
    ...user,
  }
}
  
<<<

  function getSelectPrismaUserQueryFromHapify() {
    const info = getOwnershipInformationsFromHapify();

    return JSON.stringify(info.select, null, 2);
  }

  function getUserFindUniqueReturnTypeFromHapify() {
    const info = getOwnershipInformationsFromHapify();

    return JSON.stringify(info.types, null, 2)
      .replaceAll('"', '')
      .replaceAll(';,', ';')
      .replaceAll('[\n', 'Array<\n')
      .replaceAll(']\n', '>;\n')
      .replaceAll('],\n', '>;\n');
  }

  function getModelListToImport() {
    const info = getOwnershipInformationsFromHapify();
    return info.modelListToImport.length === 0
      ? ''
      : `, ${info.modelListToImport.join(', ')} `;
  }

  function getOwnershipInformationsFromHapify() {
    const models = root;
  
    if (!models) return JSON.stringify({}, null, 2);
  
    const userModel = models.find((model) => model.names.pascal === "User");
  
    if (!userModel)
      throw new Error("User model not found in your database schema");
  
    // First we need to extract all the fields from the models that have a ownership flags
    // We need to keep track of the primary field of this model
    // And extract the metadata from the field (default to user.id)
    return models
      .map((model) => {
        const { fields } = model;
        const { primary, ownership } = fields;
  
        if (primary === null || ownership.length === 0) {
          return null;
        }

        return ownership
          .map(({ meta, names }) => {
            const ownerStringPath = meta.ownerStringPath?.raw;
  
            if (!ownerStringPath)
              throw new Error(`${names.raw} has no ownerStringPath metadata`);
  
            const [user, ...path] = ownerStringPath.split(".");
  
            if (user.toLowerCase() !== "user")
              throw new Error(
                `The first model of the string path must be the user model. Error in ${model.names.pascal}.${names.camel}, string path used: '${user}.${path}'`
              );
  
            return path.reduce(
              (
                [
                  select,
                  modelListToImport,
                  types,
                  currentModel,
                  selectCurrentPath,
                  typesCurrentPath,
                ],
                key
              ) => {
                let newModel;
                // We first check inside the current model if key is a field
                let field = currentModel?.fields.list.find(
                  ({ names }) => names.camel === key
                );
                newModel = field?.model;
  
                if (!field) {
                  // If not we need to check the backRelations of all models that have fields link with the currentModel
                  const backRelations = models.filter(
                    ({ dependencies, fields }) =>
                      dependencies.list.some(
                        (model) =>
                          model.names.pascal === currentModel.names.pascal
                      ) &&
                      fields.list.some(
                        (field) => field.meta.backRelation?.raw === key
                      )
                  );
  
                  if (backRelations.length > 1)
                    throw new Error(
                      `Multiple back relations found for the key ${key}`
                    );
  
                  field = backRelations[0]?.fields.list.find(
                    ({ meta }) => meta.backRelation?.raw === key
                  );
                  newModel = backRelations[0];
                }
  
                if (!field)
                  throw new Error(
                    `Field ${key} not found. Error in ${model.names.pascal}.${names.camel}, string path used: '${user}.${path}'`
                  );
  
                set(
                  select,
                  selectCurrentPath,
                  Object.assign(
                    {},
                    currentModel.fields.primary === null
                      ? {}
                      : { [currentModel.fields.primary.names.camel]: true },
                    { [key]: true }
                  )
                );

                modelListToImport.push(currentModel.names.pascal);

                const isArray = field.type === 'entity'
                  && (
                    field.subtype === 'manyMany'
                    || field.subtype === 'oneMany'
                    || field.subtype === 'manyOne'
                  );

                const typesToAdd = Object.assign(
                  {},
                  currentModel.fields.primary === null
                    ? {}
                    : {
                        [currentModel.fields.primary.names.camel]:
                          `${currentModel.names.pascal}['${currentModel.fields.primary.names.camel}'];`,
                      },
                  { [key]: `${currentModel.names.pascal}['${currentModel.fields.primary.names.camel}'];` }
                );
  

                set(
                  types,
                  `${typesCurrentPath}`,
                  typesToAdd
                );
  
                return [
                  select,
                  modelListToImport,
                  types,
                  newModel,
                  `${selectCurrentPath}.${key}.select`,
                  `${typesCurrentPath}.${key}${isArray ? '[0]' : ''}`,
                ];
              },
              [{}, [], {}, userModel, 'user', 'user']
            );
          })
          .reduce(
            (acc, [select, modelListToImport, types]) => {
              acc.select.push(select.user);
              acc.modelListToImport.push(...modelListToImport);
              acc.types.push(types.user);
  
              return acc;
            },
            { select: [], modelListToImport: [], types: [] }
          );
      })
      .filter((model) => model !== null)
      //.map((item, index, list) => { throw new Error(JSON.stringify(list, null, 2)) })
      
      .reduce(
        ({ select, modelListToImport, types }, model) => {
          return {
            select: model.select.reduce((acc, select) => mergeDeep(acc, select), select),
            types: model.types.reduce((acc, types) => mergeDeep(acc, types), types),
            modelListToImport: [...new Set([
              ...modelListToImport, ...model.modelListToImport
            ])],
          };
        },
        {
          select: {
            roles: true,
          },
          types: {
            roles: "User['roles'];",
          },
          modelListToImport: ['User'],
        }
      );
  }  

  // found here: https://stackoverflow.com/questions/54733539/javascript-implementation-of-lodash-set-method
  function set(obj, path, value) {
    if (Object(obj) !== obj) return obj; // When obj is not an object
    // If not yet an array, get the keys from the string-path
    if (!Array.isArray(path)) path = path.toString().match(/[^.[\]]+/g) || []; 
    path.slice(0,-1).reduce((a, c, i) => // Iterate all of them except the last one
      Object(a[c]) === a[c] // Does the key exist and is its value an object?
        // Yes: then follow that path
        ? a[c] 
        // No: create the key. Is the next key a potential array-index?
        : a[c] = Math.abs(path[i+1])>>0 === +path[i+1] 
          ? [] // Yes: assign a new array object
          : {}, // No: assign a new plain object
      obj)[path[path.length-1]] = value; // Finally assign the value to the last key
    return obj; // Return the top-level object to allow chaining
  }

  // found here: https://stackoverflow.com/questions/27936772/how-to-deep-merge-instead-of-shallow-merge
  function isObject(item) {
    return (item && typeof item === 'object' && !Array.isArray(item));
  }

  function mergeDeep(target, source) {
    let output = Object.assign({}, target);
    if (isObject(target) && isObject(source)) {
      Object.keys(source).forEach(key => {
        if (isObject(source[key])) {
          if (!(key in target))
            Object.assign(output, { [key]: source[key] });
          else
            output[key] = mergeDeep(target[key], source[key]);

        // Add specific code to merge the first element of array if any
        } else if (Array.isArray(target[key]) && Array.isArray(source[key])) {
          output[key] = [mergeDeep(target[key][0], source[key][0])];
        } else {
          Object.assign(output, { [key]: source[key] });
        }
      });
    }
    // Adding code to handle arrays
    if (Array.isArray(target) && Array.isArray(source)) {
      throw new Error(JSON.stringify(target))
      output[key] = [mergeDeep(target[0], source[0])];
    }
    return output;
}
>>>
 