import {
  AbilityBuilder,
  AbilityClass,
  ExtractSubjectType,
  InferSubjects,
} from '@casl/ability';
import { PrismaAbility } from '@casl/prisma';
import { Injectable } from '@nestjs/common';
import { 
  <<for Models model>>
  <<model pascal>>,
  <<endfor>>
  UserRoles
} from '@prisma/client';
 
export type PrismaSubjects = Subjects<{
    <<for Models model>>
  <<model pascal>>: <<model pascal>>,
    <<endfor>>
>;
 
export type Actions =
  | 'count'
  | 'create'
  | 'read'
  | 'search'
  | 'update'
  | 'remove'
  | 'manage';
 
export type AppAbility = PrismaAbility<[Actions, PrismaSubjects]>;
 
export type DefinePermissions = (user: User, builder: AbilityBuilder<AppAbility>) => void;
type Roles =  UserRoles |'user' | 'admin' | 'guest';
 
export const rolePermissions: Record<Roles, DefinePermissions> = {
  guest(_user, { can }) {
    <<for Models model>>
      <<for model.accesses.guest access>>
    can('<<=access.action>>', '<<model pascal>>');
      <<endfor>>
    <<endfor>>
  },
  user(user, { can }) {
    <<for Models model>>
      <<for model.accesses.auth access>>
    can('<<=access.action>>', '<<model pascal>>');
      <<endfor>>
    <<endfor>>
    <<for Models model>>
      <<for model.accesses.owner access>>
        <<if model.properties.hasOwnership>>
    can('<<=access.action>>', '<<model pascal>>', { <<for model.fields field>><<if field ownership >><<< if (field.meta.ownerKey) { >>><<-field ownerKey camel>><<< } else { >>><<=field.name>><<<}>>>: user.id<<endif>><<endfor>> });
        <<endif>>
      <<endfor>>
    <<endfor>>
  },
  admin(_user, { can }) {
    can('manage', 'all', { roles: { has: UserRoles.admin } });
  }
};



@Injectable()
export class CaslAbilityFactoryService {
  createForUser(user: User) {
    // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
    const AppAbility = PrismaAbility as AbilityClass<AppAbility>;
    const { can, build } = new AbilityBuilder(AppAbility);

    user.roles.forEach((user) => {
      if (!rolePermissions.)
    })

    if (user) {
      if (user.roles.includes(UserRoles.admin)) {
      }
      // user is connected
    } else {
      // user is guest

    }

    return build({
      // Read https://casl.js.org/v5/en/guide/subject-type-detection#use-classes-as-subject-types for details
      detectSubjectType: (item) =>
        item.constructor as ExtractSubjectType<PrismaSubjects>,
    });
  }
}