import { PrismaAbility, Subjects as CaslPrismaSubjects } from '@casl/prisma';
 
import { 
  <<for Models model>>
  <<model pascal>>,
  <<endfor>>
  UserRoles
} from '@prisma/client';
 
import { CaslUserRoles } from '@tractr/nestjs-casl';
 
import { DefinePermissions } from '@tractr/nestjs-casl';
 
export type Subjects = CaslPrismaSubjects<{
    <<for Models model>>
  <<model pascal>>: <<model pascal>>,
    <<endfor>>
  all: 'all'
}>;
 
export type Actions =
  | 'count'
  | 'create'
  | 'read'
  | 'search'
  | 'update'
  | 'remove'
  | 'manage';
 
export type AppAbility = PrismaAbility<[Actions, Subjects]>;
 
type Roles =  UserRoles | CaslUserRoles;
 
export const rolePermissions: Record<
  Roles,
  DefinePermissions<User, AppAbility>
> = {
  guest(_user, { can }) {
    <<for Models model>>
      <<for model.accesses.guest access>>
    can('<<=access.action>>', '<<model pascal>>');
      <<endfor>>
    <<endfor>>
  },
  user(user, { can }) {
    <<for Models model>>
      <<for model.accesses.auth access>>
    can('<<=access.action>>', '<<model pascal>>');
      <<endfor>>
    <<endfor>>
    <<for Models model>>
      <<for model.accesses.owner access>>
        <<if model.properties.hasOwnership>>
    can('<<=access.action>>', '<<model pascal>>', { <<for model.fields field>><<if field ownership >><<< if (field.meta.ownerKey) { >>><<-field ownerKey camel>><<< } else { >>><<=field.name>><<<}>>>: user.id<<endif>><<endfor>> });
        <<endif>>
      <<endfor>>
    <<endfor>>
  },
  admin(_user, { can }) {
    can('manage', 'all');
  }
};
 