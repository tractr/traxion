import { Inject, Injectable } from '@nestjs/common';
import { <<Model pascal>>, Prisma<<if Fields internal and ownership and not primary>>, User<<endif>>  } from '@prisma/client';
	
<<if Fields internal and entity>>
import { Merge } from 'ts-essentials';
<<endif>>
 
import {
  <<if Fields manyMany>>
  formatEntityIds,
  <<endif>>
  <<<if (root.dependencies.list.length || root.referencedIn.length) {>>>
  formatPopulate,
  <<<}>>>
  formatSort,
  formatFilterType,
} from '@tractr/nestjs-core';
 
import {
  <<Model pascal>>Service,
  <<Model constant>>_SERVICE,
} from '../../../../nestjs-models-common';
 
import {
  <<Model pascal>>CountQueryDto,
  <<Model pascal>>CreateBodyDto,
  <<Model pascal>>DeleteParamsDto,
  <<Model pascal>>FindManyQueryDto,
  <<Model pascal>>FindUniqueParamsDto,
  <<<if (root.dependencies.list.length || root.referencedIn.length) {>>>
  <<Model pascal>>FindUniqueQueryDto,
  <<<}>>>
  <<Model pascal>>UpdateBodyDto,
  <<Model pascal>>UpdateParamsDto,
  <<Model pascal>>UpsertBodyDto,
  <<Model pascal>>UpsertParamsDto,
} from '../../../../rest-dtos';
 
@Injectable()
export class <<Model pascal>>RestDtoService {
 
  constructor(
    @Inject(<<Model constant>>_SERVICE)
    protected <<Model camel>>Service: <<Model pascal>>Service,
  ) {}
	

<<if Fields ownership and not primary>>
  /**
   * Format dtos to create a <<Model pascal>>
   *
   * @param bodyDto - A valid body dto to create a <<Model pascal>>
   * @returns prisma parameters to create a <<Model pascal>>
   */
  public transformCreateDtoTo<<Model pascal>>(
    bodyDto: <<Model pascal>>CreateBodyDto,
    <<if Fields ownership and internal and not primary>>user: User<<endif>>
  ): <<<if (root.properties.hasPrimary) {>>>Omit<<<Model pascal>>, '<<=root.fields.primary.names.camel>>'> <<<} else { >>><<Model pascal>> <<<}>>> {
    const {
<<for Fields not internal field>>
      <<field camel>>,
<<endfor>>
    } = bodyDto;
	
    return {
<<if Fields internal and not primary and (not entity or nullable)>>
      ...this.<<Model camel>>Service.getDefaultInternals(),
<<endif>>
<<for Fields  ownership and internal and not primary field>>
      <<field camel>>Id:user.id,
<<endfor>>
<<for Fields entity and not internal field>>
  <<if field oneOne or oneMany>>
    <<<if (field.names.camel === 'id') {>>>
      id<<<} else {>>>
    <<field camel>>Id<<<}>>>: <<field camel>><<if field nullable>> ?? null<<endif>>,
  <<endif>>
<<endfor>>
<<for Fields not entity and not internal field>>
  <<if field nullable>>
      <<field camel>>: <<field camel>> ?? null,
  <<else>>
      <<field camel>>,
  <<endif>>
<<endfor>>
    }
  }
	
  /**
   * Format dtos to upsert a <<Model pascal>>
   *
   * @param paramsDto - A valid params dto to upsert a <<Model pascal>>
   * @param bodyDto - A valid body dto to upsert a <<Model pascal>>
   * @returns prisma parameters to create a <<Model pascal>>
   */
  public transformUpsertDtoTo<<Model pascal>>(
    paramsDto: <<Model pascal>>UpsertParamsDto,
    bodyDto: <<Model pascal>>UpsertBodyDto,
    <<if Fields ownership and internal and not primary>>user: User<<endif>>
  ): <<<if (root.properties.hasPrimary) {>>>Omit<<<Model pascal>>, '<<=root.fields.primary.names.camel>>'> & Partial<Pick<<<Model pascal>>, '<<=root.fields.primary.names.camel>>'>> <<<} else { >>><<Model pascal>> <<<}>>> {
    const {
    <<for Fields primary primaryField>>
      <<primaryField camel>>,
    <<endfor>>
    } = paramsDto;
    const {
<<for Fields not internal field>>
      <<field camel>>,
<<endfor>>
    } = bodyDto;
	
    return {
    <<for Fields primary primaryField>>
      <<primaryField camel>>,
    <<endfor>>
<<if Fields internal and not primary and (not entity or nullable)>>
      ...this.<<Model camel>>Service.getDefaultInternals(),
<<endif>>
<<for Fields  ownership and internal and not primary field>>
      <<field camel>>Id:user.id,
<<endfor>>
<<for Fields entity and not internal field>>
  <<if field oneOne or oneMany>>
    <<<if (field.names.camel === 'id') {>>>
      id<<<} else {>>>
    <<field camel>>Id<<<}>>>: <<field camel>><<if field nullable>> ?? null<<endif>>,
  <<endif>>
<<endfor>>
<<for Fields not entity and not internal field>>
  <<if field nullable>>
      <<field camel>>: <<field camel>> ?? null,
  <<else>>
      <<field camel>>,
  <<endif>>
<<endfor>>
    }
  }
<<endif>>
 
  /**
   * Format dtos to create a <<Model pascal>>
   *
   * @param bodyDto - A valid body dto to create a <<Model pascal>>
   * @returns prisma parameters to create a <<Model pascal>>
   */
  public formatCreateDto(
    bodyDto: <<Model pascal>>CreateBodyDto,
    <<if Fields ownership and internal and not primary>>user: User,<<endif>>
  ):
    <<if Fields internal and entity>>
    Merge<
      Prisma.<<Model pascal>>CreateArgs,
      {
        data: Omit<Prisma.<<Model pascal>>CreateInput,
        <<for Fields internal and entity field>>
          | '<<field camel>>'
        <<endfor>>
        >;
      }
    >
    <<else>>
    Prisma.<<Model pascal>>CreateArgs
    <<endif>>
  {
    const {
<<for Fields entity and not internal field>>
      <<field camel>>,
<<endfor>>
    ...values
    } = bodyDto;
 
    const data: Prisma.<<Model pascal>>CreateInput = {
<<if Fields internal and not primary and (not entity or nullable)>>
      ...this.<<Model camel>>Service.getDefaultInternals(),
<<endif>>
<<if Fields ownership and internal and not primary>>
      ...this.<<Model camel>>Service.getDefaultOwnerships(user),
<<endif>>
      ...values,
<<for Fields entity and not internal field>>
  <<if field oneOne or oneMany>>
    <<if field nullable>>
      <<field camel>>: <<field camel>> ? { connect: { id: <<field camel>> } } : undefined,
    <<else>>
      <<field camel>>: { connect: { id: <<field camel>> } },
    <<endif>>
  <<else>>
    <<if field nullable>>
      <<field camel>>: <<field camel>> ? { connect: formatEntityIds(<<field camel>>) } : undefined,
    <<else>>
      <<field camel>>: { connect: formatEntityIds(<<field camel>>) },
    <<endif>>
  <<endif>>
<<endfor>>
    }
	
    return {
      data
    };
  }
 
  /**
   * Format dtos to count <<Model pascal>> entities
   *
   * @param queryDto - A valid query dto to filter <<Model pascal>> entities
   * @returns prisma parameters to count <<Model pascal>> entities
   */
  public formatCountDto(
    queryDto: <<Model pascal>>CountQueryDto
  ): Prisma.<<Model pascal>>CountArgs {
    const {
      <<for Fields searchable field>>
      <<field camel>>,
      <<endfor>>
    } = queryDto;
 
    const countArgs: Prisma.<<Model pascal>>CountArgs = {};
 
    const where: Prisma.<<Model pascal>>WhereInput = {};
	
    <<for Fields searchable field>>
      <<if field oneOne or oneMany>>
    if (<<field camel>>) where.<<field camel>> = { id: <<field camel>> };
      <<elseif field manyMany>>
    if (<<field camel>>) where.<<field camel>> = { some: { id: { in: <<field camel>> } } };
      <<else>>
    if (<<field camel>>) where.<<field camel>> = formatFilterType(<<field camel>>, <<if field datetime>>'datetime'<<elseif field number>>'number'<<elseif field string>>'string'<<elseif field boolean>>'boolean'<<elseif field enum>>'enum'<<else>>'json'<<endif>>, <<if field multiple>>true<<else>>false<<endif>>);
      <<endif>>
    <<endfor>>
 
    if (Object.keys(where).length > 0) countArgs.where = where;
 
    return countArgs;
  }
 
  /**
   * Format dtos to find a unique <<Model pascal>>
   *
   * @param paramsDto - A valid params dto to find a unique <<Model pascal>>
  <<<if (root.dependencies.list.length || root.referencedIn.length) {>>>
   * @param queryDto - Deprecated: A valid query dto to populate <<Model pascal>> relations
  <<<}>>>
   * @returns prisma parameters to find a unique <<Model pascal>>
   */
  public formatFindUniqueDtos(
    paramsDto: <<Model pascal>>FindUniqueParamsDto,
    <<<if (root.dependencies.list.length || root.referencedIn.length) {>>>
    { populate }: <<Model pascal>>FindUniqueQueryDto
    <<<}>>>
  ): Prisma.<<Model pascal>>FindUniqueArgs {
    <<<if (root.dependencies.list.length || root.referencedIn.length) {>>>
    /* istanbul ignore next */
    const include: Prisma.<<Model pascal>>Include | undefined = populate
      ? formatPopulate(populate) : undefined;
	
    /* istanbul ignore if */
    if (include) console.warn('populate args will be depracted in traxion@v2, use multi request or graphQL instead');
    <<<}>>>
    return {
      where: { ...paramsDto },
      <<<if (root.dependencies.list.length || root.referencedIn.length) {>>>
      include,
      <<<}>>>
    };
  }
 
  /**
   * Format dtos to find many <<Model pascal>> entities
   *
   * @param queryDto - A valid query dto to filter <<Model pascal>> entities
   * @returns prisma parameters to find many <<Model pascal>> entities
   */
  public formatFindManyDto(
    queryDto: <<Model pascal>>FindManyQueryDto
  ): Prisma.<<Model pascal>>FindManyArgs {
    const {
    <<<if (root.dependencies.list.length || root.referencedIn.length) {>>>
      populate,
    <<<}>>>
      sort,
      order,
      take,
      skip,
      <<for Fields searchable field>>
      <<field camel>>,
      <<endfor>>
    } = queryDto;
 
    const findManyArgs: Prisma.<<Model pascal>>FindManyArgs = {};
 
    const where: Prisma.<<Model pascal>>WhereInput = {};
	
    <<for Fields searchable field>>
      <<if field oneOne or oneMany>>
    if (<<field camel>>) where.<<field camel>> = { id: <<field camel>> };
      <<elseif field manyMany>>
    if (<<field camel>>) where.<<field camel>> = { some: { id: { in: <<field camel>> } } };
      <<else>>
    if (<<field camel>>) where.<<field camel>> = formatFilterType(<<field camel>>, <<if field datetime>>'datetime'<<elseif field number>>'number'<<elseif field string>>'string'<<elseif field boolean>>'boolean'<<elseif field enum>>'enum'<<else>>'json'<<endif>>, <<if field multiple>>true<<else>>false<<endif>>);
      <<endif>>
    <<endfor>>
 
    if (Object.keys(where).length > 0) findManyArgs.where = where;
    if (sort) findManyArgs.orderBy = formatSort(sort, order);
    if (skip) findManyArgs.skip = Number(skip);
    if (take) findManyArgs.take = Number(take);
    <<<if (root.dependencies.list.length || root.referencedIn.length) {>>>
    /* istanbul ignore if */
    if (populate) findManyArgs.include = formatPopulate(populate)
    /* istanbul ignore if */
    if (findManyArgs.include) console.warn('populate args will be depracted in traxion@v2, use multi request or graphQL instead');
    <<<}>>>
 
    return findManyArgs;
  }
 
  /**
   * Format dtos to update a <<Model pascal>>
   *
   * @param paramsDto - A valid params dto to find a unique <<Model pascal>>
   * @param bodyDto - A valid body dto to update a <<Model pascal>>
   * @returns prisma parameters to update a <<Model pascal>>
   */
  public formatUpdateDtos(
    paramsDto: <<Model pascal>>UpdateParamsDto,
    bodyDto: <<Model pascal>>UpdateBodyDto
  ): Prisma.<<Model pascal>>UpdateArgs {
    const {
    <<for Fields not internal and entity field>>
      <<field camel>>,
    <<endfor>>
      ...values
    } = bodyDto;
 
    const data: Prisma.<<Model pascal>>UpdateInput = {
<<for Fields not internal and entity field>>
  <<if field oneOne or oneMany>>
      <<field camel>>: <<field camel>> ? { connect: { id: <<field camel>> } } : undefined,
  <<else>>
      <<field camel>>: <<field camel>> ? { set: formatEntityIds(<<field camel>>) } : undefined,
  <<endif>>
<<endfor>>
      ...values
    }
    return { data, where: { ...paramsDto } };
  }
 
  /**
   * Format dtos to create or update a <<Model pascal>>
   *
   * @param paramsDto - A valid params dto to find a unique <<Model pascal>>
   * @param bodyDto - A valid body dto to create or update a <<Model pascal>>
   * @returns prisma parameters to create or update a <<Model pascal>>
   */
  public formatUpsertDtos(
    paramsDto: <<Model pascal>>UpsertParamsDto,
    bodyDto: <<Model pascal>>UpsertBodyDto,
    <<if Fields internal and ownership and not primary>>user: User<<endif>>
  ):
    <<if Fields internal and entity>>
    Merge<
      Prisma.<<Model pascal>>UpsertArgs,
      {
        create: Omit<Prisma.<<Model pascal>>CreateInput,
        <<for Fields internal and entity field>>
          | '<<field camel>>'
        <<endfor>>
        >;
      }
    >
    <<else>>
    Prisma.<<Model pascal>>UpsertArgs
    <<endif>>
  {
    const {
    <<for Fields entity and not internal field>>
      <<field camel>>,
    <<endfor>>
    ...values
    } = bodyDto;
 
    const create: Prisma.<<Model pascal>>CreateInput = {
    <<if Fields internal and not primary and (not entity or nullable)>>
      ...this.<<Model camel>>Service.getDefaultInternals(),
    <<endif>>
    <<if Fields internal and ownership and not primary>>
      ...this.<<Model camel>>Service.getDefaultOwnerships(user),
    <<endif>>
      ...values,
<<for Fields entity and not internal field>>
  <<if field oneOne or oneMany>>
    <<if field nullable>>
      <<field camel>>: <<field camel>> ? { connect: { id: <<field camel>> } } : undefined,
    <<else>>
      <<field camel>>: { connect: { id: <<field camel>> } },
    <<endif>>
  <<else>>
    <<if field nullable>>
      <<field camel>>: <<field camel>> ? { connect: formatEntityIds(<<field camel>>) } : undefined,
    <<else>>
      <<field camel>>: { connect: formatEntityIds(<<field camel>>) },
    <<endif>>
  <<endif>>
<<endfor>>
    };
 
    const update: Prisma.<<Model pascal>>UpdateInput = {
      ...values,
<<for Fields not internal and entity field>>
  <<if field oneOne or oneMany>>
    <<if field nullable>>
      <<field camel>>: <<field camel>> ? { connect: { id: <<field camel>> } } : undefined,
    <<else>>
      <<field camel>>: { connect: { id: <<field camel>> } },
    <<endif>>
  <<elseif field manyMany>>
    <<if field nullable>>
      <<field camel>>: <<field camel>> ? { set: formatEntityIds(<<field camel>>) } : undefined,
    <<else>>
      <<field camel>>: { set: formatEntityIds(<<field camel>>) },
    <<endif>>
  <<else>>
      <<field camel>>,
  <<endif>>
<<endfor>>
    };
    return {
      create,
      update,
      where: { ...paramsDto }
    };
  }
 
  /**
   * Format dtos to delete a unique <<Model pascal>>
   *
   * @param paramsDto - A valid params dto to select a unique <<Model pascal>> to delete
   * @returns prisma parameters to delete a unique <<Model pascal>>
   */
  public formatDeleteDto(
    paramsDto: <<Model pascal>>DeleteParamsDto
  ): Prisma.<<Model pascal>>DeleteArgs {
    return { where: { ...paramsDto } };
  }
}
<<<
function getDefaultForType(f) {
  let out = ""
  if (f.type === "boolean") return "equals";
  else if (f.type === "string") return "equals";
  else if (f.type === "number") return "equals";
  else if (f.type === "datetime") return "equals";
  else if (f.type === "object") return "equals";
	
  return "UnknownType";
}
>>>