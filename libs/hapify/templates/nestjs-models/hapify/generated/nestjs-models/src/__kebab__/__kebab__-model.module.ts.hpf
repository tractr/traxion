import { DynamicModule, Logger, Module } from '@nestjs/common';
	
<<if Fields password>>
import { DatabaseService } from '@tractr/nestjs-database';
<<endif>>
 
import {
  <<Model constant>>_DATABASE_SERVICE,
  <<Model constant>>_SERVICE
} from '../../../nestjs-models-common';
import {
  <<Model camel>>DatabaseServiceFactory,
  <<Model camel>>DatabaseServiceInject,
  <<Model pascal>>Service,
} from '../../../nestjs-models-common';
 
@Module({
  providers: [
    {
      provide: <<Model constant>>_SERVICE,
      useClass: <<Model pascal>>Service,
    },
    {
      provide: <<Model constant>>_DATABASE_SERVICE,
      useFactory: <<Model camel>>DatabaseServiceFactory,
      inject: <<Model camel>>DatabaseServiceInject,
    },
  ],
  exports: [
    <<Model constant>>_SERVICE,
    <<Model constant>>_DATABASE_SERVICE
  ],
})
export class <<Model pascal>>ModelModule {
  /**
   * Register the <<Model pascal>> model module
   *
   * @deprecated stop using this static method to register your module but use the ModelsModule instead
   */
  static register(): DynamicModule {
    const logger = new Logger();
    logger.error(
      '<<Model pascal>>ModelModule.register will be remove in futur version. Please remove the call to register and use the ModelsModule directly',
    );
    return {
      module: <<Model pascal>>ModelModule,
    };
  }
	
  <<if Fields password>>
  constructor(protected readonly databaseService: DatabaseService) {}
  <<endif>>
}
