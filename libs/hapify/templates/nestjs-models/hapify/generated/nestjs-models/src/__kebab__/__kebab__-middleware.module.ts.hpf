<<if Fields password or hidden>>
import {
  ConfigurableModuleBuilder,
  <<if Fields password>>
  Inject,
  <<endif>>
  Module,
  OnModuleInit,
  } from '@nestjs/common';

<<if Fields password>>
import { BcryptModule, BcryptService, EncryptionService } from '@trxn/nestjs-bcrypt';
<<endif>>
import { DATABASE_SERVICE } from '@trxn/nestjs-database';
import { PrismaClient } from '@prisma/client';

export interface <<Model pascal>>MiddlewareOptionsModule {
  <<if Fields password>>
  encryptionService: EncryptionService,
  <<endif>>
}

export const {
  ConfigurableModuleClass: <<Model pascal>>MiddlewareConfigurableModuleClass,
  MODULE_OPTIONS_TOKEN: <<Model constant>>_MIDDLEWARE_MODULE_OPTIONS_TOKEN,
} = new ConfigurableModuleBuilder<<<Model pascal>>MiddlewareOptionsModule>()
  .build();

@Module({
  <<if Fields password>>
  imports: [BcryptModule.register({})],
  <<endif>>
})
export class <<Model pascal>>MiddlewareModule
  extends <<Model pascal>>MiddlewareConfigurableModuleClass
  implements OnModuleInit {

  constructor(
    @Inject(DATABASE_SERVICE)
    private readonly databaseService: PrismaClient,
  <<if Fields password>>
    @Inject(<<Model constant>>_MIDDLEWARE_MODULE_OPTIONS_TOKEN)
    private readonly moduleOptions: <<Model pascal>>MiddlewareOptionsModule,
    private readonly bcryptService: BcryptService,
  <<endif>>
  ) {
    super();
  }

  onModuleInit() {
    // Create a prisma middleware to handle before and after schema hooks
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    this.databaseService.$use(async (params: any, next: any) => {
      // If the model is not the current one we pass this middleware
      if (params.model !== '<<Model pascal>>') return next(params);

      <<if Fields password>>
      switch (params.action) {
        case 'create':
        case 'createMany':
        case 'update':
        case 'updateMany':
        case 'upsert':
          // Ensure the params args is defined
          params.args = params.args ?? {};

          const isArray = Array.isArray(params.args.data);

          const encryptionService = this.moduleOptions.encryptionService || this.bcryptService;

          for (let row of isArray ? params.args.data : [params.args.data]) {
            <<for Fields password field>>
            if (row?.<<field camel>>?.set)
              row.<<field camel>>.set = await encryptionService.hash(row.<<field camel>>.set);
            else if (row?.<<field camel>>)
              row.<<field camel>> = await encryptionService.hash(row.<<field camel>>);
            <<endfor>>
          }

          break;

        default:
          break;
      }
      <<endif>>

      // We fetch the result from the database
      const result = await next(params);

      // if we got no result we just return result
      if (!result) return result;

      // We remove the fields from the results if this field is not selected
      const isArray = Array.isArray(result);
      const data = isArray ? result : [result];

      for (let row of data) {
        <<for Fields hidden or password field>>
          if (params.args?.select?.<<field camel>> !== true)
            delete row.<<field camel>>;
          <<if field oneOne or oneMany>>
          // Delete foreign key of hidden entity field
          if (params.args?.select?.<<field camel>>Id !== true)
            delete row.<<field camel>>Id;
          <<endif>>
        <<endfor>>
      }

      return isArray ? data : data[0];
    });
  }
}
<<else>>
export const <<Model constant>>_NO_MIDDELWARE = true;
<<endif>>
