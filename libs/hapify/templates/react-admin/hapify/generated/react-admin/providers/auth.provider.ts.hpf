import { AuthProvider } from 'ra-core';
	
export function checkStatusCode(statusCode: number) {
  if (statusCode < 200 || statusCode >= 300) {
    if (statusCode === 401) throw new Error('Authentication failed');
    throw new Error();
  }
}
	
export function checkUserPermission(user: any) {
  const isAdmin = user.roles.includes('admin');
  if (!isAdmin)
    throw new Error(
      `Insufficient permission. You must have the 'admin' role to access this resource`,
    );
}
	
export function authProvider(apiUrl: string | URL): AuthProvider {
  return {
    login: ({ username, password }) => {
      const request = new Request(`${apiUrl}/login`, {
        method: 'POST',
        body: JSON.stringify({ email: username, password }),
        headers: new Headers({ 'Content-Type': 'application/json' }),
        credentials: 'include',
      });
      return fetch(request)
        .then((response) => {
          checkStatusCode(response.status);
          return response.json();
        })
        .then(({ user }) => {
          checkUserPermission(user);
        });
    },
    checkError: (error) => {
      const status = error.status;
      if (status === 401 || status === 403) {
        return Promise.reject({ message: false });
      }
      // other error code (404, 500, etc): no need to log out
      return Promise.resolve();
    },
    checkAuth: async () => {
      const request = new Request(`${apiUrl}/me`);
      return fetch(request)
        .then((response) => {
          checkStatusCode(response.status);
          return response.json();
        })
        .then(async (user) => {
          checkUserPermission(user);
        });
    },
    logout: async () => {
      const request = new Request(`${apiUrl}/logout`);
      return await fetch(request).then(({ status }) => {
        if (status === 401) return;
        checkStatusCode(status);
      });
    },
    getIdentity: async () => {
      const request = new Request(`${apiUrl}/me`);
      return fetch(request)
        .then((response) => {
          return response.json();
        })
        .then(({ id, name }) => ({ id, fullName: name }));
    },
    getPermissions: async () => {
      const request = new Request(`${apiUrl}/me`);
      return await fetch(request)
        .then((response) => {
          checkStatusCode(response.status);
          return response.json();
        })
        .then((user) => {
          if (user.roles.includes('admin')) return user.roles;
          throw new Error('User authorization failed');
        });
    },
  };
}
