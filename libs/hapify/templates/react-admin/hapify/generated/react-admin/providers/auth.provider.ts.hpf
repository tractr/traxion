import { AuthProvider } from 'ra-core';

export function authProvider(apiUrl: string | URL): AuthProvider {
  return {
    login: ({ username, password }) => {
      const request = new Request(`${apiUrl}/login`, {
        method: 'POST',
        body: JSON.stringify({ email: username, password }),
        headers: new Headers({ 'Content-Type': 'application/json' }),
        credentials: 'include',
      });
      return fetch(request)
        .then((response) => {
          if (response.status < 200 || response.status >= 300) {
            throw new Error(response.statusText);
          }
          return response.json();
        })
        .catch(() => {
          throw new Error('Network error');
        });
    },
    checkError: (error) => {
      const status = error.status;
      if (status === 401 || status === 403) {
        return Promise.reject();
      }
      // other error code (404, 500, etc): no need to log out
      return Promise.resolve();
    },
    checkAuth: async () => {
      const request = new Request(`${apiUrl}/me`);
      return await fetch(request)
        .then((response) => {
          if (response.status < 200 || response.status >= 300) {
            throw new Error(response.statusText);
          }
          return response.json();
        })
        .catch(() => {
          throw new Error('Network error');
        });
    },
    logout: async () => {
      const request = new Request(`${apiUrl}/logout`);
      return await fetch(request)
        .then((response) => {
          if (response.status === 401) return;
          if (response.status < 200 || response.status >= 300) {
            throw new Error(response.statusText);
          }
        })
        .catch(() => {
          throw new Error('Network error');
        });
    },
    getPermissions: async () => {
      const request = new Request(`${apiUrl}/me`);
      return await fetch(request)
        .then((response) => {
          if (response.status < 200 || response.status >= 300) {
            throw new Error(response.statusText);
          }
          return response.json();
        })
        .then((user) => {
          if (user.roles.includes('admin')) return;

          throw new Error('no admin');
        });
    },
  };
}
