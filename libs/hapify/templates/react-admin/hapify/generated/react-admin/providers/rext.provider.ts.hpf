import { DataProvider } from 'ra-core';
import { lastValueFrom, Observable } from 'rxjs';
import { map } from 'rxjs/operators';
 
import { RextClient } from '../../rext-client';
 
export type RessourceType = 
<<for Models model>>  | '<<model camel>>'
<<endfor>>;
 
/**
 * Maps react-admin queries to a REXT API
 *
 * This REXT dialect is the REST API generated by hapify to fetch the nestjs generated API
 *
 * @example
 *
 * getList   => GET http://my.api.url/posts?sort=['title','ASC']&range=[0, 24]
 * getOne    => GET http://my.api.url/posts/123
 * getMany   => GET http://my.api.url/posts?filter={id:[123,456,789]}
 * update    => PUT http://my.api.url/posts/123
 * create    => POST http://my.api.url/posts
 * delete    => DELETE http://my.api.url/posts/123
 *
 * @example
 *
 * import * as React from "react";
 * import { Admin, Resource } from 'react-admin';
 * import simpleRestProvider from 'ra-data-simple-rest';
 *
 * import { PostList } from './posts';
 *
 * const App = () => (
 *   <Admin dataProvider={simpleRestProvider('http://path.to.my.api/')}>
 *     <Resource name="posts" list={PostList} />
 *   </Admin>
 * );
 *
 * export default App;
 */
export function rextClientProvider(apiUrl: string | URL): DataProvider {
  const rextClient = new RextClient(apiUrl);
  return {
    getList: (resource, params) => {
      const { page, perPage } = params.pagination;
      const { field, order } = params.sort;
 
      // TODO make the filter works
      return lastValueFrom(
        (
          rextClient[resource as unknown as RessourceType].findMany$({
            sort: 'id',
            order,
            take: perPage,
            skip: (page - 1) * perPage,
          }) as Observable<any>
        ).pipe(map((data) => ({ data, total: data.length }))),
      );
    },
 
    getOne: (resource, params) => 
      lastValueFrom(
        (
          rextClient[resource as unknown as RessourceType].findUnique$({
            id: `${params.id}`,
          }) as Observable<any>
        ).pipe(map((data) => ({ data }))),
      ),
 
    getMany: (resource, params) => {
      return lastValueFrom(
        (
          rextClient[resource as unknown as RessourceType].findMany$({
            order: 'asc',
            skip: 0,
            sort: 'id',
            take: 1000,
            // FIXME make possible the fetch of multiple ids
            id: `${params.ids[0]}`,
          }) as Observable<any>
        ).pipe(map((data) => ({ data }))),
      );
    },
 
    getManyReference: (resource, params) => {
      const { page, perPage } = params.pagination;
      const { field, order } = params.sort;
      const query = {
        sort: JSON.stringify([field, order]),
        range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),
        filter: JSON.stringify({
          ...params.filter,
          [params.target]: params.id,
        }),
      };
 
      // TODO make the filter works
      return lastValueFrom(
        (
          rextClient[resource as unknown as RessourceType].findMany$({
            sort: 'id',
            order,
            take: perPage,
            skip: (page - 1) * perPage,
          }) as Observable<any>
        ).pipe(map((data) => ({ data, total: data.length }))),
      );
    },
 
    update: (resource, params) =>
      lastValueFrom(
        (
          rextClient[resource as unknown as RessourceType].patch$({
            id: `${params.id}`,
          }, params.data) as Observable<any>
        ).pipe(map((data) => ({ data }))),
      ),
 
    // rext client doesn't provide an updateMany method, so we fallback to calling update n times instead
    updateMany: (resource, params) =>
      Promise.all(
        params.ids.map((id) =>
          lastValueFrom(
            (
              rextClient[resource as unknown as RessourceType].patch$({
                id: `${id}`,
              }, params.data) as Observable<any>
            ),
          ),
        )
      ).then(responses => ({ data: responses.map(({ id }) => id) })),
 
    create: (resource, params) =>
      lastValueFrom(
        rextClient[resource as unknown as RessourceType].create$(
          params.data
        ) as Observable<any>,
      ),
 
    delete: (resource, params) =>
      lastValueFrom(
        (
          rextClient[resource as unknown as RessourceType].delete$({
            id: `${params.id}`,
          }) as Observable<any>
        ).pipe(map((data) => ({ data }))),
      ),
 
    // rext client doesn't provide an deleteMany method, so we fallback to calling delete n times instead
    deleteMany: (resource, params) =>
      Promise.all(
        params.ids.map(id =>
          lastValueFrom(
            (
              rextClient[resource as unknown as RessourceType].delete$({
                id: `${id}`,
              }) as Observable<any>
            ),
          ),
        )
      ).then(responses => ({ data: responses.map(({ id }) => id) })),
  };
}
 