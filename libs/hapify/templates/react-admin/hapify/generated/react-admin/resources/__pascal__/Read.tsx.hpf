import * as React from 'react';
import {
  Show,
  ShowProps,
  SimpleShowLayout,
  Datagrid,
  List,
  ListProps,
  <<=getImports().join(',\n  ')>>
} from 'react-admin';
<<if Fields searchable>>
import { <<Model pascal>>Filter } from './Filter';
<<endif>>
 
export const <<Model pascal>>List = (props: ListProps) => (
  <List {...props}<<if Fields searchable>> filters={< <<Model pascal>>Filter />}<<endif>>>
    <Datagrid rowClick="edit">
<<for5 Fields not hidden field>>
    <<if field entity>>
        <<<printEntityField(field)>>>
    <<else>>
        <<<printField(field)>>>
    <<endif>>
<<endfor>>
    </Datagrid>
  </List>
);
 
export const <<Model pascal>>Show = (props: ShowProps) => (
  <Show {...props}>
    <SimpleShowLayout>
<<for Fields not hidden field>>
    <<if field entity>>
        <<<printEntityField(field)>>>
    <<else>>
        <<<printField(field)>>>
    <<endif>>
<<endfor>>
    </SimpleShowLayout>
  </Show>
);
 
<<< function printField(field) { >>>

<<if field string>>
    <<if field rich>>
      <RichTextField
    <<elseif field email>>
      <EmailField
    <<elseif field url>>
      <UrlField
    <<else>>
      <TextField
    <<endif>>
<<elseif field boolean>>
      <BooleanField
<<elseif field number>>
      <NumberField
<<elseif field datetime>>
      <DateField
<<else>>
      <TextField
<<endif>>

<<if field not sortable>>
        sortable={false}
<<endif>>
        source="<<field camel>>"
        label="<<field capital>>"
      />
<<< } >>>

<<< function printEntityField(field) { >>>

<<if field multiple>>
      <ReferenceArrayField
        source="<<field camel>>"
        label="<<field capital>>"
        reference="<<field.model camel>>">
          <SingleFieldList>
            <ChipField source="<<=labelFieldCamel(field.model)>>" sortable={false} />
          </SingleFieldList>
      </ReferenceArrayField>
<<else>>
      <ReferenceField
        source="<<field camel>>"
        label="<<field capital>>"
        reference="<<field.model camel>>">
          <TextField source="<<=labelFieldCamel(field.model)>>" sortable={false} />
      </ReferenceField>
<<endif>>

<<< } >>>

<<<
function fieldType(field) {
    switch(field.type) {
        case 'string':
            switch(field.subtype) {
                case 'rich': return ['RichTextField'];
                case 'email': return ['EmailField'];
                case 'url': return ['UrlField'];
                default: return ['TextField'];
            }
        case 'boolean': return ['BooleanField'];
        case 'number': return ['NumberField'];
        case 'datetime': return ['DateField'];
        case 'entity':
            return field.multiple ? 
                ['ReferenceArrayField', 'SingleFieldList', 'ChipField'] :
                ['ReferenceField', 'TextField'];
        default: return ['TextField'];
    }
}
function labelFieldCamel(model) {
    const label = model.fields.label.length ? 
        model.fields.label[0] : model.fields.primary;
    return label.names.camel;
}
function getImports() {
    const output = [];
    root.fields
        .filter(field => !field.hidden)
        .forEach(field => {
            output.push(...fieldType(field));
        });
    return [...new Set(output)]
        .filter(f => f !== 'RichTextInput');
}
>>>