import * as React from 'react';
<<if Fields hidden and not internal and not manyOne>>
import type { <<Model pascal>> } from '@prisma/client';
<<endif>>
import {
  Create,
  CreateProps,
  Edit,
  EditProps,
  SimpleForm,
  required,
  <<=getImports().join(',\n  ')>>
} from 'react-admin';
<<if Fields rich and not internal>>
import RichTextInput from 'ra-input-rich-text';
<<endif>>

<<if Fields object>>
function formatObject(object: Record<string, unknown> | string): string {
  return typeof object === 'string'
    ? object
    : JSON.stringify(object || undefined);
}
<<endif>>

export const <<Model pascal>>Create = (props: CreateProps) => (
  <Create {...props}>
    <SimpleForm>
<<for Fields not internal and not manyOne field>>
    <<if field entity>>
        <<<printEntityInput(field)>>>
    <<else>>
        <<<printInput(field)>>>
    <<endif>>
<<endfor>>
    </SimpleForm>
  </Create>
);

export const <<Model pascal>>Edit = (props: EditProps) => {
<<if Fields hidden and not internal and not manyOne>>
  const transform<<Model pascal>> = ({
  <<for Fields hidden and not internal and not manyOne field>>
    <<field camel>>,
    update<<field pascal>>,
  <<endfor>>
    ...data
  }: <<Model pascal>> & {
    <<for Fields hidden and not internal and not manyOne field>>
      update<<field pascal>>: boolean,
    <<endfor>>
  }) => ({
    ...data,
  <<for Fields hidden and not internal and not manyOne field>>
    <<field camel>>: update<<field pascal>> ? <<field camel>> : undefined,
  <<endfor>>
  });
<<endif>>
<<for Fields hidden and not internal and not manyOne field>>
<<endfor>>

  return (
    <Edit {...props}
      <<if Fields hidden and not internal and not manyOne>>
        transform={transform<<Model pascal>>}
      <<endif>>
    >
    <SimpleForm>
<<for Fields not internal and not manyOne field>>
    <<if field hidden>>
      <BooleanInput
        label="Update <<field pascal>>"
        source="update<<field pascal>>"
        defaultValue={false}
      />
    <<endif>>
    <<if field entity>>
        <<<printEntityInput(field)>>>
    <<else>>
        <<<printInput(field)>>>
    <<endif>>
<<endfor>>
    </SimpleForm>
  </Edit>
  );
};

<<< function printInput(field) { >>>

<<if field string>>
    <<if field rich>>
      <RichTextInput
        sx={{
          width: '100%',
        }}
    <<elseif field password>>
      <PasswordInput
        sx={{
          width: '100%',
        }}
    <<else>>
      <TextInput
        sx={{
          width: '100%',
        }}
        <<if field email>>
        type="email"
        <<elseif field url>>
        type="url"
        <<elseif field text>>
        multiline
        <<endif>>
    <<endif>>
<<elseif field boolean>>
    <<if field nullable>>
      <NullableBooleanInput
        sx={{
          width: '100%',
        }}
    <<else>>
      <BooleanInput
        defaultValue={false}
    <<endif>>
<<elseif field number>>
      <NumberInput
        sx={{
          width: '100%',
        }}
    <<if field latitude>>
        min={-90} max={90}
    <<elseif field longitude>>
        min={-180} max={180}
    <<elseif field integer>>
        step={1}
    <<endif>>
<<elseif field enum>>
    <<if field multiple>>
     <AutocompleteArrayInput
        sx={{
          width: '100%',
        }}
        choices={[
    <<for field.enum e>>
          { id: '<<e raw>>', name: '<<e camel>>' },
    <<endfor>>
        ]}
    <<else>>
    <AutocompleteInput
        sx={{
          width: '100%',
        }}
        defaultValue={null}
        choices={[
    <<for field.enum e>>
          { id: '<<e raw>>', name: '<<e camel>>' },
    <<endfor>>
        ]}
    <<endif>>
<<elseif field datetime>>
    <<if field date>>
      <DateInput
        sx={{
          width: '100%',
        }}
    <<else>>
      <DateTimeInput
        sx={{
          width: '100%',
        }}
    <<endif>>
<<else>>
      <TextInput
        sx={{
          width: '100%',
        }}
        <<if field object>>
        format={(v) => formatObject(v)}
        <<endif>>
<<endif>>

    <<if field not nullable and not multiple>>
        validate={required()}
    <<endif>>
        source="<<field camel>>"
        label="<<field capital>>"
      />

<<< } >>>

<<< function printEntityInput(field) { >>>
<<if field not manyMany>>
    <<if field multiple>>
    <ReferenceArrayInput
        sx={{
          width: '100%',
        }}
        source="<<field camel>>"
        label="<<field capital>>"
        reference="<<field.model camel>>">
        <AutocompleteArrayInput
          <<if field nullable>>
            emptyText="Null"
            format={(value) => (value ? value : '')}
            parse={(value) => (value ? value : '')}
            emptyValue={''}
          <<endif>>
          sx={{
            width: '100%',
          }}
          optionText="<<=labelFieldCamel(field.model)>>"
        />
    </ReferenceArrayInput>
    <<else>>
    <ReferenceInput
        sx={{
          width: '100%',
        }}
        source="<<field camel>>Id"
        label="<<field capital>>"
        reference="<<field.model camel>>">
        <AutocompleteInput
          <<if field nullable>>
            emptyText="Null"
            format={(value) => (value ? value : '')}
            parse={(value) => (value ? value : '')}
            emptyValue={''}
          <<endif>>
          sx={{
            width: '100%',
          }}
          optionText="<<=labelFieldCamel(field.model)>>"
        />
    </ReferenceInput>
    <<endif>>
<<endif>>

<<< } >>>

<<<
function fieldInput(field) {
    switch(field.type) {
        case 'string':
            switch(field.subtype) {
                case 'rich': return ['RichTextInput'];
                case 'password': return ['PasswordInput'];
                default: return ['TextInput'];
            }
        case 'boolean': return field.nullable ? ['NullableBooleanInput'] : ['BooleanInput'];
        case 'number': return ['NumberInput'];
        case 'enum': return field.multiple ? ['AutocompleteArrayInput'] : ['AutocompleteInput'];
        case 'datetime':
            switch(field.subtype) {
                case 'date': return ['DateInput'];
                default: return ['DateTimeInput'];
            }
        case 'entity':
            return field.multiple ?
                ['ReferenceArrayInput', 'AutocompleteArrayInput'] :
                ['ReferenceInput', 'AutocompleteInput'];
        default: return ['TextInput'];
    }
}
function labelFieldCamel(model) {
  const foundFirstLabelSearchable = model.fields.label.find((field) => field.searchable);
  const label = foundFirstLabelSearchable || model.fields.primary;
  return label.names.camel;
}
function getImports() {
    // Imports BooleanInput by default for hidden fields checkboxes
    const output = ['BooleanInput'];

    root.fields
        .filter(field => !field.internal)
        .forEach(field => {
            output.push(...fieldInput(field));
        });
    return [...new Set(output)]
        .filter(f => f !== 'RichTextInput');
}
>>>
