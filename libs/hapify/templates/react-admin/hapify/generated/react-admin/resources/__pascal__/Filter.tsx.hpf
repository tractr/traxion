<<if Fields searchable>>
import * as React from 'react';
import {
  Filter,
  FilterProps,
  <<=getImports().join(',\n  ')>>
} from 'react-admin';
 
export const <<Model pascal>>Filter = (props: Omit<FilterProps, 'children'>) => (
  <Filter {...props}>
<<for Fields searchable field>>
    <<if field entity>>
        <<<printEntityInput(field)>>>
    <<else>>
        <<<printInput(field)>>>
    <<endif>>
<<endfor>>
  </Filter>
);
	
<<< function printInput(field) { >>>
	
<<if field string>>
    <TextInput resettable
<<elseif field boolean>>
    <NullableBooleanInput
<<elseif field number>>
    <NumberInput
<<elseif field enum>>
    <AutocompleteInput
        choices={[
    <<for field.enum e>>
          { id: '<<e camel>>', name: '<<e camel>>' },
    <<endfor>>
        ]}
<<elseif field datetime>>
    <<if field date>>
    <DateInput
    <<else>>
    <DateTimeInput
    <<endif>>
<<else>>
    <TextInput resettable
<<endif>>
      source="<<field camel>>"
      label="<<field capital>>"
    />
	
<<< } >>>
	
<<< function printEntityInput(field) { >>>
	
      <ReferenceInput
        source="<<field camel>>Id"
        label="<<field capital>>"
        reference="<<field.model camel>>">
          <SelectInput optionText="<<=labelFieldCamel(field.model)>>" />
      </ReferenceInput>
	
<<< } >>>
	
<<<
function fieldInput(field) {
    switch(field.type) {
        case 'string':return ['TextInput'];
        case 'boolean': return ['NullableBooleanInput'];
        case 'number': return ['NumberInput'];
        case 'enum': return ['AutocompleteInput'];
        case 'datetime':
            switch(field.subtype) {
                case 'date': return ['DateInput'];
                default: return ['DateTimeInput'];
            }
        case 'entity': return ['ReferenceInput', 'SelectInput'];
        default: return ['TextInput'];
    }
}
function labelFieldCamel(model) {
    const label = model.fields.label.length ? 
        model.fields.label[0] : model.fields.primary;
    return label.names.camel;
}
function getImports() {
    const output = [];
    
    root.fields
        .filter(field => field.searchable)
        .forEach(field => {
            output.push(...fieldInput(field));
        });
    return [...new Set(output)];
}
>>>
	
<<endif>>