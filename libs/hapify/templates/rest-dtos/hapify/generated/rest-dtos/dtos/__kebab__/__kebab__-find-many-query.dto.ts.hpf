import {
  IsArray,
  IsIn,
  IsInt,
  IsNumber,
  IsOptional,
  IsString,
	
  <<if Fields (string and not text)>>
  MaxLength,
  <<endif>>
	
  <<if Fields entity and searchable>>
  IsUUID, 
  <<endif>>
	
  <<if Fields object and not internal>>
  IsObject, 
  <<endif>>
   
  Min,
	
} from 'class-validator';
	

<<if Fields searchable and not entity>>
import {
  <<if Fields searchable and boolean>>
  BoolFilterValidate,
  <<endif>>
  <<if Fields searchable and datetime>>
  DateTimeFilterValidate,
  <<endif>>
  <<if Fields searchable and number>>
  NumberFilterValidate,
  <<endif>>
  <<if Fields searchable and enum>>
  EnumFilterValidate,
  <<endif>>
  <<if Fields object>>
  JsonObject,
  <<endif>>
  <<if Fields searchable and object>>
  JsonFilterValidate,
  <<endif>>
  <<if Fields searchable and string>>
  StringFilterValidate,
  <<endif>>
} from '@tractr/common';
<<endif>>
  
import {
  <<for Fields enum enumField>>
  <<Model pascal>><<enumField pascal>>,
  <<endfor>>
  <<<if (root.dependencies.list.length || root.referencedIn.length) {>>>
  <<Model pascal>>Include,
  <<<}>>>
  SortOrder,
  <<Model pascal>>,
} from '../../../models';
	
import {
  TransformStringToArray,
  TransformStringToInt,
} from '@tractr/common';
 
	
export type <<Model pascal>>FindManyQuerySortableKeys =
<<for Fields sortable field>>
  | '<<field camel>>'
<<endfor>>;
	
export type <<Model pascal>>FindManyQuerySort =
<<for Fields sortable field>>
  | '<<field camel>>'
  | '<<field camel>>:asc'
  | '<<field camel>>:desc'
<<endfor>>;
 
export class <<Model pascal>>FindManyQueryDto {
<<for Fields searchable and not password and not hidden field>>
	
  <<if field string and not text>>
  @MaxLength(<<< if (field.meta.maxLength) { >>><<-field maxLength raw>><<<}else{>>>255<<<}>>>, {
    message: '<<field pascal>> field is too long',
  })
  <<endif>>
	
  <<if field entity>>
    <<< if (field.multiple) { >>>
    @TransformStringToArray()
    @IsArray()
    <<< } >>>
	
    @IsUUID("all", <<=listModifier(field)>>)
  <<else>>
  @IsString(<<=listModifier(field)>>)
  <<endif>>
	
  <<if field not entity >>
  @<<=getType(field)>>FilterValidate(<<if field enum>>Object.values(<<Model pascal>><<field pascal>>), <<endif>><<if field not object>><<=listModifier(field)>><<endif>>)
  <<endif>>
	
  @IsOptional()
  <<=optionalTypedProperty(field)>>
 
<<endfor>>
	
<<<if (root.dependencies.list.length || root.referencedIn.length) {>>>
  /**
   *  @deprecated will be removed in v2, use multi request or graphQL instead
   */
  @TransformStringToArray()
  @IsArray()
  @IsString({ each: true })
  @IsIn(<<Model pascal>>Include, { each: true })
  @IsOptional()
  populate?: <<Model pascal>>Include[];
<<<}>>>
 
	
  @TransformStringToArray()
  @IsString({ each: true})
  @IsIn([
  <<for Fields sortable field>>
    '<<field camel>>',
    '<<field camel>>:asc',
    '<<field camel>>:desc',
  <<endfor>>
  ], { each: true }) 
  @IsOptional()
  sort: <<Model pascal>>FindManyQuerySort[] = ['<<for Fields primary field>><<field camel>><<endfor>>'];
 
  @IsOptional()
  @IsIn(Object.values(SortOrder)) 
  order: SortOrder = 'asc';
  
  @IsOptional()
  @IsNumber()
  @IsInt()
  @Min(1)
  @TransformStringToInt()
  take = 100;
 
  @IsOptional()
  @IsNumber()
  @IsInt()
  @Min(0)
  @TransformStringToInt()
  skip = 0;
}
	
<<<
function optionalTypedProperty(f) {
  let out = f.names.camel;
  out += "?: "
  if(f.searchable && f.type !== "entity")
    out += "string | ";
	
  if (f.type === "boolean") out += "boolean";
  else if (f.type === "string") out = out.replace(' | ', '');
  else if (f.type === "enum") out += `${root.names.pascal}${f.names.pascal}`;
  else if (f.type === "number") out += "number";
  else if (f.type === "datetime") out += "Date";
  else if (f.type === "object") out += "JsonObject";
  else if (f.type === "entity") {
    out +=  "string"
  }
  if (f.multiple) out += "[]";
  out += ";";
  return out;
}
>>>
	
<<<
function listModifier(f) {
  if (f.multiple) return "{ each: true}";
  else return "";
}
>>>
	
<<<
function getType(f) {
  let out = ""
  if (f.type === "boolean") return "Bool";
  else if (f.type === "string") return "String";
  else if (f.type === "number") return "Number";
  else if (f.type === "datetime") return "DateTime";
  else if (f.type === "object") return "Json";
  else if (f.type === "enum") return "Enum";
	
  return "UnknownType";
}
>>>
