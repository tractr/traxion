import {
  IsArray,
  IsIn,
  IsOptional,
  IsString,

  <<if Fields entity and searchable>>
  IsUUID,
  <<endif>>

  <<if Fields object and not internal>>
  IsObject,
  <<endif>>

  Min,

} from 'class-validator';

<<if Fields searchable and not entity>>
import {
  <<if Fields searchable and boolean>>
  BoolFilterValidate,
  <<endif>>
  <<if Fields searchable and datetime>>
  DateTimeFilterValidate,
  <<endif>>
  <<if Fields searchable and number>>
  NumberFilterValidate,
  <<endif>>
  <<if Fields searchable and enum>>
  EnumFilterValidate,
  <<endif>>
  <<if Fields object>>
  JsonObject,
  <<endif>>
  <<if Fields searchable and object>>
  JsonFilterValidate,
  <<endif>>
  <<if Fields searchable and string>>
  StringFilterValidate,
  <<endif>>
} from '@trxn/common';
<<endif>>

import {
  <<for Fields enum enumField>>
  <<Model pascal>><<enumField pascal>>,
  <<endfor>>
  <<Model pascal>>,
} from '../../../models';

<<<if (root.dependencies.list.length || root.referencedIn.length) {>>>
import {
  TransformStringToArray,
} from '@trxn/common';
<<<}>>>

export class <<Model pascal>>CountQueryDto {
<<<getSearchableFields(root).forEach((field) => {>>>

  <<if field entity>>
    <<< if (field.multiple) { >>>
    @TransformStringToArray()
    @IsArray()
    <<< } >>>

    @IsString(<<=listModifier(field)>>)
    @StringFilterValidate(<<=listModifier(field)>>)
  <<else>>
  @IsString(<<=listModifier(field)>>)
  <<endif>>

  <<if field not entity>>
  @<<=getType(field)>>FilterValidate(<<if field enum>>Object.values(<<Model pascal>><<field pascal>>), <<endif>><<if field not object>><<=listModifier(field)>><<endif>>)
  <<endif>>

  @IsOptional()
  <<=optionalTypedProperty(field)>>

<<<})>>>
}

<<<
function getSearchableFields(model) {
  return model
    .fields.list
    .concat(...model.referencedIn)
    .filter((field) => field.searchable && !field.password && !field.hidden);
}
>>>

<<<
function optionalTypedProperty(f) {
  let out = f.names.camel;
  out += "?: "
  if(f.searchable && f.type !== "entity")
    out += "string | ";

  if (f.type === "boolean") out += "boolean";
  else if (f.type === "string") out = out.replace(' | ', '');
  else if (f.type === "enum") out += `${root.names.pascal}${f.names.pascal}`;
  else if (f.type === "number") out += "number";
  else if (f.type === "datetime") out += "Date";
  else if (f.type === "object") out += "JsonObject";
  else if (f.type === "entity") {
    out +=  "string"
  }
  if (f.multiple) out += "[]";
  out += ";";
  return out;
}
>>>

<<<
function listModifier(f) {
  if (f.multiple) return "{ each: true}";
  else return "";
}
>>>

<<<
function getType(f) {
  let out = ""
  if (f.type === "boolean") return "Bool";
  else if (f.type === "string") return "String";
  else if (f.type === "number") return "Number";
  else if (f.type === "datetime") return "DateTime";
  else if (f.type === "object") return "Json";
  else if (f.type === "enum") return "Enum";

  return "UnknownType";
}
>>>
