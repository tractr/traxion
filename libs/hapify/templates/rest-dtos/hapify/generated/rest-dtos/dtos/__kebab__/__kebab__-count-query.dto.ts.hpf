import {
  IsArray,
  IsIn,
  IsOptional,
  IsString,

  <<if Fields (string and not text)>>
  MaxLength,
  <<endif>>

  <<if Fields entity and searchable>>
  IsUUID, 
  <<endif>>

  <<if Fields object and not internal>>
  IsObject, 
  <<endif>>
   
  Min,

} from 'class-validator';

<<if Fields searchable and not entity and not enum or object>>
import {
  <<if Fields searchable and boolean and not multiple>>
  BoolFilterValidate,
  <<endif>>
  <<if Fields searchable and datetime and not multiple>>
  DateTimeFilterValidate,
  <<endif>>
  <<if Fields searchable and number and not multiple>>
  IntFilterValidate,
  <<endif>>
  <<if Fields object>>
  JsonObject,
  <<endif>>
  <<if Fields searchable and object and not multiple>>
  JsonFilterValidate,
  <<endif>>
  <<if Fields searchable and string and not multiple>>
  StringFilterValidate,
  <<endif>>
} from '@tractr/common';
<<endif>>
  
import {
  <<for Fields enum enumField>>
  <<Model pascal>><<enumField pascal>>,
  <<endfor>>
  <<<if (root.dependencies.list.length || root.referencedIn.length) {>>>
  <<Model pascal>>Include,
  <<<}>>>
  SortOrder,
  <<Model pascal>>,
} from '../../../models';

import {
  <<<if (root.dependencies.list.length || root.referencedIn.length) {>>>
  TransformStringToArray,
  <<<}>>>

  TransformStringToInt,
} from '@tractr/common';
 
export class <<Model pascal>>CountQueryDto {
<<for Fields searchable and not password and not hidden field>>

  <<if field string and not text>>
  @MaxLength(<<< if (field.meta.maxLength) { >>><<-field maxLength raw>><<<}else{>>>255<<<}>>>, {
    message: '<<field pascal>> field is too long',
  })
  <<endif>>

  <<if field enum>>
  @IsIn(Object.values(<<Model pascal>><<field pascal>>), <<=listModifier(field)>>) 
  <<endif>>

  <<if field not datetime and not number and not string and not boolean and (not object or multiple)>>
    <<< if (field.multiple) { >>>
    @TransformStringToArray()
    @IsArray()
    <<< } >>>

    <<if field entity>>
    @IsUUID("all", <<=listModifier(field)>>) 
    <<endif>>
  <<else>>
  @IsString(<<=listModifier(field)>>)
  <<endif>>

  <<if field not entity and not multiple and not enum >>
  @<<=getType(field)>>FilterValidate()
  <<endif>>

  @IsOptional()
  <<=optionalTypedProperty(field)>>
 
<<endfor>>

<<<if (root.dependencies.list.length || root.referencedIn.length) {>>>
  @TransformStringToArray()
  @IsArray()
  @IsString({ each: true })
  @IsIn(<<Model pascal>>Include, { each: true })
  @IsOptional()
  populate?: <<Model pascal>>Include[];
<<<}>>>

}

<<<
function optionalTypedProperty(f) {
  let out = f.names.camel;
  out += "?: "
  if(f.searchable && f.type !== "entity" && !f.multiple && f.type !== "enum")
    out += "string";

  else if (f.type === "boolean") out += "boolean";
  else if (f.type === "string") out += "string";
  else if (f.type === "enum") out += `${root.names.pascal}${f.names.pascal}`;
  else if (f.type === "number") out += "number";
  else if (f.type === "datetime") out += "Date";
  else if (f.type === "object") out += "JsonObject";
  else if (f.type === "entity") {
    out +=  "string"
  }
  if (f.multiple) out += "[]";
  out += ";";
  return out;
}
>>>

<<<
function listModifier(f) {
  if (f.multiple) return "{ each: true}";
  else return "";
}
>>>

<<<
function getType(f) {
  let out = ""
  if (f.type === "boolean") return "Bool";
  else if (f.type === "string") return "String";
  else if (f.type === "number") return "Int";
  else if (f.type === "datetime") return "DateTime";
  else if (f.type === "object") return "Json";

  return "UnknownType";
}
>>>
