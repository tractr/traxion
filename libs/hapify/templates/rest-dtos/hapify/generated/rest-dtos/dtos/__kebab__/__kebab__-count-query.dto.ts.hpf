
import {

  <<if Fields boolean and searchable>>
  IsBoolean, 
  <<endif>>

  <<if Fields email and searchable>>
  IsEmail, 
  <<endif>>

  <<if Fields enum and searchable>>
  IsIn,
  <<endif>>

  <<if Fields number and searchable>>
  IsNumber,
  <<endif>>

  <<if Fields datetime and searchable>>
  IsDate,
  <<endif>>
  
  IsOptional,

  <<if Fields (string or entity or enum) and searchable>>
  IsString,
  <<endif>>

  <<if Fields url and searchable>>
  IsUrl, 
  <<endif>>

  <<if Fields entity and searchable>>
  IsUUID,
  <<endif>>

} from 'class-validator';
  
<<if Fields enum>>
import {
  <<for Fields enum enumField>>
  <<Model pascal>><<enumField pascal>>,
  <<endfor>>
} from '../../../models';
<<endif>>

<<if Fields (number or boolean) and searchable>>
import { 
  <<if Fields number and searchable>>
  TransformStringToInt, 
  <<endif>>

  <<if Fields boolean and searchable>>
  TransformStringToBoolean,
  <<endif>>
} from '@tractr/common';
<<endif>>
 
export class <<Model pascal>>CountQueryDto {
<<for Fields searchable and not password field>>
  <<if field boolean>>
  @IsBoolean(<<=listModifier(field)>>)
  @TransformStringToBoolean()
  <<endif>>

  <<if field string or entity or enum>>
  @IsString(<<=listModifier(field)>>) 
  <<endif>>

  <<if field entity>>
  @IsUUID("all", <<=listModifier(field)>>) 
  <<endif>>

  <<if field enum>>
  @IsIn([Object.values(<<Model pascal>><<field pascal>>)], <<=listModifier(field)>>) 
  <<endif>>

  <<if field email>>
  @IsEmail({}, <<=listModifier(field)>>) 
  <<endif>>

  <<if field url>>
  @IsUrl({}, <<=listModifier(field)>>) 
  <<endif>>

  <<if field number>>
  @IsNumber({}, <<=listModifier(field)>>)
  @TransformStringToInt()
  <<endif>>

  <<if field datetime>>
  @IsDate({}, <<=listModifier(field)>>)
  <<endif>>

  @IsOptional()
  <<=optionalTypedProperty(field)>>
 
<<endfor>>
}

<<<
function optionalTypedProperty(f) {
  let out = f.names.camel;
  out += "?: "
  if (f.type === "boolean") out += "boolean";
  else if (f.type === "string") out += "string";
  else if (f.type === "enum") out += `${root.names.pascal}${f.names.pascal}`;
  else if (f.type === "number") out += "number";
  else if (f.type === "datetime") out += "Date";
  else if (f.type === "entity") {
    out +=  "string"
  }
  if (f.multiple) out += "[]";
  out += ";";
  return out;
}
>>>

<<<
function listModifier(f) {
  if (f.multiple) return "{ each: true}";
  else return "";
}
>>>
