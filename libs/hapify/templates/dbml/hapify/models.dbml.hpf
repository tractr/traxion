<<for Models model>>
 
//--------------------------
// <<model capital>>
Table <<model pascal>> {
<<for model.fields not manyMany field>>
  <<field snake>> <<=type(field, model)>> <<=attributes(field)>>
<<endfor>>
	
<<if model.fields unique>>
  Indexes {
    <<if2 model.fields unique>>
    (<<=snakeNames(model.fields.unique).join(',')>>) [unique, name: '<<=snakeNames(model.fields.unique).join('_')>>']
    <<else>>
    <<=model.fields.unique[0].names.snake>> [unique]
    <<endif>>
  }
<<endif>>
}
	
<<for model.fields manyMany field>>
// Many-to-many for <<model pascal>>.<<field snake>>
Table <<model pascal>>_<<field pascal>> {
    id integer [pk, increment]
    <<model snake>> <<=type(model.fields.primary)>> [ref: > <<model pascal>>.<<model.fields.primary snake>>]
    <<field.model snake>> <<=type(field.model.fields.primary)>> [ref: > <<field.model pascal>>.<<field.model.fields.primary snake>>]
}
<<endfor>>
	

<<for model.fields enum field>>
Enum <<model snake>>_<<field snake>> {
<<for field.enum e>>
    <<e snake>>
<<endfor>>
}
<<endfor>>
	
<<endfor>>
	

<<< 
function type(field, model = null) {
    switch(field.type) {
        case 'string':
            switch(field.subtype) {
                case 'rich':
                case 'text':
                    return 'text';
                default: return 'varchar';
            }
        case 'boolean': return 'integer';
        case 'number':
            switch(field.subtype) {
                case 'float': return 'float';
                default: return 'integer';
            }
        case 'enum': return `${model.names.snake}_${field.names.snake}`;
        case 'datetime': return 'datetime';
        case 'entity':
            return field.subtype === 'manyMany' ? 
                'manyMany' :
                type(field.model.fields.primary);
        default: 'varchar';
    }
}
function attributes(field) {
    output = [];
    if (field.primary) {
        output.push('pk');
        if (field.subtype === 'integer') output.push('increment');
    } else {
        if (field.type === 'entity') {
            output.push(`ref: > ${field.model.names.pascal}.${field.model.fields.primary.names.snake}`);
            if (field.subtype === 'oneOne') output.push('unique');
        }
        else if (!field.nullable) {
            output.push('not null');
            if (field.type === 'datetime' && field.internal) {
                output.push('default: `now()`');
            }
        }
    }
    return output.length ? `[${output.join(', ')}]` : '';
}
function snakeNames(fields) {
    return fields.map(f => f.names.snake);
}
>>>
