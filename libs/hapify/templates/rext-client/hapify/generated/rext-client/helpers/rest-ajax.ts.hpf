import { Observable, OperatorFunction } from 'rxjs';
import { AjaxConfig, AjaxResponse } from 'rxjs/ajax';
import { map } from 'rxjs/operators';
 
import { getUrl } from '@tractr/common';
import { request } from './universal-rxjs-ajax';
 
export function ajax<T>(
  options: string | AjaxConfig,
): Observable<AjaxResponse<T>> {
  return request(typeof options === 'string' ? { url: options } : options);
}
 
export function extractAjaxResponseData<
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  T extends [any, AjaxResponse<unknown>],
>(): OperatorFunction<
  T,
  T extends [infer R, AjaxResponse<unknown>] ? R : never
> {
  return map((data) => data[0]);
}
 
export type CreateAjaxOptions = Omit<
  AjaxConfig,
  'url' | 'method' | 'body' | 'withCredentials'
>;
 
/**
 * Create a new Model
 *
 * @param apiUrl - The URL endpoint to that model
 * @param createBody - Dto of the request body
 * @param options - Ajax request options
 * @returns a new Model
 */
export function create<T, CreateBody>(
  apiUrl: URL,
  createBody: CreateBody,
  options: CreateAjaxOptions = {},
): Observable<[T, AjaxResponse<T>]> {
  const url = getUrl(apiUrl);
  return ajax<T>({
    url: url.toString(),
    method: 'POST',
    body: createBody,
    withCredentials: true,
    ...options,
  }).pipe(map((value: AjaxResponse<T>) => [value.response, value]));
}
 
export type CountAjaxOptions = Omit<
  AjaxConfig,
  'url' | 'method' | 'withCredentials'
>;
 
/**
 * Count the number of Model entities that matches the filter
 *
 * @param apiUrl - The URL endpoint to that model
 * @param countQuery - Dto of the request query
 * @param options - Ajax request options
 * @returns the number of Model
 */
export function count<CountQuery extends Record<string, any>>(
  apiUrl: URL,
  countQuery: CountQuery,
  options: CountAjaxOptions = {},
): Observable<[number, AjaxResponse<number>]> {
  const url = getUrl(apiUrl, '/count', countQuery);
  return ajax<number>({
    url: url.toString(),
    method: 'GET',
    withCredentials: true,
    ...options,
  }).pipe(map((value: AjaxResponse<number>) => [value.response, value]));
}
 
export type FindUniqueOptions = Omit<
  AjaxConfig,
  'url' | 'method' | 'withCredentials'
>;
 
/**
 * Find zero or one Model that matches the filter
 *
 * @param apiUrl - The URL endpoint to that model
 * @param findUniqueParams - Dto of the request param
 * @param findUniqueQuery - Dto of the request query
 * @param options - Ajax request options
 * @returns a Model or null
 */
export function findUnique<
  T,
  FindUniqueParams extends { id: string | number },
  FindUniqueQuery extends Record<string, any>,
>(
  apiUrl: URL,
  findUniqueParams: FindUniqueParams,
  findUniqueQuery: FindUniqueQuery,
  options: FindUniqueOptions = {},
): Observable<[T, AjaxResponse<T>]> {
  const url = getUrl(apiUrl, `/${findUniqueParams.id}`, findUniqueQuery);
  return ajax<T>({
    url: url.toString(),
    method: 'GET',
    withCredentials: true,
    ...options,
  }).pipe(map((value: AjaxResponse<T>) => [value.response, value]));
}
 
export type FindManyOptions = Omit<
  AjaxConfig,
  'url' | 'method' | 'withCredentials'
>;
 
/**
 * Find zero or more Model entities that matches the filter
 *
 * @param apiUrl - The URL endpoint to that model
 * @param findManyQuery - Dto of the request query
 * @param options - Ajax request options
 * @returns an array of Model entities
 */
export function findMany<T, FindManyQuery extends Record<string, any>>(
  apiUrl: URL,
  findManyQuery: FindManyQuery,
  options: FindManyOptions = {},
): Observable<[T[], AjaxResponse<T[]>]> {
  const url = getUrl(apiUrl, '', findManyQuery);
  return ajax<T[]>({
    url: url.toString(),
    method: 'GET',
    withCredentials: true,
    ...options,
  }).pipe(map((value: AjaxResponse<T[]>) => [value.response, value]));
}
 
export type PatchOptions = Omit<
  AjaxConfig,
  'url' | 'method' | 'body' | 'withCredentials'
>;
 
/**
 * Update one Model
 *
 * @Remarks
 *
 * Partial updates are allowed with this method
 *
 * @param apiUrl - The URL endpoint to that model
 * @param updateParams - Dto of the request param
 * @param updateBody - Dto of the request body
 * @param options - Ajax request options
 * @returns the updated Model
 */
export function patch<
  T,
  UpdateParams extends { id: string | number },
  UpdateBody,
>(
  apiUrl: URL,
  updateParams: UpdateParams,
  updateBody: UpdateBody,
  options: PatchOptions = {},
): Observable<[T, AjaxResponse<T>]> {
  const url = getUrl(apiUrl, `/${updateParams.id}`);
  return ajax<T>({
    url: url.toString(),
    method: 'PATCH',
    body: updateBody,
    withCredentials: true,
    ...options,
  }).pipe(map((value: AjaxResponse<T>) => [value.response, value]));
}
 
export type UpsertOptions = Omit<
  AjaxConfig,
  'url' | 'method' | 'body' | 'withCredentials'
>;
 
/**
 * Update or create one Model
 *
 * @Remarks
 *
 * Partial updates are forbidden with this method. It will
 * fully replace the matched entity
 *
 * @param apiUrl - Url of the api endpoint
 * @param upsertParams - Dto of the request param
 * @param updateBody - Dto of the request body
 * @param options - Ajax request options
 * @returns the updated Model
 */
export function upsert<
  T,
  UpsertParams extends { id?: string | number },
  UpsertBody,
>(
  apiUrl: URL,
  upsertParams: UpsertParams,
  upsertBody: UpsertBody,
  options: UpsertOptions = {},
): Observable<[T, AjaxResponse<T>]> {
  const url = getUrl(apiUrl, upsertParams.id ? `/${upsertParams.id}` : '');
  return ajax<T>({
    url: url.toString(),
    method: 'PUT',
    body: upsertBody,
    withCredentials: true,
    ...options,
  }).pipe(map((value: AjaxResponse<T>) => [value.response, value]));
}
 
export type RemoveOptions = Omit<
  AjaxConfig,
  'url' | 'method' | 'withCredentials'
>;
 
/**
 * Delete one Model
 *
 * @param apiUrl - Url of the api endpoint
 * @param deleteParams - Dto of the request param
 * @param options - Ajax request options
 * @returns the updated Model
 */
export function remove<T, DeleteParams extends { id: string | number }>(
  apiUrl: URL,
  deleteParams: DeleteParams,
  options: RemoveOptions = {},
): Observable<[T, AjaxResponse<T>]> {
  const url = getUrl(apiUrl, `/${deleteParams.id}`);
  return ajax<T>({
    url: url.toString(),
    method: 'DELETE',
    withCredentials: true,
    ...options,
  }).pipe(map((value: AjaxResponse<T>) => [value.response, value]));
}
 