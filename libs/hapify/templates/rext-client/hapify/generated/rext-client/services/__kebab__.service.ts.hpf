import { Observable, OperatorFunction, zip } from 'rxjs';
import { switchMap } from 'rxjs/operators';

import { transformAndValidateMap } from '@tractr/common';
 
import {
  count,
  CountAjaxOptions,
  create,
  CreateAjaxOptions,
  extractAjaxResponseData,
  findMany,
  FindManyOptions,
  findUnique,
  FindUniqueOptions,
  fromDto,
  isAlike,
  patch,
  PatchOptions,
  remove,
  RemoveOptions,
  upsert,
  UpsertOptions,
} from '../helpers';
 
import { <<Model pascal>> } from '../../models';
import {
  <<Model pascal>>CountQueryDto,
  <<Model pascal>>CreateBodyDto,
  <<Model pascal>>DeleteParamsDto,
  <<Model pascal>>FindManyQueryDto,
  <<Model pascal>>FindUniqueParamsDto,<<<if (root.dependencies.list.length || root.referencedIn.length) {>>>
  <<Model pascal>>FindUniqueQueryDto,<<<}>>>
  <<Model pascal>>UpdateBodyDto,
  <<Model pascal>>UpdateParamsDto,
  <<Model pascal>>UpsertBodyDto,
  <<Model pascal>>UpsertParamsDto,
} from '../../rest-dtos';
 
export class <<Model pascal>>Service {
  public apiUrl: URL;
 
  constructor(apiUrl: string | URL) {
    this.apiUrl = new URL(`${apiUrl}/<<Model kebab>>`);
  }
 
  /**
   * Create a new <<Model pascal>>
   *
   * @param createBody - Dto of the request body
   * @param options - Ajax request options
   * @returns a new <<Model pascal>>
   */
  public create$(
    createBody: <<Model pascal>>CreateBodyDto,
    options?: CreateAjaxOptions,
  ): Observable<<<Model pascal>>> {
    return fromDto(createBody, <<Model pascal>>CreateBodyDto).pipe(
      switchMap((body) =>
        create(this.apiUrl, body, options).pipe(
          extractAjaxResponseData(),
          transformAndValidateMap(<<Model pascal>>),
        ),
      ),
    );
  }
 
  /**
   * Create a new <<Model pascal>>
   *
   * @param options - Ajax request options
   * @returns a new <<Model pascal>>
   */
  public create(
    options?: CreateAjaxOptions,
  ): OperatorFunction<<<Model pascal>>CreateBodyDto, <<Model pascal>>> {
    return switchMap((createBody) => this.create$(createBody, options));
  }
 
  /**
   * Count the number of <<Model pascal>> entities that matches the filter
   *
   * @param countQuery - Dto of the request query
   * @param options - Ajax request options
   * @returns the number of <<Model pascal>>
   */
  public count$(
    countQuery?: <<Model pascal>>CountQueryDto,
    options?: CountAjaxOptions,
  ): Observable<number> {
    return fromDto(countQuery, <<Model pascal>>CountQueryDto).pipe(
      switchMap((query) =>
        count(this.apiUrl, { ...query }, options).pipe(
          extractAjaxResponseData(),
        ),
      ),
    );
  }
 
  /**
   * Count the number of <<Model pascal>> entities that matches the filter
   *
   * @param options - Ajax request options
   * @returns the number of <<Model pascal>>
   */
  public count(
    options?: CountAjaxOptions,
  ): OperatorFunction<<<Model pascal>>CountQueryDto | undefined, number> {
    return switchMap((countQuery) => this.count$(countQuery, options));
  }
 
  /**
   * Find zero or one Model that matches the filter
   *
   model
   * @param findUniqueParams - Dto of the request param<<<if (root.dependencies.list.length || root.referencedIn.length) {>>>
   * @param findUniqueQuery - Dto of the request query<<<}>>>
   * @param options - Ajax request options
   * @returns a Model or null
   */
  public findUnique$(
    findUniqueParams: <<Model pascal>>FindUniqueParamsDto,<<<if (root.dependencies.list.length || root.referencedIn.length) {>>>
    findUniqueQuery?: <<Model pascal>>FindUniqueQueryDto,<<<}>>>
    options?: FindUniqueOptions,
  ): Observable<<<Model pascal>>> {
    return zip(
      fromDto(findUniqueParams, <<Model pascal>>FindUniqueParamsDto),<<<if (root.dependencies.list.length || root.referencedIn.length) {>>>
      fromDto(findUniqueQuery, <<Model pascal>>FindUniqueQueryDto),<<<}>>>
    ).pipe(
      switchMap(([params<<<if (root.dependencies.list.length || root.referencedIn.length) {>>>, query<<<}>>>]) =>
        findUnique(this.apiUrl, params, {<<<if (root.dependencies.list.length || root.referencedIn.length) {>>> ...query <<<}>>>}, options).pipe(
          extractAjaxResponseData(),
          transformAndValidateMap(<<Model pascal>>),
        ),
      ),
    );
  }
 
  /**
   * Count the number of <<Model pascal>> entities that matches the filter
   *
   * @param options - Ajax request options
   * @returns the number of <<Model pascal>>
   */
  public findUnique(
    options?: FindUniqueOptions,
  ): OperatorFunction<
    | { params: <<Model pascal>>FindUniqueParamsDto<<<if (root.dependencies.list.length || root.referencedIn.length) {>>>; query?: <<Model pascal>>FindUniqueQueryDto <<<}>>> }
    | [<<Model pascal>>FindUniqueParamsDto<<<if (root.dependencies.list.length || root.referencedIn.length) {>>>, <<Model pascal>>FindUniqueQueryDto <<<}>>>]
    | <<Model pascal>>FindUniqueParamsDto,
    <<Model pascal>>
  > {
    return switchMap((source) => {
      if (Array.isArray(source))
        return this.findUnique$(source[0], <<<if (root.dependencies.list.length || root.referencedIn.length) {>>>source[1], <<<}>>>options);
	
      if (isAlike(source, <<Model pascal>>FindUniqueParamsDto))
        return this.findUnique$(source, <<<if (root.dependencies.list.length || root.referencedIn.length) {>>>undefined, <<<}>>>options);
	
      return this.findUnique$(source.params, <<<if (root.dependencies.list.length || root.referencedIn.length) {>>>source.query, <<<}>>>options);
    });
  }
 
  /**
   * Find zero or more Model entities that matches the filter
   *
   * @param findManyQuery - Dto of the request query
   * @param options - Ajax request options
   * @returns an array of Model entities
   */
  public findMany$(
    findManyQuery?: <<Model pascal>>FindManyQueryDto,
    options?: FindManyOptions,
  ): Observable<<<Model pascal>>[]> {
    return fromDto(findManyQuery, <<Model pascal>>FindManyQueryDto).pipe(
      switchMap((params) =>
        findMany(this.apiUrl, { ...params }, options).pipe(
          extractAjaxResponseData(),
          transformAndValidateMap(<<Model pascal>>),
        ),
      ),
    );
  }
 
  /**
   * Find zero or more Model entities that matches the filter
   *
   * @param options - Ajax request options
   * @returns an array of Model entities
   */
  public findMany(
    options?: FindManyOptions,
  ): OperatorFunction<<<Model pascal>>FindManyQueryDto | undefined, <<Model pascal>>[]> {
    return switchMap((findManyQuery) => this.findMany$(findManyQuery, options));
  }
 
  /**
   * Update one <<Model pascal>>
   *
   * @Remarks
   *
   * Partial updates are allowed with this method
   *
   * @param updateParams - Dto of the request param
   * @param updateBody - Dto of the request body
   * @param options - Ajax request options
   * @returns the updated <<Model pascal>>
   */
  public patch$(
    updateParams: <<Model pascal>>UpdateParamsDto,
    updateBody: <<Model pascal>>UpdateBodyDto,
    options?: PatchOptions,
  ): Observable<<<Model pascal>>> {
    return zip(
      fromDto(updateParams, <<Model pascal>>UpdateParamsDto),
      fromDto(updateBody, <<Model pascal>>UpdateBodyDto),
    ).pipe(
      switchMap(([params, body]) =>
        patch(this.apiUrl, params, body, options).pipe(
          extractAjaxResponseData(),
          transformAndValidateMap(<<Model pascal>>),
        ),
      ),
    );
  }
 
  /**
   * patch$ alias
   */
  public update$ = this.patch$.bind(this);
 
  /**
   * Update one <<Model pascal>>
   *
   * @Remarks
   *
   * Partial updates are allowed with this method
   *
   * @param updateParams - Dto of the request param
   * @param updateBody - Dto of the request body
   * @param options - Ajax request options
   * @returns the updated <<Model pascal>>
   */
  public patch(
    options?: PatchOptions,
  ): OperatorFunction<
    | { params: <<Model pascal>>UpdateParamsDto; body: <<Model pascal>>UpdateBodyDto }
    | [<<Model pascal>>UpdateParamsDto, <<Model pascal>>UpdateBodyDto],
    <<Model pascal>>
  > {
    return switchMap((source) => {
      if (Array.isArray(source))
        return this.patch$(source[0], source[1], options);
	
      return this.patch$(source.params, source.body, options);
    });
  }
 
  /**
   * patch alias
   */
  public update = this.patch.bind(this);
 
  /**
   * Update one <<Model pascal>>
   *
   * @Remarks
   *
   * Partial updates are allowed with this method
   *
   * @param updateParams - Dto of the request param
   * @param updateBody - Dto of the request body
   * @param options - Ajax request options
   * @returns the updated <<Model pascal>>
   */
  public upsert$(
    updateParams: <<Model pascal>>UpsertParamsDto,
    updateBody: <<Model pascal>>UpsertBodyDto,
    options?: UpsertOptions,
  ): Observable<<<Model pascal>>> {
    return zip(
      fromDto(updateParams, <<Model pascal>>UpsertParamsDto),
      fromDto(updateBody, <<Model pascal>>UpsertBodyDto),
    ).pipe(
      switchMap(([params, body]) =>
        upsert(this.apiUrl, params, body, options).pipe(
          extractAjaxResponseData(),
          transformAndValidateMap(<<Model pascal>>),
        ),
      ),
    );
  }
 
  /**
   * Update one <<Model pascal>>
   *
   * @Remarks
   *
   * Partial updates are allowed with this method
   *
   * @param updateParams - Dto of the request param
   * @param updateBody - Dto of the request body
   * @param options - Ajax request options
   * @returns the updated <<Model pascal>>
   */
  public upsert(
    options?: UpsertOptions,
  ): OperatorFunction<
    | { params: <<Model pascal>>UpsertParamsDto; body: <<Model pascal>>UpsertBodyDto }
    | [<<Model pascal>>UpsertParamsDto, <<Model pascal>>UpsertBodyDto],
    <<Model pascal>>
  > {
    return switchMap((source) => {
      if (Array.isArray(source))
        return this.upsert$(source[0], source[1], options);
	
      return this.upsert$(source.params, source.body, options);
    });
  }
 
  /**
   * Delete one <<Model pascal>>
   *
   * @param deleteParams - Dto of the request param
   * @param options - Ajax request options
   * @returns the updated <<Model pascal>>
   */
  public remove$(
    deleteParams: <<Model pascal>>DeleteParamsDto,
    options?: RemoveOptions,
  ): Observable<<<Model pascal>>> {
    return fromDto(deleteParams, <<Model pascal>>DeleteParamsDto).pipe(
      switchMap((params) =>
        remove(this.apiUrl, { ...params }, options).pipe(
          extractAjaxResponseData(),
          transformAndValidateMap(<<Model pascal>>),
        ),
      ),
    );
  }
 
  /**
   * remove$ alias
   */
  public delete$ = this.remove$.bind(this);
 
  /**
   * Delete one <<Model pascal>>
   *
   * @param deleteParams - Dto of the request param
   * @param options - Ajax request options
   * @returns the updated <<Model pascal>>
   */
  public remove(
    options?: RemoveOptions,
  ): OperatorFunction<<<Model pascal>>DeleteParamsDto, <<Model pascal>>> {
    return switchMap((removeParams) => this.remove$(removeParams, options));
  }
 
  /**
   * remove alias
   */
  public delete = this.remove.bind(this);
}
 
