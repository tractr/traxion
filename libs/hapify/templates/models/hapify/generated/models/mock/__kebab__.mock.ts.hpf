import { 
  <<Model pascal>>,
} from '../models';

<<if Fields enum>>
import {
  <<for Fields enum enumField>>
  <<Model pascal>><<enumField pascal>>,
  <<endfor>>
} from '../enums';
<<endif>>

<<if Fields object>>
import { JsonObject } from '@tractr/common';
<<endif>>

import {

  <<if Fields primary or entity or number or boolean>>
  datatype,
  <<endif>>

  <<if Fields enum>>
  random,
  <<endif>>

  <<if Fields email or password or url>>
  internet,
  <<endif>>

  <<if Fields object or (string and not (primary or email or password or url))>>
  lorem,
  <<endif>>

  <<if Fields datetime>>
  date,
  <<endif>>

} from 'faker';


<<if Fields unique>>
import { <<Model pascal>>UniqueValues } from './../models';
<<endif>>


  
<<for Fields field>>
  <<if field not entity>>
export function mock<<Model pascal>><<field pascal>>Factory(): <<=getMockReturnType(field)>> {
  return <<=getFaker(field)>>;
}
  
  <<elseif field oneOne or oneMany>>
export function mock<<Model pascal>><<field pascal>>IdFactory(): <<=getMockReturnType(field)>> {
  return <<=getFaker(field)>>;
}
    
  <<else>>
export function mock<<Model pascal>><<field pascal>>IdsFactory(): string[] {
  return <<=getFaker(field)>>;

}
    
  <<endif>>
<<endfor>>
  
export function mock<<Model pascal>>Factory(override: Partial< <<Model pascal>> > = {}): <<Model pascal>> {
  return {
  <<for Fields not entity field>>
    <<field camel>>: mock<<Model pascal>><<field pascal>>Factory(),
  <<endfor>>
  <<for Fields oneOne or oneMany field>>
    <<field camel>>Id: mock<<Model pascal>><<field pascal>>IdFactory(),
  <<endfor>>
    ...override,
  };
}


export function mock<<Model pascal>>sFactory(override: Partial< <<Model pascal>> > = {}, quantity: number = 1): <<Model pascal>>[] {
  <<if Fields not internal and not boolean and not enum and unique>>
  const uniqueValues: <<Model pascal>>UniqueValues = {
    <<for Fields not internal and not boolean and not enum and unique field>>
      <<if field not entity>>
      <<field camel>>:[],
      <<else>>
      <<field camel>>Id: [],
      <<endif>>
    <<endfor>> 
  };
  return [...Array(quantity)].map(() => {
    let tmp<<Model pascal>> = mock<<Model pascal>>Factory(override);
    while (
    <<<root.f.unique.filter((e) => !e.internal && e.type !== 'boolean' && e.type !== 'enum').forEach((unique,index) => {>>>
      (
      <<<if(unique.type === 'entity'){>>>
      tmp<<Model pascal>>.<<unique camel>> && uniqueValues.<<unique camel>>Id.includes(tmp<<Model pascal>>.<<unique camel>>))
      <<<}else{>>>
      uniqueValues.<<unique camel>>.includes(tmp<<Model pascal>>.<<unique camel>>))
      <<<}>>>
      <<<if(index < root.f.unique.filter((e) => !e.internal && e.type !== 'boolean' && e.type !== 'enum').length - 1){>>>
      ||
      <<<}>>>
    <<<})>>>
    ) {
      <<for Fields not internal and not boolean and not enum and unique field>>
        <<if field not entity>>
        if(override.<<field camel>>) {
          override.<<field camel>> = mock<<Model pascal>><<field pascal>>Factory();
        }
        <<else>>
        if(override.<<field camel>>) {
          override.<<field camel>> = mock<<Model pascal>><<field pascal>>IdFactory();
        }
        <<endif>>
      <<endfor>> 
      tmp<<Model pascal>> = mock<<Model pascal>>Factory(override);
    }
    <<for Fields not internal and not boolean and not enum and unique field>>
      <<if field not entity>>
      uniqueValues.<<field camel>>.push(tmp<<Model pascal>>.<<field camel>>);
      <<else>>
      if(tmp<<Model pascal>>.<<field camel>>) uniqueValues.<<field camel>>Id.push(tmp<<Model pascal>>.<<field camel>>);
      <<endif>>
    <<endfor>>
    return tmp<<Model pascal>>;
  });
  <<else>>
    return [...Array(quantity)].map(() => mock<<Model pascal>>Factory(override));
  <<endif>>
}

<<<
function getBaseFaker(f) {
  if (f.primary && f.type === 'string') return 'datatype.uuid()';
  if (f.primary && f.type === 'number') return 'datatype.number()';
  if (f.type === 'string' && !f.subtype) return 'lorem.words()';
  if (f.type === 'string' && f.subtype === 'email') return 'internet.email()';
  if (f.type === 'string' && f.subtype === 'password') return 'internet.password()';
  if (f.type === 'string' && f.subtype === 'url') return 'internet.url()';
  if (f.type === 'string' && f.subtype === 'text') return 'lorem.paragraph()';
  if (f.type === 'boolean') return 'datatype.boolean()';
  if (f.type === 'number' && (!f.subtype || f.subtype === "integer")) return 'datatype.number()';
  if (f.type === 'number' && (f.subtype === 'float' || f.subtype === 'latitude' || f.subtype === 'longitude')) return 'datatype.float()';
  if (f.type === 'datetime') return 'date.past()';
  if (f.type === 'entity') return 'datatype.uuid()';
  if (f.type === 'object')  return 'generateFakeObject()';
  if (f.type === 'enum') return `random.arrayElement(Object.values(${root.names.pascal}${f.names.pascal}))`;
}
>>>
 
<<<
function getFaker(f) {
  if (f.multiple) {
   return `[...Array(3)].map(() => ${getBaseFaker(f)})`; 
  } else {
    return getBaseFaker(f);
  }
}
>>>
<<<
function getMockReturnType(f) {
  let out = '';
  if (f.nullable) out += 'NonNullable<';
  out += `${root.names.pascal}['${f.names.camel}`;
  if (f.subtype === 'oneOne' || f.subtype === 'oneMany') out += 'Id';
  out += "']"
  if (f.nullable) out += '>';
  return out;
}
>>>

<<if Fields object>>
function generateFakeObject() {
 const countKeys = Math.floor(Math.random() * 10);
  const obj : JsonObject = {};
  for (let i=0; i<=countKeys; i++) {
    obj[`key${i}`] = lorem.word();
  }
  return obj;
}
<<endif>>

