import { ChangeDetectionStrategy, Component } from '@angular/core';
import type { BlogPost, Profil, Tag, User as UserType } from '@prisma/client';
import { SessionService } from '@tractr/angular-authentication';
import {
  catchError,
  map,
  Observable,
  of,
  OperatorFunction,
  pipe,
  switchMap,
  switchMapTo,
} from 'rxjs';

import {
  BlogPostService,
  ProfilService,
  TagService,
  UserService,
} from '<%= generatedImportPath %>angular-rext-client';
import { User } from '<%= generatedImportPath %>models';

export type ApiResponse<T> = {
  status: number;
  error?: string;
  data?: T;
};

@Component({
  selector: '<%= npmScope %>-login-form',
  templateUrl: './login-form.component.html',
  styleUrls: ['./login-form.component.less'],
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class LoginFormComponent {
  constructor(
    public sessionService: SessionService<UserType>,
    private userService: UserService,
    private blogPostService: BlogPostService,
    private profilService: ProfilService,
    private tagService: TagService,
  ) {}

  public currentUser$: Observable<User | null> = this.sessionService.me$;

  public userIdOrNull$: Observable<string | null> =
    this.sessionService.me$.pipe(
      map((user) => {
        if (user) {
          return user.id;
        }
        return null;
      }),
    );

  public users$: Observable<ApiResponse<User[]>> = this.userIdOrNull$.pipe(
    switchMap(() => this.userService.findMany$().pipe(this.toApiResponse())),
  );

  public usersCount$: Observable<ApiResponse<number>> = this.userIdOrNull$.pipe(
    switchMapTo(this.userService.count$().pipe(this.toApiResponse())),
  );

  public userUnique$: Observable<ApiResponse<User>> = this.userIdOrNull$.pipe(
    switchMap((id) => {
      if (id)
        return this.userService.findUnique$({ id }).pipe(this.toApiResponse());
      return of({ status: 404, error: 'id not found' });
    }),
  );

  public tags$: Observable<ApiResponse<Tag[]>> = this.userIdOrNull$.pipe(
    switchMapTo(this.tagService.findMany$().pipe(this.toApiResponse())),
  );

  public tagsCount$: Observable<ApiResponse<number>> = this.userIdOrNull$.pipe(
    switchMapTo(this.tagService.count$().pipe(this.toApiResponse())),
  );

  public blogPosts$: Observable<ApiResponse<BlogPost[]>> =
    this.userIdOrNull$.pipe(
      switchMapTo(this.blogPostService.findMany$().pipe(this.toApiResponse())),
    );

  public blogPostsCount$: Observable<ApiResponse<number>> =
    this.userIdOrNull$.pipe(
      switchMapTo(this.blogPostService.count$().pipe(this.toApiResponse())),
    );

  public profils$: Observable<ApiResponse<Profil[]>> = this.userIdOrNull$.pipe(
    switchMapTo(this.profilService.findMany$().pipe(this.toApiResponse())),
  );

  public profilsCount$: Observable<ApiResponse<number>> =
    this.userIdOrNull$.pipe(
      switchMap(() => this.profilService.count$().pipe(this.toApiResponse())),
    );

  public toApiResponse<T>(): OperatorFunction<T, ApiResponse<T>> {
    return pipe(
      map((data) => ({ status: 200, data })),
      catchError(({ status, message }) => of({ status, error: message })),
    );
  }
}
