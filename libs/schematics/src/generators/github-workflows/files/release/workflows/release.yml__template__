name: Release and Deploy

on:
  push:
    branches:
      - main

jobs:
  # Take all the packages and release them to https://npm.pkg.github.com
  npm-release:
    if: "!contains(github.event.commits[0].message, 'chore(release):')"

    # Our code will run on node 16 and Linux
    strategy:
      matrix:
        node: [16.x]
        os: [node-16]

    name: Release npm packages on node ${{ matrix.node }} and ${{ matrix.os }}
    runs-on: [self-hosted, '${{ matrix.os }}']

    outputs:
      apps: ${{ steps.apps.outputs.result }}

    steps:
      # First we checkout the code
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          persist-credentials: false
          token: ${{ secrets.GH_TOKEN }}

      # We initialize the node action
      - name: Use node.js ${{ matrix.node }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
          registry-url: https://npm.pkg.github.com

      # We get our cache compare to our package-lock
      - uses: actions/cache@v2.1.4
        with:
          path: '~/.npm'
          key:
            ${{ matrix.os }}-npm-${{ matrix.node }}-${{
            hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ matrix.os }}-npm-${{ matrix.node }}-

      # We install our dependencies
      - name: Run npm install
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm ci --no-audit --no-progress

      # We build our code base
      - name: Run nx build
        run: npx nx build

      # We build our code base
      - name: Configure git
        run: |
          git config --local user.name 'tractr-bot'
          git config --local user.email 'tractr-bot@users.noreply.github.com'

      # We run our version script
      - name: nx run workspace:release
        run: npx nx run workspace:release --base latest

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GH_TOKEN }}
          branch: ${{ github.ref }}
          tags: true

      # We publish our release
      - name: run npm affected:publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        # Publish will try on all the packages
        # Wait to see https://github.com/jscutlery/semver/issues/167
        run: npx nx run-many --target publish --all --base latest

      # Set the matrix apps that have been affected by all the changes
      - name: Affected apps output
        id: nx-apps
        run: |
          echo "::set-output name=apps::$(npx nx affected:apps --plain --base latest | sed 's/ /,/g')"

      - name: Return formatted output
        uses: actions/github-script@v3
        id: apps
        env:
          APPS: ${{ steps.nx-apps.outputs.apps }}
        with:
          script: |
            const fs = require('fs');
            const join = require('path').join;
            const apps = process.env.APPS.split(',')
              .filter((name) => name !== '')
              .filter((name) => fs.existsSync(join(process.cwd(), 'apps', name, 'Dockerfile')));

            console.log('Set the matrix to deploy the docker container:', apps);
            return apps;

      - name: Get the last commit SHA
        id: commit
        shell: bash
        run: |
          echo "::set-output name=sha::$(git rev-parse HEAD)"

      - name: Manage released tag
        uses: actions/github-script@v3
        env:
          SHA: ${{ steps.commit.outputs.sha }}

        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            try {
              console.log("Remove the latest tag from the repository")
              await github.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: "tags/latest"
              })
            } catch (e) {
              console.log("The latest tag doesn't exist yet: " + e)
            }
            console.log("Create the latest tag on:" + context.sha)
            await github.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/latest",
              sha: process.env.SHA
            })

  docker-release:
    # If we got some change inside apps/** we execute this job
    if: |
      !contains(github.event.commits[0].message, 'chore(release):') &&
      !failure() &&
      !contains(needs.npm-changes.outputs.apps, '[]')
    needs: [npm-release]
    strategy:
      matrix:
        app: ${{ fromJSON(needs.npm-release.outputs.apps) }}
        node: [16.x]
        os: [node-16]
        scope: [tractr]
        repository: [tractr]
    name: docker release ${{ matrix.app }} (@${{ matrix.scope }})
    runs-on: [self-hosted, '${{ matrix.os }}']
    steps:
      # Checkout the source code
      - uses: actions/checkout@v2

      # Setup the node js env
      - name: use node.js ${{ matrix.node }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
          registry-url: https://npm.pkg.github.com

      # Get some cache to speed up docker build
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.app }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.app }}-

      - name: Extract version
        id: extract_version
        uses: Saionaro/extract-package-version@v1.1.1
        with:
          path: ./apps/${{ matrix.app }}

      # Register some meta data to build docker
      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v3
        with:
          flavor: |
            latest=true
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}},value=v${{ steps.extract_version.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=v${{ steps.extract_version.outputs.version }}
          images:
            ghcr.io/${{ matrix.repository }}/${{ matrix.scope }}-${{ matrix.app
            }}

      # Setup QEMU
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      # RSetup buildx
      - uses: docker/setup-buildx-action@v1
        id: buildx
        with:
          install: true

      # Loggin to our docker registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_TOKEN }}

      # Build and push our docker images to the registry
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          file: ./apps/${{ matrix.app }}/Dockerfile
          secret-files: npmrc=${{ env.NPM_CONFIG_USERCONFIG }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          build-args: |
            app=${{ matrix.app }}
            NODE_AUTH_TOKEN=${{ secrets.NPM_TOKEN }}

      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      # Change the cache for buildx
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
