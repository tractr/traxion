import { ValidationPipe } from '@nestjs/common';
import { NestFactory } from '@nestjs/core';
import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';
import { Logger, PrismaExceptionInterceptor } from '@tractr/nestjs-core';
import * as cookieParser from 'cookie-parser';
import * as morgan from 'morgan';

import { AppModule } from './app/app.module';

// Bootstrap the main application
async function bootstrap() {
  const port = process.env.PORT || 3000;
  const globalPrefix = 'api';

  // Instantiate nest app
  const app = await NestFactory.create(AppModule);

  // Set custom logger service
  const logger = await app.resolve(Logger);
  app.useLogger(logger);
  app.setGlobalPrefix(globalPrefix);

  app.use(morgan('combined'));

  const { COOKIE_SECRET: cookieSecret } = process.env;

  if (cookieSecret === undefined || cookieSecret === '')
    throw new Error('COOKIE_SECRET is missing in the environment variables');

  app.use(cookieParser(cookieSecret));

  // Set global validation pipe
  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true,
      forbidNonWhitelisted: true,
      transform: true,
      transformOptions: {
        enableImplicitConversion: false,
        exposeDefaultValues: true,
      },
    }),
  );

  app.useGlobalInterceptors(new PrismaExceptionInterceptor());

  // Set swagger documentation
  const swaggerOptions = new DocumentBuilder()
    .setTitle('<%= npmScope %>')
    .setDescription('This is the REST API documentation generated by Swagger')
    .setVersion('1.0')
    .addBearerAuth()
    .addTag('swagger')
    .build();

  const swaggerDocument = SwaggerModule.createDocument(app, swaggerOptions);
  SwaggerModule.setup('api', app, swaggerDocument);

  // Start app and define port
  await app.listen(port, () => {
    logger.log(`Listening at http://localhost:${port}/${globalPrefix}`);
  });
}

bootstrap().catch((e) => {
  console.error('Failed to start the server. See the error below.');
  console.error(e);
});
