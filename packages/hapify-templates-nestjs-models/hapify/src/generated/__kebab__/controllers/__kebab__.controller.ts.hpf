import {
  Body,
  Controller,
  Delete,
  Get,
  Param,
  Post,
  Put,
  Query,
} from '@nestjs/common';
import { <<Model pascal>> } from '@prisma/client';
import { <<Model pascal>>Service } from '../services';
import {
  <<Model pascal>>CreateDto,
  <<Model pascal>>ReadOneDto,
  <<Model pascal>>ReadManyDto,
  <<Model pascal>>UpdateDto,
} from '../dtos';

@Controller(['<<Model pascal>>', 'admin/<<Model pascal>>'])
export class <<Model pascal>>Controller {
  constructor(private <<Model camel>>Service: <<Model pascal>>Service) {}

  @Post()
  public async create(@Body() data: <<Model pascal>>CreateDto): Promise<<<Model pascal>>> {
    return this.<<Model camel>>Service.create(data);
  }

  @Get('count')
  public async count(@Query() filters: <<Model pascal>>ReadManyDto): Promise<number> {
    const where = this.<<Model camel>>Service.transformSearchDtoToSearchParams(filters);
    return this.<<Model camel>>Service.count(where);
  }

  @Get(':id')
  public async readOne(
    @Param('id') id: string,
    @Query() include: <<Model pascal>>ReadOneDto
  ): Promise<<<Model pascal>>> {
    return this.<<Model camel>>Service.readOne({ id }, { include });
  }

  @Get()
  public async readMany(@Query() filters: <<Model pascal>>ReadManyDto): Promise<<<Model pascal>>[]> {
    const where = this.<<Model camel>>Service.transformSearchDtoToSearchParams(filters);
    return this.<<Model camel>>Service.readMany(where);
  }

  @Put(':id')
  public async update(
    @Param('id') id: string,
    @Body() data: <<Model pascal>>UpdateDto
  ): Promise<<<Model pascal>>> {
    return this.<<Model camel>>Service.update({ id }, data);
  }

  @Delete(':id')
  public async delete(@Param('id') id: string): Promise<<<Model pascal>>> {
    return this.<<Model camel>>Service.delete({ id });
  }
}

