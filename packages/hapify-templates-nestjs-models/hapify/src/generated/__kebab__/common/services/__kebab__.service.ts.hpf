import { Inject, Injectable } from '@nestjs/common';
import { Prisma, <<Model pascal>> } from '@prisma/client';
 
import { <<Model constant>>_DATABASE_SERVICE } from '../<<Model kebab>>-model.constant';
import { <<Model pascal>>DatabaseService } from './<<Model kebab>>-database.service';
 
@Injectable()
export class <<Model pascal>>Service {
  constructor(
    @Inject(<<Model constant>>_DATABASE_SERVICE)
    private readonly <<Model camel>>DatabaseService: <<Model pascal>>DatabaseService,
  ) {}
 
  /**
   * Create a new <<Model pascal>>
   *
   * @param params - Arguments to create a new <<Model pascal>>
   * @returns a new <<Model pascal>>
   */
  public async create(params: Prisma.<<Model pascal>>CreateArgs): Promise<<<Model pascal>>> {
    return this.<<Model camel>>DatabaseService.create(params);
  }
 
  /**
   * Find zero or one <<Model pascal>> that matches the filter
   *
   * @param params - Arguments to find a unique <<Model pascal>>
   * @returns a User or null
   */
  public async findUnique(params: Prisma.<<Model pascal>>FindUniqueArgs): Promise<<<Model pascal>> | null> {
    return this.<<Model camel>>DatabaseService.findUnique(params);
  }
 
  /**
   * Find zero or more <<Model pascal>> entities that matches the filter
   *
   * @param params - Arguments to find <<Model pascal>> entities
   * @returns an array of <<Model pascal>> entities
   */
  public async findMany(params: Prisma.<<Model pascal>>FindManyArgs): Promise<<<Model pascal>>[]> {
    return this.<<Model camel>>DatabaseService.findMany(params);
  }
 
  /**
   * Count the number of <<Model pascal>> entities that matches the filter
   *
   * @param params - Arguments to filter <<Model pascal>> entities to count
   * @returns the number of <<Model pascal>> entities that matches the filter
   */
  public async count(params: Prisma.<<Model pascal>>CountArgs): Promise<number> {
    return this.<<Model camel>>DatabaseService.count(params);
  }
 
  /**
   * Update one <<Model pascal>>
   *
   * @param params - Arguments to update one <<Model pascal>>
   * @returns the updated <<Model pascal>>
   */
  public async update(params: Prisma.<<Model pascal>>UpdateArgs): Promise<<<Model pascal>>> {
    return this.<<Model camel>>DatabaseService.update(params);
  }
 
  /**
   * Create or update one <<Model pascal>>
   *
   * @param params - Arguments to update or create a <<Model pascal>>
   * @returns the created or updated <<Model pascal>>
   */
  public async upsert(params: Prisma.<<Model pascal>>UpsertArgs): Promise<<<Model pascal>>> {
    return this.<<Model camel>>DatabaseService.upsert(params);
  }
 
  /**
   * Delete a <<Model pascal>>
   *
   * @param params - Arguments to delete one <<Model pascal>>
   * @returns the deleted <<Model pascal>>
   */
  public async delete(params: Prisma.<<Model pascal>>DeleteArgs): Promise<<<Model pascal>>> {
    return this.<<Model camel>>DatabaseService.delete(params);
  }
}

