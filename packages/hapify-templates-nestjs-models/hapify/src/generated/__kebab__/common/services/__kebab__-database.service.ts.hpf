import { Injectable } from '@nestjs/common';
import { Prisma } from '@prisma/client';
import { DatabaseService } from '@tractr/nestjs-database';
  
@Injectable()
export class <<Model pascal>>DatabaseService {
  constructor(protected readonly databaseService: DatabaseService) {}
 
  /**
   * Find zero or one <<Model pascal>> that matches the filter
   *
   * @param params - Arguments to find a unique <<Model pascal>>
   * @returns a User or null
   */
  public findUnique(
    params: Prisma.<<Model pascal>>FindUniqueArgs,
  ): ReturnType<
    Prisma.<<Model pascal>>Delegate<
      Prisma.PrismaClientOptions['rejectOnNotFound']
    >['findUnique']
  > {
    return this.databaseService.<<Model camel>>.findUnique(params);
  }
   
  /**
   * Find the first <<Model pascal>> that matches the filter
   *
   * @param params - Arguments to find a User
   * @returns a User or null
   */
  public findFirst(
    params: Prisma.<<Model pascal>>FindFirstArgs,
  ): ReturnType<
    Prisma.<<Model pascal>>Delegate<
      Prisma.PrismaClientOptions['rejectOnNotFound']
    >['findFirst']
  > {
    return this.databaseService.<<Model camel>>.findFirst(params);
  }
 
  /**
   * Find zero or more <<Model pascal>> entities that matches the filter
   *
   * @param params - Arguments to find <<Model pascal>> entities
   * @returns an array of <<Model pascal>>
   */
  public findMany(
    params: Prisma.<<Model pascal>>FindManyArgs,
  ): ReturnType<
    Prisma.<<Model pascal>>Delegate<
      Prisma.PrismaClientOptions['rejectOnNotFound']
    >['findMany']
  > {
    return this.databaseService.<<Model camel>>.findMany(params);
  }
 
  /**
   * Create a new <<Model pascal>>
   *
   * @param params - Arguments to create a new <<Model pascal>>
   * @returns a new <<Model pascal>>
   */
  public create(
    params: Prisma.<<Model pascal>>CreateArgs,
  ): ReturnType<
    Prisma.<<Model pascal>>Delegate<
      Prisma.PrismaClientOptions['rejectOnNotFound']
    >['create']
  > {
    return this.databaseService.<<Model camel>>.create(params);
  }
 
  /**
   * Update one <<Model pascal>>
   *
   * @param params - Arguments to update one <<Model pascal>>
   * @returns the updated <<Model pascal>>
   */
  public update(
    params: Prisma.<<Model pascal>>UpdateArgs,
  ): ReturnType<
    Prisma.<<Model pascal>>Delegate<
      Prisma.PrismaClientOptions['rejectOnNotFound']
    >['update']
  > {
    return this.databaseService.<<Model camel>>.update(params);
  }
 
  /**
   * Update zero or more <<Model pascal>> entities
   *
   * @param params - Arguments to update one or more <<Model pascal>> entities
   * @returns the updated <<Model pascal>> entities
   */
  public updateMany(
    params: Prisma.<<Model pascal>>UpdateManyArgs,
  ): ReturnType<
    Prisma.<<Model pascal>>Delegate<
      Prisma.PrismaClientOptions['rejectOnNotFound']
    >['updateMany']
  > {
    return this.databaseService.<<Model camel>>.updateMany(params);
  }
 
  /**
   * Create or update one <<Model pascal>>
   *
   * @param params - Arguments to update or create a <<Model pascal>>
   * @returns the created or updated <<Model pascal>>
   */
  public upsert(
    params: Prisma.<<Model pascal>>UpsertArgs,
  ): ReturnType<
    Prisma.<<Model pascal>>Delegate<
      Prisma.PrismaClientOptions['rejectOnNotFound']
    >['upsert']
  > {
    return this.databaseService.<<Model camel>>.upsert(params);
  }
 
  /**
   * Delete a <<Model pascal>>
   *
   * @param params - Arguments to delete one <<Model pascal>>
   * @returns the deleted <<Model pascal>>
   */
  public delete(
    params: Prisma.<<Model pascal>>DeleteArgs,
  ): ReturnType<
    Prisma.<<Model pascal>>Delegate<
      Prisma.PrismaClientOptions['rejectOnNotFound']
    >['delete']
  > {
    return this.databaseService.<<Model camel>>.delete(params);
  }
 
  /**
   * Delete zero or more <<Model pascal>> entities
   *
   * @param params - Arguments to filter <<Model pascal>> entities to delete
   * @returns the deleted <<Model pascal>> entities
   */
  public deleteMany(
    params: Prisma.<<Model pascal>>DeleteManyArgs,
  ): ReturnType<
    Prisma.<<Model pascal>>Delegate<
      Prisma.PrismaClientOptions['rejectOnNotFound']
    >['deleteMany']
  > {
    return this.databaseService.<<Model camel>>.deleteMany(params);
  }
 
  /**
   * Count the number of <<Model pascal>> entities
   *
   * @param params - Arguments to filter <<Model pascal>> entities to count
   * @returns the number of <<Model pascal>> entities that matches the filter
   */
  public count(
    params: Prisma.<<Model pascal>>CountArgs,
  ): ReturnType<
    Prisma.<<Model pascal>>Delegate<Prisma.PrismaClientOptions['rejectOnNotFound']>['count']
  > {
    return this.databaseService.<<Model camel>>.count(params);
  }
 
  /**
   * Allows to perform aggregations operations on a <<Model pascal>>
   *
   * @param params - Select aggragations to apply
   * @returns the result of the aggregation (number)
   */
  public aggregate(
    params: Prisma.<<Model pascal>>AggregateArgs,
  ): ReturnType<
    Prisma.<<Model pascal>>Delegate<
      Prisma.PrismaClientOptions['rejectOnNotFound']
    >['aggregate']
  > {
    return this.databaseService.<<Model camel>>.aggregate(params);
  }
}
