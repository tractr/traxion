import { Injectable } from '@nestjs/common';
import { Prisma } from '@prisma/client';
import { DatabaseService } from '@tractr/hapify-plugin-nestjs-database';
 
@Injectable()
export class <<Model pascal>>DatabaseService {
  constructor(private readonly databaseService: DatabaseService) {}
 
  public findUnique(
    params: Prisma.<<Model pascal>>FindUniqueArgs,
  ): ReturnType<
    Prisma.<<Model pascal>>Delegate<
      Prisma.PrismaClientOptions['rejectOnNotFound']
    >['findUnique']
  > {
    return this.databaseService.<<Model camel>>.findUnique(params);
  }
 
  public findFirst(
    params: Prisma.<<Model pascal>>FindFirstArgs,
  ): ReturnType<
    Prisma.<<Model pascal>>Delegate<
      Prisma.PrismaClientOptions['rejectOnNotFound']
    >['findFirst']
  > {
    return this.databaseService.<<Model camel>>.findFirst(params);
  }
 
  public findMany(
    params: Prisma.<<Model pascal>>FindManyArgs,
  ): ReturnType<
    Prisma.<<Model pascal>>Delegate<
      Prisma.PrismaClientOptions['rejectOnNotFound']
    >['findMany']
  > {
    return this.databaseService.<<Model camel>>.findMany(params);
  }
 
  public create(
    params: Prisma.<<Model pascal>>CreateArgs,
  ): ReturnType<
    Prisma.<<Model pascal>>Delegate<
      Prisma.PrismaClientOptions['rejectOnNotFound']
    >['create']
  > {
    return this.databaseService.<<Model camel>>.create(params);
  }
 
  public update(
    params: Prisma.<<Model pascal>>UpdateArgs,
  ): ReturnType<
    Prisma.<<Model pascal>>Delegate<
      Prisma.PrismaClientOptions['rejectOnNotFound']
    >['update']
  > {
    return this.databaseService.<<Model camel>>.update(params);
  }
 
  public updateMany(
    params: Prisma.<<Model pascal>>UpdateManyArgs,
  ): ReturnType<
    Prisma.<<Model pascal>>Delegate<
      Prisma.PrismaClientOptions['rejectOnNotFound']
    >['updateMany']
  > {
    return this.databaseService.<<Model camel>>.updateMany(params);
  }
 
  public upsert(
    params: Prisma.<<Model pascal>>UpsertArgs,
  ): ReturnType<
    Prisma.<<Model pascal>>Delegate<
      Prisma.PrismaClientOptions['rejectOnNotFound']
    >['upsert']
  > {
    return this.databaseService.<<Model camel>>.upsert(params);
  }
 
  public delete(
    params: Prisma.<<Model pascal>>DeleteArgs,
  ): ReturnType<
    Prisma.<<Model pascal>>Delegate<
      Prisma.PrismaClientOptions['rejectOnNotFound']
    >['delete']
  > {
    return this.databaseService.<<Model camel>>.delete(params);
  }
 
  public deleteMany(
    params: Prisma.<<Model pascal>>DeleteManyArgs,
  ): ReturnType<
    Prisma.<<Model pascal>>Delegate<
      Prisma.PrismaClientOptions['rejectOnNotFound']
    >['deleteMany']
  > {
    return this.databaseService.<<Model camel>>.deleteMany(params);
  }
 
  public count(
    params: Prisma.<<Model pascal>>CountArgs,
  ): ReturnType<
    Prisma.<<Model pascal>>Delegate<Prisma.PrismaClientOptions['rejectOnNotFound']>['count']
  > {
    return this.databaseService.<<Model camel>>.count(params);
  }
 
  public aggregate(
    params: Prisma.<<Model pascal>>AggregateArgs,
  ): ReturnType<
    Prisma.<<Model pascal>>Delegate<
      Prisma.PrismaClientOptions['rejectOnNotFound']
    >['aggregate']
  > {
    return this.databaseService.<<Model camel>>.aggregate(params);
  }
}
