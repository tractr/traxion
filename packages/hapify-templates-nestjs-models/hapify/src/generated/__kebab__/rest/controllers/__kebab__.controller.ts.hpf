import {
  Body,
  Controller,
  Delete,
  Get,
  Param,
  Patch,
  Post,
  Put,
  Query,
} from '@nestjs/common';
import { <<Model pascal>> } from '@prisma/client';
import { <<Model pascal>>Service } from '../../common';
import {
  <<Model pascal>>CreateBodyDto,
  <<Model pascal>>FindUniqueParamsDto,
  <<if Fields entity>>
  <<Model pascal>>FindUniqueQueryDto,
  <<endif>>
  <<Model pascal>>FindManyQueryDto,
  <<Model pascal>>UpdateParamsDto,
  <<Model pascal>>UpdateBodyDto,
  <<Model pascal>>UpsertParamsDto,
  <<Model pascal>>UpsertBodyDto,
  <<Model pascal>>CountQueryDto,
  <<Model pascal>>DeleteParamsDto,
} from '../dtos';
import { <<Model pascal>>RestDtoService } from '../services';
 
@Controller(['<<Model kebab>>', 'admin/<<Model kebab>>'])
export class <<Model pascal>>Controller {
  constructor(
    private <<Model camel>>Service: <<Model pascal>>Service,
    private <<Model camel>>RestDtoService: <<Model pascal>>RestDtoService
  ) {}
 
  @Post()
  public async create(@Body() bodyDto: <<Model pascal>>CreateBodyDto): Promise<<<Model pascal>>> {
    const formatedParams = this.<<Model camel>>RestDtoService.formatCreateDto(bodyDto);
    return this.<<Model camel>>Service.create(formatedParams);
  }
 
  @Get()
  public async findMany(
    @Query() queryDto: <<Model pascal>>FindManyQueryDto
  ): Promise<<<Model pascal>>[]> {
    const formatedParams = this.<<Model camel>>RestDtoService.formatFindManyDto(queryDto);
    return this.<<Model camel>>Service.findMany(formatedParams);
  }
 
  @Get('count')
  public async count(@Query() queryDto: <<Model pascal>>CountQueryDto): Promise<number> {
    const formatedParams = this.<<Model camel>>RestDtoService.formatCountDto(queryDto);
    return this.<<Model camel>>Service.count(formatedParams);
  }
 
  @Get(':id')
  public async findOne(
    @Param() paramsDto: <<Model pascal>>FindUniqueParamsDto,
    <<if Fields entity>>
    @Query() queryDto: <<Model pascal>>FindUniqueQueryDto
    <<endif>>
  ): Promise<<<Model pascal>> | null> {
    const formatedParams = this.<<Model camel>>RestDtoService.formatFindUniqueDtos(
      paramsDto,
    <<if Fields entity>>
      queryDto
    <<endif>>
    );
    return this.<<Model camel>>Service.findUnique(formatedParams);
  }
 
  @Patch(':id')
  public async update(
    @Param() paramsDto: <<Model pascal>>UpdateParamsDto,
    @Body() bodyDto: <<Model pascal>>UpdateBodyDto
  ): Promise<<<Model pascal>>> {
    const formatedParams = this.<<Model camel>>RestDtoService.formatUpdateDtos(
      paramsDto,
      bodyDto
    );
    return this.<<Model camel>>Service.update(formatedParams);
  }
 
  @Put(':id')
  public async upsert(
    @Param() paramsDto: <<Model pascal>>UpsertParamsDto,
    @Body() bodyDto: <<Model pascal>>UpsertBodyDto
  ): Promise<<<Model pascal>>> {
    const formatedParams = this.<<Model camel>>RestDtoService.formatUpsertDtos(
      paramsDto,
      bodyDto
    );
    return this.<<Model camel>>Service.upsert(formatedParams);
  }
 
  @Delete(':id')
  public async delete(@Param() paramsDto: <<Model pascal>>DeleteParamsDto): Promise<<<Model pascal>>> {
    const formatedParams = this.<<Model camel>>RestDtoService.formatDeleteDto(paramsDto);
    return this.<<Model camel>>Service.delete(formatedParams);
  }
}
