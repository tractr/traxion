<<if Fields enum>>
import {
  <<for Fields enum enumField>>
  <<Model pascal>><<enumField pascal>>
  <<endfor>>
} from '@prisma/client';
<<endif>>

import {
  IsOptional,

  <<if Fields boolean and searchable>>
  IsBoolean, 
  <<endif>>

  <<if Fields (string or entity or enum) and searchable>>
  IsString,
  <<endif>>

  <<if Fields enum and not internal>>
  IsIn,
  <<endif>>

  <<if Fields email and searchable>>
  IsEmail, 
  <<endif>>

  <<if Fields url and searchable>>
  IsUrl, 
  <<endif>>

  <<if Fields (number or datetime) and searchable>>
  IsNumber,
  <<endif>>

} from 'class-validator';
 
export class <<Model pascal>>FindManyQueryDto {
<<for Fields searchable and not password field>>
  <<if field boolean>>
  @IsBoolean(<<=listModifier(field)>>) 
  <<endif>>

  <<if field string or entity or enum>>
  @IsString(<<=listModifier(field)>>) 
  <<endif>>

  <<if field enum>>
  @IsIn([Object.values(<<Model pascal>><<field pascal>>)], <<=listModifier(field)>>) 
  <<endif>>

  <<if field email>>
  @IsEmail({}, <<=listModifier(field)>>) 
  <<endif>>

  <<if field url>>
  @IsUrl({}, <<=listModifier(field)>>) 
  <<endif>>

  <<if field number or datetime>>
  @IsNumber({},<<=listModifier(field)>>)
  <<endif>>

  @IsOptional()
  <<=optionalTypedProperty(field)>>
 
<<endfor>>
}

<<<
function optionalTypedProperty(f) {
  let out = f.names.camel;
  out += "?: "
  if (f.type === "boolean") out += "boolean";
  else if (f.type === "string") out += "string";
  else if (f.type === "enum") out += `${root.names.pascal}${f.names.pascal}`;
  else if (f.type === "number") out += "number";
  else if (f.type === "datetime") out += "number | Date";
  else if (f.type === "entity") {
    out +=  "string"
  }
  if (f.multiple) out += "[]";
  out += ";";
  return out;
}
>>>

<<<
function listModifier(f) {
  if (f.multiple) return "{ each: true}";
  else return "";
}
>>>
