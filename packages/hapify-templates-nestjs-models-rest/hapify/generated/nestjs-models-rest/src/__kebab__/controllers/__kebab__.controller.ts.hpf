import {
  Body,
  Controller,
  Delete,
  Get,
  Inject,
  Param,
  Patch,
  Post,
  Put,
  Query,
} from '@nestjs/common';
import { <<Model pascal>> } from '@prisma/client';
 
import { <<Model pascal>>Service, <<Model constant>>_SERVICE } from '@generated/nestjs-models-common';
import {
  <<Model pascal>>CountQueryDto,
  <<Model pascal>>CreateBodyDto,
  <<Model pascal>>DeleteParamsDto,
  <<Model pascal>>FindManyQueryDto,
  <<Model pascal>>FindUniqueParamsDto,
<<<if (root.dependencies.list.length || root.referencedIn.length) {>>>
  <<Model pascal>>FindUniqueQueryDto,
<<<}>>>
  <<Model pascal>>UpdateBodyDto,
  <<Model pascal>>UpdateParamsDto,
  <<Model pascal>>UpsertBodyDto,
  <<Model pascal>>UpsertParamsDto,
} from '@generated/rest-dtos';
import { <<Model constant>>_REST_DTO_SERVICE } from '../<<Model kebab>>-rest.constant';
import { <<Model pascal>>RestDtoService } from '../services';
 
@Controller(['<<Model kebab>>'])
export class <<Model pascal>>Controller {
  constructor(
    @Inject(<<Model constant>>_SERVICE)
    protected <<Model camel>>Service: <<Model pascal>>Service,
    @Inject(<<Model constant>>_REST_DTO_SERVICE)
    protected <<Model camel>>RestDtoService: <<Model pascal>>RestDtoService,
  ) {}
 
  /**
   * Create a new User
   *
   * @param bodyDto - Dto of the request body
   * @returns a new User
   */
  @Post()
  public create(@Body() bodyDto: <<Model pascal>>CreateBodyDto) {
    const formatedParams = this.<<Model camel>>RestDtoService.formatCreateDto(bodyDto);
    return this.<<Model camel>>Service.create(formatedParams);
  }
 
  /**
  * Count the number of <<Model pascal>> entities that matches the filter
  *
  * @param queryDto - Dto of the request query
  * @returns the number of <<Model pascal>>
  */
  @Get('count')
  public async count(@Query() queryDto: <<Model pascal>>CountQueryDto): Promise<number> {
    const formatedParams = this.<<Model camel>>RestDtoService.formatCountDto(queryDto);
    return this.<<Model camel>>Service.count(formatedParams);
  }
 
  /**
   * Find zero or one <<Model pascal>> that matches the filter
   *
   * @param paramsDto - Dto of the request param
   * @param queryDto - Dto of the request query
   * @returns a User or null
   */
  @Get(':id')
  public findUnique(
    @Param() paramsDto: <<Model pascal>>FindUniqueParamsDto,
    <<<if (root.dependencies.list.length || root.referencedIn.length) {>>>
    @Query() queryDto: <<Model pascal>>FindUniqueQueryDto,
    <<<}>>>
  ) {
    const formatedParams = this.<<Model camel>>RestDtoService.formatFindUniqueDtos(
      paramsDto,
    <<<if (root.dependencies.list.length || root.referencedIn.length) {>>>
      queryDto,
    <<<}>>>
    );
    return this.<<Model camel>>Service.findUnique(formatedParams);
  }
 
  /**
   * Find zero or more <<Model pascal>> entities that matches the filter
   *
   * @param queryDto - Dto of the request query
   * @returns an array of <<Model pascal>> entities
   */
  @Get()
  public findMany(
    @Query() queryDto: <<Model pascal>>FindManyQueryDto,
  ) {
    const formatedParams = this.<<Model camel>>RestDtoService.formatFindManyDto(queryDto);
    return this.<<Model camel>>Service.findMany(formatedParams);
  }
 
  /**
   * Update one <<Model pascal>>
   *
   * @Remarks
   *
   * Partial updates are allowed with this method
   *
   * @param paramsDto - Dto of the request param
   * @param bodyDto - Dto of the request body
   * @returns the updated <<Model pascal>>
   */
  @Patch(':id')
  public update(
    @Param() paramsDto: <<Model pascal>>UpdateParamsDto,
    @Body() bodyDto: <<Model pascal>>UpdateBodyDto,
  ) {
    const formatedParams = this.<<Model camel>>RestDtoService.formatUpdateDtos(
      paramsDto,
      bodyDto,
    );
    return this.<<Model camel>>Service.update(formatedParams);
  }
 
  /**
   * Update or create one <<Model pascal>>
   *
   * @Remarks
   *
   * Partial updates are forbidden with this method. It will
   * fully replace the matched entity
   *
   * @param paramsDto - Dto of the request param
   * @param bodyDto - Dto of the request body
   * @returns the updated <<Model pascal>>
   */
  @Put(':id')
  public upsert(
    @Param() paramsDto: <<Model pascal>>UpsertParamsDto,
    @Body() bodyDto: <<Model pascal>>UpsertBodyDto,
  ) {
    const formatedParams = this.<<Model camel>>RestDtoService.formatUpsertDtos(
      paramsDto,
      bodyDto,
    );
    return this.<<Model camel>>Service.upsert(formatedParams);
  }
 
  /**
   * Delete one <<Model pascal>>
   *
   * @param paramsDto - Dto of the request param
   * @returns the updated <<Model pascal>>
   */
  @Delete(':id')
  public delete(@Param() paramsDto: <<Model pascal>>DeleteParamsDto) {
    const formatedParams = this.<<Model camel>>RestDtoService.formatDeleteDto(paramsDto);
    return this.<<Model camel>>Service.delete(formatedParams);
  }
}
