// Generated schema (generated by hapify)
// ------------------------------------------------
<<for Models m>>
  model <<m pascal>> {
    <<for m.f f>>
    <<if f oneOne or oneMany>>
        <<f camel>>: <<f.model pascal>> @relation(fields: [<<f camel>>Id], references: [id])
        <<f camel>>Id: Int
    <<else>>
      <<f camel>> <<=prismaType(f)>> <<=primary(f)>> <<=unique(f)>>
    <<endif>>
    <<endfor>>
    <<for m.referencedIn r>>
        <<for r.fields f>>
            <<if f oneOne>>
         <<r camel>>: <<r pascal>>?
            <<elseif f oneMany>>
            <<r camel>>: <<r pascal>>[]
            <<endif>>
        <<endfor>>
    <<endfor>>
  }
<<endfor>>


<<<
function prismaType(f) {
  let out = "";

  // Generate type for prisma
  if (f.type === "boolean") out += "Boolean";
  else if (f.type === "string") out += "String";
  else if (f.type === "number") out += "Int";
  else if (f.type === "integer") out += "Int";
  else if (f.type === "float") out += "Float";
  else if (f.type === "datetime") out += "DateTime";
  else if (f.type === "entity")  {
    out += f.m.names.pascal;
  }

  // Handle nullable and multiple fields
  if (f.multiple) out += "[]";
  else if (f.nullable) out += "?";
  return out;
}
>>>

<<<
function primary(f) {
  if (!f.primary) return "";
  if (f.type === "string") return "@id @default(uuid())";
  if (f.type === "strnumbering") return "@id @default(autoincrement())";
}
>>>

<<<
function unique(f) {
  return f.unique ? "@unique": "";
}
>>>
