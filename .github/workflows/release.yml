name: Release and Deploy

on:
  push:
    branches:
      - main

env:
  NX_BRANCH: ${{ github.event.number || github.ref }}
  NX_RUN_GROUP: ${{ github.run_id }}

jobs:
  # Take all the packages and release them to https://npm.pkg.github.com
  npm-release:
    if: "!contains(github.event.commits[0].message, 'chore(release):')"

    # Our code will run on node 16 and Linux
    strategy:
      matrix:
        node: [16.x]
        os: [ubuntu-20.04]

    name: Release npm packages on node ${{ matrix.node }} and ${{ matrix.os }}
    runs-on: ['${{ matrix.os }}']

    outputs:
      apps: ${{ steps.apps.outputs.result }}

    steps:
      # First we checkout the code
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          persist-credentials: false
          token: ${{ secrets.GH_TOKEN }}

      # We initialize the node action
      - name: Use node.js ${{ matrix.node }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
          registry-url: https://npm.pkg.github.com

      # We install our dependencies
      - name: Run npm install
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm ci --no-audit --no-progress

      # We install our dependencies
      - name: Run npm generate
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm run generate

      # We build our code base
      - name: Run nx build
        run: npx nx build

      # We build our code base
      - name: Configure git
        run: |
          git config --local user.name 'tractr-bot'
          git config --local user.email 'tractr-bot@users.noreply.github.com'

      # We run our release script
      - name: nx run workspace:release
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx nx run workspace:release --base latest

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GH_TOKEN }}
          branch: ${{ github.ref }}
          tags: true

      # Set the matrix apps that have been affected by all the changes
      - name: Affected apps output
        id: nx-apps
        run: |
          echo "::set-output name=apps::$(npx nx affected:apps --plain --base latest | sed 's/ /,/g')"

      - name: Return formatted output
        uses: actions/github-script@v3
        id: apps
        env:
          APPS: ${{ steps.nx-apps.outputs.apps }}
        with:
          script: |
            const fs = require('fs');
            const join = require('path').join;
            const apps = process.env.APPS.split(',')
              .filter((name) => name !== '')
              .filter((name) => fs.existsSync(join(process.cwd(), 'apps', name, 'Dockerfile')));

            console.log('Set the matrix to deploy the docker container:', apps);
            return apps;

      - name: Get the last commit SHA
        id: commit
        shell: bash
        run: |
          echo "::set-output name=sha::$(git rev-parse HEAD)"

      - name: Manage released tag
        uses: actions/github-script@v3
        env:
          SHA: ${{ steps.commit.outputs.sha }}

        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            try {
              console.log("Remove the latest tag from the repository")
              await github.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: "tags/latest"
              })
            } catch (e) {
              console.log("The latest tag doesn't exist yet: " + e)
            }
            console.log("Create the latest tag on:" + context.sha)
            await github.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/latest",
              sha: process.env.SHA
            })
