name: test and deploy

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  build:
    strategy:
      matrix:
        node: [15.x]
        os: [ubuntu-latest]
    name: install on node ${{ matrix.node }} and ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Use node.js ${{ matrix.node }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
          registry-url: https://npm.pkg.github.com
      - uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      - name: Run npm install
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm ci
      - name: Run npm build
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm run build
      - name: Upload dist folders
        uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-build-${{ hashFiles('package-lock.json') }}
          path: |
            apps/**/dist/
            packages/**/dist/
          if-no-files-found: error

  test:
    if: success()
    needs: [build]
    strategy:
      matrix:
        node: [15.x]
        os: [ubuntu-latest]
    name: test on node ${{ matrix.node }} and ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Use node.js ${{ matrix.node }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
          registry-url: https://npm.pkg.github.com
      - uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      - name: Run npm install
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm ci --prefer-offline --no-audit --progress=false
      - name: download dist folders
        uses: actions/download-artifact@v2
        with:
          name: ${{ runner.os }}-build-${{ hashFiles('package-lock.json') }}
      - name: test
        run: exit 0
        # run: npm run test

  lint:
    if: success()
    needs: [build]
    strategy:
      matrix:
        node: [15.x]
        os: [ubuntu-latest]
    name: lint on node ${{ matrix.node }} and ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: use node.js ${{ matrix.node }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
          registry-url: https://npm.pkg.github.com
      - uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      - name: Run npm install
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm ci --prefer-offline --no-audit --progress=false
      - name: download dist folders
        uses: actions/download-artifact@v2
        with:
          name: ${{ runner.os }}-build-${{ hashFiles('package-lock.json') }}
      - name: test
        run: exit 0
        # run: npm run lint

  npm-release:
    if: success() && github.ref == 'refs/heads/master'
    needs: [lint, test]
    strategy:
      matrix:
        node: [15.x]
        os: [ubuntu-latest]
    name: release on node ${{ matrix.node }} and ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: use node.js ${{ matrix.node }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
          registry-url: https://npm.pkg.github.com
      - uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      - name: Run npm install
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm ci --prefer-offline --no-audit --progress=false
      - name: download dist folders
        uses: actions/download-artifact@v2
        with:
          name: ${{ runner.os }}-build-${{ hashFiles('package-lock.json') }}
      - name: Relase npm packages
        if: success()
        env:
          CI: true
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run:
          npx multi-semantic-release --sequential-init --ignore-packages=apps/*

  docker-release:
    if: success() && github.ref == 'refs/heads/master'
    needs: [npm-release]
    strategy:
      matrix:
        node: [15.x]
        os: [ubuntu-latest]
    name: release on node ${{ matrix.node }} and ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: use node.js ${{ matrix.node }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
          registry-url: https://npm.pkg.github.com
      - uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      - name: Run npm install
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm ci --prefer-offline --no-audit --progress=false
      - name: download dist folders
        uses: actions/download-artifact@v2
        with:
          name: ${{ runner.os }}-build-${{ hashFiles('package-lock.json') }}
      - name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          # list of Docker images to use as base name for tags
          images: |
            name/app
            ghcr.io/username/app
          # add git short SHA as Docker tag
          tag-sha: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - uses: docker/setup-buildx-action@v1
        id: buildx
        with:
          install: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: tractr/backend-starter:latest
          secrets: |
            npmrc=
