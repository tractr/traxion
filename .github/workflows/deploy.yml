name: Release and Deploy

on:
  push:
    branches:
      - main

jobs:
  npm-changes:
    name: Check if packages/** has some changes
    runs-on: ubuntu-latest
    outputs:
      # Expose matched filters as job 'packages' output variable
      packages: ${{ steps.filter.outputs.packages }}
    steps:
      - uses: actions/checkout@v2
      # For pull requests it's not necessary to checkout the code
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          # Use context to get the branch where commits were pushed.
          # If there is only one long-lived branch (e.g. master),
          # you can specify it directly.
          # If it's not configured, the repository default branch is used.
          base: ${{ github.ref }}
          token: ${{ secrets.GH_TOKEN }}
          filters: |
            packages:
            - 'packages/**'

  # Take all the packages and release them to https://npm.pkg.github.com
  npm-release:
    needs: [npm-changes]
    if: ${{ needs.npm-changes.outputs.packages == 'true' }}

    # Our code will run on node 16 and Linux
    strategy:
      matrix:
        node: [16.x]
        os: [ubuntu-latest]

    name: Release npm packages on node ${{ matrix.node }} and ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    steps:
      # First we checkout the code
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          persist-credentials: false

      # We configure our node environmment and our registry
      - name: use node.js ${{ matrix.node }}
        uses: actions/setup-node@v2.1.5
        with:
          node-version: ${{ matrix.node}}
          registry-url: https://npm.pkg.github.com

      # We get our cache compare to our package-lock
      - name: Get npm cache directory
        id: yarn-cache-dir
        run: |
          echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2.1.4
        with:
          path: |
            ${{ steps.yarn-cache-dir.outputs.dir }}
            node_modules
            */*/node_modules
          key:
            ${{ matrix.os }}-yarn-${{ matrix.node }}-${{
            hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ matrix.os }}-yarn-${{ matrix.node }}-

      # We install our dependencies
      - name: Run npm install
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: yarn --frozen-lock --prefer-offline --no-audit --no-progress

      # We build our code base
      - name: Run npm build
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm run build

      # We release our packages to our registry
      - name: Relase npm packages
        if: success()
        env:
          CI: true
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx multi-semantic-release --sequential-init

  docker-changes:
    name: Check if apps/** has some changes
    if: always()
    needs: [npm-release]
    runs-on: ubuntu-latest
    outputs:
      # Expose matched filters as matrix output variable
      apps: ${{ steps.filter.outputs.changes }}
      backend-starter: ${{ steps.filter.outputs.backend-starter }}
      angular-pwa: ${{ steps.filter.outputs.angular-pwa }}
    steps:
      - uses: actions/checkout@v2
      # For pull requests it's not necessary to checkout the code
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          # Use context to get the branch where commits were pushed.
          # If there is only one long-lived branch (e.g. master),
          # you can specify it directly.
          # If it's not configured, the repository default branch is used.
          base: ${{ github.ref }}
          token: ${{ secrets.GH_TOKEN }}
          filters: |
            backend-starter: 
              - 'apps/backend-starter/**'
            angular-pwa:
              - 'apps/angular-pwa/**'

  docker-release:
    # If we got some change inside apps/** we execute this job
    if:
      always() && (needs.docker-changes.outputs.backend-starter == 'true' ||
      needs.docker-changes.outputs.angular-pwa == 'true')
    needs: [docker-changes]
    strategy:
      matrix:
        app: ${{ fromJSON(needs.docker-changes.outputs.apps) }}
        node: [16.x]
        os: [ubuntu-latest]
        scope: [tractr]
        repository: [tractr]
    name: docker release ${{ matrix.app }} (@${{ matrix.scope }})
    runs-on: ${{ matrix.os }}
    steps:
      # Checkout the source code
      - uses: actions/checkout@v2

      # Setup the node js env
      - name: use node.js ${{ matrix.node }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
          registry-url: https://npm.pkg.github.com

      # Get some cache to speed up docker build
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.app }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.app }}-

      # Register some meta data to build docker
      - name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images:
            ghcr.io/${{ matrix.repository }}/${{ matrix.scope }}-${{ matrix.app
            }}
          tag-sha: true
          tag-latest: true

      # Setup QEMU
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      # RSetup buildx
      - uses: docker/setup-buildx-action@v1
        id: buildx
        with:
          install: true

      # Loggin to our docker registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_TOKEN }}

      # Build and push our docker images to the registry
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          file: ./apps/${{ matrix.app }}/Dockerfile
          build-args: |
            app=apps/${{ matrix.app }}
            NODE_AUTH_TOKEN=${{ secrets.NPM_TOKEN }}
          secret-files: npmrc=${{ env.NPM_CONFIG_USERCONFIG }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896

      # Change the cache for buildx
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
