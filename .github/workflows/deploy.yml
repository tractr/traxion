name: Release and Deploy

on:
  push:
    branches:
      - main

jobs:
  # Take all the packages and release them to https://npm.pkg.github.com
  npm-release:
    # Our code will run on node 16 and Linux
    strategy:
      matrix:
        node: [16.x]
        os: [ubuntu-latest]

    name: Release npm packages on node ${{ matrix.node }} and ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    steps:
      # First we checkout the code
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          persist-credentials: false

      # We configure our node environmment and our registry
      - name: use node.js ${{ matrix.node }}
        uses: actions/setup-node@v2.1.5
        with:
          node-version: ${{ matrix.node}}
          registry-url: https://npm.pkg.github.com

      # We get our cache compare to our package-lock
      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - uses: actions/cache@v2.1.4
        with:
          path: |
            ${{ steps.npm-cache-dir.outputs.dir }}
            node_modules
            */*/node_modules
          key:
            ${{ matrix.os }}-node-${{ matrix.node }}-${{
            hashFiles('package-lock.json') }}

      # We install our dependencies
      - name: Run npm install
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm ci --prefer-offline --no-audit --progress=false

      # We build our code base
      - name: Run npm build
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm run build

      # We release our packages to our registry
      - name: Relase npm packages
        if: success()
        env:
          CI: true
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx multi-semantic-release --sequential-init

  # JOB to run change detection
  docker-changes:
    runs-on: ubuntu-latest
    outputs:
      # Expose matched filters as job 'packages' output variable
      apps: ${{ steps.filter.outputs.changes }}
    steps:
      # For pull requests it's not necessary to checkout the code
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          token: ${{ secrets.GH_TOKEN }}
          filters: |
            backend-starter: apps/backend-starter
            angular-pwa: apps/angular-pwa

  docker-release:
    if: success() && fromJSON(needs.changes.outputs.apps).length > 0
    needs: [docker-changes]
    strategy:
      matrix:
        app: ${{ fromJSON(needs.changes.outputs.apps) }}
        node: [16.x]
        os: [ubuntu-latest]
        scope: [tractr]
        repository: [tractr]
    name: docker release ${{ matrix.app }} (@${{ matrix.scope }})
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            src:
              - 'src/**'
      # - name: use node.js ${{ matrix.node }}
      #   uses: actions/setup-node@v1
      #   with:
      #     node-version: ${{ matrix.node }}
      #     registry-url: https://npm.pkg.github.com
      # - uses: actions/cache@v2
      #   with:
      #     path: ~/.npm
      #     key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      # - name: Run npm install
      #   env:
      #     NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      #   run: npm ci --prefer-offline --no-audit --progress=false
      # - name: Run npm build
      #   env:
      #     NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      #   run: npm run build
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.app }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.app }}-
      - name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images:
            ghcr.io/${{ matrix.repository }}/@${{ matrix.scope }}-${{ matrix.app
            }}
          tag-sha: true
          tag-latest: true
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - uses: docker/setup-buildx-action@v1
        id: buildx
        with:
          install: true
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          file: ./apps/${{ matrix.app }}/Dockerfile
          build-args: |
            app=apps/${{ matrix.app }}
            NODE_AUTH_TOKEN=${{ secrets.NPM_TOKEN }}
          secret-files: npmrc=${{ env.NPM_CONFIG_USERCONFIG }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
