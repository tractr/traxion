#####################################
##      Reusable workflow tests     ##
#####################################
name: Release Docker

on:
  workflow_call:
    inputs:
      botName:
        description: 'The github bot name'
        type: string
        required: true

      registryUrl:
        description: 'The npm token if needed'
        type: string
        required: false
        default: 'https://registry.npmjs.org'

      all:
        description: 'Describe if we want to publish all the container or not'
        type: boolean
        required: false
        default: false

      tag:
        description: 'Describe which tag you want to publish'
        type: string
        required: false
        default: 'latest'

      semver:
        description: 'Describe you want to publish semver version'
        type: boolean
        required: false
        default: true

    secrets:
      NPM_TOKEN:
        description: 'The npm token if needed'
        required: false

      GH_TOKEN:
        description: 'The github bot-token'
        required: true

      AWS_ACCESS_KEY_ID:
        description: 'The aws access key id'
        required: true

      AWS_SECRET_ACCESS_KEY:
        description: 'The aws secret access key'
        required: true

      AWS_REGION:
        description: 'The aws region'
        required: true

      PROJECT_CODE:
        description: 'The project code name'
        required: true

jobs:
  affected-apps:
    runs-on: ubuntu-20.04

    outputs:
      apps: ${{ steps.apps.outputs.apps }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Get the affected apps
        id: apps
        uses: tractr/stack/.github/actions/affected-apps@main
        with:
          all: ${{ inputs.all }}

  # Take all the packages and release them to https://npm.pkg.github.com
  docker-release:
    name: Release docker containers

    # If we got some change inside apps/** we execute this job
    if: |
      !contains(github.event.commits[0].message, 'chore(release):') &&
      !failure() &&
      !contains(needs.affected-apps.outputs.apps, '[]')

    needs: [affected-apps]

    strategy:
      matrix:
        app: ${{ fromJSON(needs.affected-apps.outputs.apps) }}
        node: [16.x]
        os: [ubuntu-20.04]

    runs-on: ['${{ matrix.os }}']

    steps:
      # First we checkout the code
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: false

      # Setup the node js env
      - name: use node.js ${{ matrix.node }}
        uses: actions/setup-node@v3
        with:
          cache: 'npm'
          node-version: ${{ matrix.node }}
          registry-url: ${{ inputs.registryUrl }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Get some cache to speed up docker build
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-dockerbuild-${{ matrix.app }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-dockerbuild-${{ matrix.app }}-

      - name: Extract version
        id: extract_version
        uses: Saionaro/extract-package-version@v1.1.1
        with:
          path: ./apps/${{ matrix.app }}

      # Register some meta data to build docker
      - name: Docker meta - latest
        id: docker_meta
        uses: docker/metadata-action@v3
        with:
          images:
            ${{ steps.login-ecr.outputs.registry }}/${{ secrets.PROJECT_CODE
            }}/${{ matrix.app }}
          tags: |
            raw,value=${{ inputs.tag }}
            type=semver,pattern={{version}},value=v${{ steps.extract_version.outputs.version }},enable=${{ inputs.semver }}
            type=semver,pattern={{major}}.{{minor}},value=v${{ steps.extract_version.outputs.version }},enable=${{ inputs.semver }}
            type=semver,pattern={{major}},value=v${{ steps.extract_version.outputs.version }},enable=${{ inputs.semver }}

      # Setup QEMU
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      # Setup buildx
      - uses: docker/setup-buildx-action@v1
        id: buildx
        with:
          install: true

      # Loggin to our docker registry
      - name: Login to Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ steps.login-ecr.outputs.registry }}

      # Build and push our docker images to the registry
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          file: ./apps/${{ matrix.app }}/Dockerfile
          secret-files: npmrc=${{ env.NPM_CONFIG_USERCONFIG }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          build-args: |
            app=${{ matrix.app }}
            NODE_AUTH_TOKEN=${{ secrets.NPM_TOKEN }}

      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      # Change the cache for buildx
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
